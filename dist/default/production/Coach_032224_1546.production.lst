

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Mar 23 14:43:55 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F2221
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 09/02/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2221 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     
    70                           	psect	smallconst
    71   000200                     __psmallconst:
    72                           	callstack 0
    73   000200  00                 	db	0
    74   000201                     _keypad_array:
    75                           	callstack 0
    76   000201  31                 	db	49
    77   000202  32                 	db	50
    78   000203  33                 	db	51
    79   000204  41                 	db	65
    80   000205  34                 	db	52
    81   000206  35                 	db	53
    82   000207  36                 	db	54
    83   000208  42                 	db	66
    84   000209  37                 	db	55
    85   00020A  38                 	db	56
    86   00020B  39                 	db	57
    87   00020C  43                 	db	67
    88   00020D  2A                 	db	42
    89   00020E  30                 	db	48
    90   00020F  23                 	db	35
    91   000210  44                 	db	68
    92   000211                     __end_of_keypad_array:
    93                           	callstack 0
    94   000000                     _SSPCON1bits	set	4038
    95   000000                     _SSPADD	set	4040
    96   000000                     _SSPSTATbits	set	4039
    97   000000                     _TMR3L	set	4018
    98   000000                     _TMR3H	set	4019
    99   000000                     _TMR1L	set	4046
   100   000000                     _TMR1H	set	4047
   101   000000                     _T0CONbits	set	4053
   102   000000                     _T3CONbits	set	4017
   103   000000                     _T1CONbits	set	4045
   104   000000                     _PORTB	set	3969
   105   000000                     _LATA	set	3977
   106   000000                     _LATB	set	3978
   107   000000                     _PIE1bits	set	3997
   108   000000                     _T1CON	set	4045
   109   000000                     _TMR0L	set	4054
   110   000000                     _TMR0H	set	4055
   111   000000                     _INTCONbits	set	4082
   112   000000                     _INTCON2bits	set	4081
   113   000000                     _PIE2bits	set	4000
   114   000000                     _T3CON	set	4017
   115   000000                     _SSPCON2bits	set	4037
   116   000000                     _SSPBUF	set	4041
   117   000000                     _PIR1bits	set	3998
   118   000000                     _RCONbits	set	4048
   119   000000                     _OSCCONbits	set	4051
   120   000000                     _TRISA	set	3986
   121   000000                     _TRISB	set	3987
   122   000000                     _TRISCbits	set	3988
   123   000000                     _OSCTUNEbits	set	3995
   124   000000                     _LATCbits	set	3979
   125   000000                     _PIR2bits	set	4001
   126   000000                     _ADCON1bits	set	4033
   127   000000                     _T0CON	set	4053
   128   000211                     STR_3:
   129   000211  43                 	db	67	;'C'
   130   000212  61                 	db	97	;'a'
   131   000213  70                 	db	112	;'p'
   132   000214  73                 	db	115	;'s'
   133   000215  74                 	db	116	;'t'
   134   000216  6F                 	db	111	;'o'
   135   000217  6E                 	db	110	;'n'
   136   000218  65                 	db	101	;'e'
   137   000219  00                 	db	0
   138   00021A                     STR_1:
   139   00021A  53                 	db	83	;'S'
   140   00021B  65                 	db	101	;'e'
   141   00021C  6E                 	db	110	;'n'
   142   00021D  64                 	db	100	;'d'
   143   00021E  69                 	db	105	;'i'
   144   00021F  6E                 	db	110	;'n'
   145   000220  67                 	db	103	;'g'
   146   000221  00                 	db	0
   147   000222                     STR_2:
   148   000222  53                 	db	83	;'S'
   149   000223  65                 	db	101	;'e'
   150   000224  6E                 	db	110	;'n'
   151   000225  69                 	db	105	;'i'
   152   000226  6F                 	db	111	;'o'
   153   000227  72                 	db	114	;'r'
   154   000228  00                 	db	0
   155   000229                     STR_4:
   156   000229  20                 	db	32
   157   00022A  00                 	db	0
   158   00022B  00                 	db	0	; dummy byte at the end
   159   000000                     
   160                           ; #config settings
   161                           
   162                           	psect	cinit
   163   0009EE                     __pcinit:
   164                           	callstack 0
   165   0009EE                     start_initialization:
   166                           	callstack 0
   167   0009EE                     __initialization:
   168                           	callstack 0
   169                           
   170                           ; Clear objects allocated to COMRAM (13 bytes)
   171   0009EE  EE00  F03C         	lfsr	0,__pbssCOMRAM
   172   0009F2  0E0D               	movlw	13
   173   0009F4                     clear_0:
   174   0009F4  6AEE               	clrf	postinc0,c
   175   0009F6  06E8               	decf	wreg,f,c
   176   0009F8  E1FD               	bnz	clear_0
   177   0009FA                     end_of_initialization:
   178                           	callstack 0
   179   0009FA                     __end_of__initialization:
   180                           	callstack 0
   181   0009FA  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   182   0009FC  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   183   0009FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184   000A00  6EF8               	movwf	tblptru,c
   185   000A02  0100               	movlb	0
   186   000A04  EF16  F001         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189   00003C                     __pbssCOMRAM:
   190                           	callstack 0
   191   00003C                     _key_pressed:
   192                           	callstack 0
   193   00003C                     	ds	1
   194   00003D                     _message_length:
   195                           	callstack 0
   196   00003D                     	ds	1
   197   00003E                     _keys:
   198                           	callstack 0
   199   00003E                     	ds	11
   200                           
   201                           	psect	cstackCOMRAM
   202   000001                     __pcstackCOMRAM:
   203                           	callstack 0
   204   000001                     ??_keypress:
   205   000001                     
   206                           ; 1 bytes @ 0x0
   207   000001                     	ds	3
   208   000004                     keypress@current_row:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x3
   212   000004                     	ds	1
   213   000005                     keypress@col_key_press:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x4
   217   000005                     	ds	1
   218   000006                     keypress@col_num:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x5
   222   000006                     	ds	1
   223   000007                     ??_ISR:
   224                           
   225                           ; 1 bytes @ 0x6
   226   000007                     	ds	9
   227   000010                     ISR@current_row:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0xF
   231   000010                     	ds	1
   232   000011                     ISR@is_key_pressed:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0x10
   236   000011                     	ds	1
   237   000012                     ?___lmul:
   238                           	callstack 0
   239   000012                     i2c_data_tx@data:
   240                           	callstack 0
   241   000012                     i2c_start_and_addr@address:
   242                           	callstack 0
   243   000012                     ___lmul@multiplier:
   244                           	callstack 0
   245                           
   246                           ; 4 bytes @ 0x11
   247   000012                     	ds	4
   248   000016                     ___lmul@multiplicand:
   249                           	callstack 0
   250                           
   251                           ; 4 bytes @ 0x15
   252   000016                     	ds	4
   253   00001A                     ___lmul@product:
   254                           	callstack 0
   255                           
   256                           ; 4 bytes @ 0x19
   257   00001A                     	ds	4
   258   00001E                     delay@milliseconds:
   259                           	callstack 0
   260                           
   261                           ; 4 bytes @ 0x1D
   262   00001E                     	ds	4
   263   000022                     delay@timer_value:
   264                           	callstack 0
   265                           
   266                           ; 8 bytes @ 0x21
   267   000022                     	ds	8
   268   00002A                     ??_lcd_char:
   269   00002A                     send@data:
   270                           	callstack 0
   271   00002A                     lcd_command@lt:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x29
   275   00002A                     	ds	1
   276   00002B                     lcd_command@rw:
   277                           	callstack 0
   278   00002B                     lcd_char@letter:
   279                           	callstack 0
   280   00002B                     packet_pre_post_amble@i:
   281                           	callstack 0
   282   00002B                     packet_interim_amble@i:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x2A
   286   00002B                     	ds	1
   287   00002C                     lcd_command@rs:
   288                           	callstack 0
   289   00002C                     lcd_message@message:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x2B
   293   00002C                     	ds	1
   294   00002D                     ??_send_message:
   295   00002D                     ??_lcd_command:
   296                           
   297                           ; 1 bytes @ 0x2C
   298   00002D                     	ds	1
   299   00002E                     send_message@j:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x2D
   303   00002E                     	ds	2
   304   000030                     lcd_command@data:
   305                           	callstack 0
   306   000030                     send_message@i:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x2F
   310   000030                     	ds	1
   311   000031                     lcd_move_cursor@position:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x30
   315   000031                     	ds	1
   316   000032                     lcd_move_cursor@line:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x31
   320   000032                     	ds	1
   321   000033                     ??_main:
   322                           
   323                           ; 1 bytes @ 0x32
   324   000033                     	ds	3
   325   000036                     main@i:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x35
   329   000036                     	ds	2
   330   000038                     main@i_898:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x37
   334   000038                     	ds	2
   335   00003A                     main@i_896:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x39
   339   00003A                     	ds	2
   340                           
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 46 in file "main.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  i               2   55[COMRAM] int 
   351 ;;  i               2   57[COMRAM] int 
   352 ;;  i               2   53[COMRAM] int 
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1
   362 ;;      Params:         0       0       0
   363 ;;      Locals:         6       0       0
   364 ;;      Temps:          3       0       0
   365 ;;      Totals:         9       0       0
   366 ;;Total ram usage:        9 bytes
   367 ;; Hardware stack levels required when called: 7
   368 ;; This function calls:
   369 ;;		_keypad_init
   370 ;;		_lcd_backspace
   371 ;;		_lcd_clear
   372 ;;		_lcd_init
   373 ;;		_lcd_message
   374 ;;		_lcd_move_cursor
   375 ;;		_send_message
   376 ;;		_system_init
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text0
   383   00022C                     __ptext0:
   384                           	callstack 0
   385   00022C                     _main:
   386                           	callstack 24
   387                           
   388                           ;main.c: 49:     system_init();
   389                           
   390                           ;incstack = 0
   391   00022C  EC47  F004         	call	_system_init	;wreg free
   392                           
   393                           ;main.c: 51:     lcd_init();
   394   000230  EC5C  F003         	call	_lcd_init	;wreg free
   395                           
   396                           ;main.c: 52:     keypad_init();
   397   000234  ECB5  F004         	call	_keypad_init	;wreg free
   398   000238                     l1479:
   399                           
   400                           ;main.c: 56:     {;main.c: 58:         if(key_pressed && keys[message_length-1] != '*' &
      +                          & keys[message_length-1] != 'D' && keys[message_length-1] != '#' && keys[message_length-
      +                          1] != 'A')
   401   000238  503C               	movf	_key_pressed^0,w,c
   402   00023A  B4D8               	btfsc	status,2,c
   403   00023C  D02A               	goto	l1493
   404   00023E  503D               	movf	_message_length^0,w,c
   405   000240  0F3D               	addlw	low (_keys+255)
   406   000242  6ED9               	movwf	fsr2l,c
   407   000244  6ADA               	clrf	fsr2h,c
   408   000246  0E2A               	movlw	42
   409   000248  18DE               	xorwf	postinc2,w,c
   410   00024A  B4D8               	btfsc	status,2,c
   411   00024C  D022               	goto	l1493
   412   00024E  503D               	movf	_message_length^0,w,c
   413   000250  0F3D               	addlw	low (_keys+255)
   414   000252  6ED9               	movwf	fsr2l,c
   415   000254  6ADA               	clrf	fsr2h,c
   416   000256  0E44               	movlw	68
   417   000258  18DE               	xorwf	postinc2,w,c
   418   00025A  B4D8               	btfsc	status,2,c
   419   00025C  D01A               	goto	l1493
   420   00025E  503D               	movf	_message_length^0,w,c
   421   000260  0F3D               	addlw	low (_keys+255)
   422   000262  6ED9               	movwf	fsr2l,c
   423   000264  6ADA               	clrf	fsr2h,c
   424   000266  0E23               	movlw	35
   425   000268  18DE               	xorwf	postinc2,w,c
   426   00026A  B4D8               	btfsc	status,2,c
   427   00026C  D012               	goto	l1493
   428   00026E  503D               	movf	_message_length^0,w,c
   429   000270  0F3D               	addlw	low (_keys+255)
   430   000272  6ED9               	movwf	fsr2l,c
   431   000274  6ADA               	clrf	fsr2h,c
   432   000276  0E41               	movlw	65
   433   000278  18DE               	xorwf	postinc2,w,c
   434   00027A  B4D8               	btfsc	status,2,c
   435   00027C  D00A               	goto	l1493
   436                           
   437                           ;main.c: 59:         {;main.c: 60:             lcd_message(keys + message_length-1);
   438   00027E  503D               	movf	_message_length^0,w,c
   439   000280  0F3D               	addlw	low (_keys+-1)
   440   000282  6E33               	movwf	??_main^0,c
   441   000284  C033  F02C         	movff	??_main,lcd_message@message
   442   000288  6A2D               	clrf	(lcd_message@message+1)^0,c
   443   00028A  ECC6  F003         	call	_lcd_message	;wreg free
   444                           
   445                           ;main.c: 62:             key_pressed = 0;
   446   00028E  0E00               	movlw	0
   447   000290  6E3C               	movwf	_key_pressed^0,c
   448   000292                     l1493:
   449                           
   450                           ;main.c: 64:         if(key_pressed && keys[message_length-1] == '*' && message_length >
      +                           1)
   451   000292  503C               	movf	_key_pressed^0,w,c
   452   000294  B4D8               	btfsc	status,2,c
   453   000296  D01B               	goto	l1509
   454   000298  503D               	movf	_message_length^0,w,c
   455   00029A  0F3D               	addlw	low (_keys+255)
   456   00029C  6ED9               	movwf	fsr2l,c
   457   00029E  6ADA               	clrf	fsr2h,c
   458   0002A0  0E2A               	movlw	42
   459   0002A2  18DE               	xorwf	postinc2,w,c
   460   0002A4  A4D8               	btfss	status,2,c
   461   0002A6  D013               	goto	l1509
   462   0002A8  0E01               	movlw	1
   463   0002AA  643D               	cpfsgt	_message_length^0,c
   464   0002AC  D010               	goto	l1509
   465                           
   466                           ;main.c: 65:         {;main.c: 66:             lcd_backspace();
   467   0002AE  EC80  F004         	call	_lcd_backspace	;wreg free
   468                           
   469                           ;main.c: 67:             keys[message_length - 1] = '\0';
   470   0002B2  503D               	movf	_message_length^0,w,c
   471   0002B4  0F3D               	addlw	low (_keys+255)
   472   0002B6  6ED9               	movwf	fsr2l,c
   473   0002B8  6ADA               	clrf	fsr2h,c
   474   0002BA  6ADF               	clrf	indf2,c
   475                           
   476                           ;main.c: 68:             keys[message_length - 2] = '\0';
   477   0002BC  503D               	movf	_message_length^0,w,c
   478   0002BE  0F3C               	addlw	low (_keys+254)
   479   0002C0  6ED9               	movwf	fsr2l,c
   480   0002C2  6ADA               	clrf	fsr2h,c
   481   0002C4  6ADF               	clrf	indf2,c
   482                           
   483                           ;main.c: 69:             message_length -= 2;
   484   0002C6  0E02               	movlw	2
   485   0002C8  5E3D               	subwf	_message_length^0,f,c
   486                           
   487                           ;main.c: 70:             key_pressed = 0;
   488   0002CA  0E00               	movlw	0
   489   0002CC  6E3C               	movwf	_key_pressed^0,c
   490   0002CE                     l1509:
   491                           
   492                           ;main.c: 72:         if(key_pressed && keys[message_length-1] == 'D')
   493   0002CE  503C               	movf	_key_pressed^0,w,c
   494   0002D0  B4D8               	btfsc	status,2,c
   495   0002D2  D027               	goto	l118
   496   0002D4  503D               	movf	_message_length^0,w,c
   497   0002D6  0F3D               	addlw	low (_keys+255)
   498   0002D8  6ED9               	movwf	fsr2l,c
   499   0002DA  6ADA               	clrf	fsr2h,c
   500   0002DC  0E44               	movlw	68
   501   0002DE  18DE               	xorwf	postinc2,w,c
   502   0002E0  A4D8               	btfss	status,2,c
   503   0002E2  D01F               	goto	l118
   504                           
   505                           ;main.c: 73:         {;main.c: 74:             lcd_clear();
   506   0002E4  EC96  F003         	call	_lcd_clear	;wreg free
   507                           
   508                           ;main.c: 76:             for(int i = 0; i < message_length; i++)
   509   0002E8  0E00               	movlw	0
   510   0002EA  6E37               	movwf	(main@i+1)^0,c
   511   0002EC  0E00               	movlw	0
   512   0002EE  6E36               	movwf	main@i^0,c
   513   0002F0  D007               	goto	l1521
   514   0002F2                     l1517:
   515                           
   516                           ;main.c: 77:             {;main.c: 78:                 keys[i] = '\0';
   517   0002F2  5036               	movf	main@i^0,w,c
   518   0002F4  0F3E               	addlw	low _keys
   519   0002F6  6ED9               	movwf	fsr2l,c
   520   0002F8  6ADA               	clrf	fsr2h,c
   521   0002FA  6ADF               	clrf	indf2,c
   522                           
   523                           ;main.c: 79:             }
   524   0002FC  4A36               	infsnz	main@i^0,f,c
   525   0002FE  2A37               	incf	(main@i+1)^0,f,c
   526   000300                     l1521:
   527   000300  503D               	movf	_message_length^0,w,c
   528   000302  6E33               	movwf	??_main^0,c
   529   000304  6A34               	clrf	(??_main+1)^0,c
   530   000306  5033               	movf	??_main^0,w,c
   531   000308  5C36               	subwf	main@i^0,w,c
   532   00030A  5037               	movf	(main@i+1)^0,w,c
   533   00030C  0A80               	xorlw	128
   534   00030E  6E35               	movwf	(??_main+2)^0,c
   535   000310  5034               	movf	(??_main+1)^0,w,c
   536   000312  0A80               	xorlw	128
   537   000314  5835               	subwfb	(??_main+2)^0,w,c
   538   000316  A0D8               	btfss	status,0,c
   539   000318  D7EC               	goto	l1517
   540                           
   541                           ;main.c: 81:             message_length = 0;
   542   00031A  0E00               	movlw	0
   543   00031C  6E3D               	movwf	_message_length^0,c
   544                           
   545                           ;main.c: 82:             key_pressed = 0;
   546   00031E  0E00               	movlw	0
   547   000320  6E3C               	movwf	_key_pressed^0,c
   548   000322                     l118:
   549                           
   550                           ;main.c: 85:         if(key_pressed && keys[message_length-1] == 'A')
   551   000322  503C               	movf	_key_pressed^0,w,c
   552   000324  B4D8               	btfsc	status,2,c
   553   000326  D02B               	goto	l1547
   554   000328  503D               	movf	_message_length^0,w,c
   555   00032A  0F3D               	addlw	low (_keys+255)
   556   00032C  6ED9               	movwf	fsr2l,c
   557   00032E  6ADA               	clrf	fsr2h,c
   558   000330  0E41               	movlw	65
   559   000332  18DE               	xorwf	postinc2,w,c
   560   000334  A4D8               	btfss	status,2,c
   561   000336  D023               	goto	l1547
   562                           
   563                           ;main.c: 86:         {;main.c: 87:             lcd_clear();
   564   000338  EC96  F003         	call	_lcd_clear	;wreg free
   565                           
   566                           ;main.c: 89:             for(int i = 0; i < 6; i++)
   567   00033C  0E00               	movlw	0
   568   00033E  6E3B               	movwf	(main@i_896+1)^0,c
   569   000340  0E00               	movlw	0
   570   000342  6E3A               	movwf	main@i_896^0,c
   571   000344                     l1535:
   572                           
   573                           ;main.c: 90:             {;main.c: 91:                 keys[i] = '0' + i;
   574   000344  503A               	movf	main@i_896^0,w,c
   575   000346  0F3E               	addlw	low _keys
   576   000348  6ED9               	movwf	fsr2l,c
   577   00034A  6ADA               	clrf	fsr2h,c
   578   00034C  503A               	movf	main@i_896^0,w,c
   579   00034E  0F30               	addlw	48
   580   000350  6EDF               	movwf	indf2,c
   581                           
   582                           ;main.c: 92:             }
   583   000352  4A3A               	infsnz	main@i_896^0,f,c
   584   000354  2A3B               	incf	(main@i_896+1)^0,f,c
   585   000356  BE3B               	btfsc	(main@i_896+1)^0,7,c
   586   000358  D7F5               	goto	l1535
   587   00035A  503B               	movf	(main@i_896+1)^0,w,c
   588   00035C  E104               	bnz	u840
   589   00035E  0E06               	movlw	6
   590   000360  5C3A               	subwf	main@i_896^0,w,c
   591   000362  A0D8               	btfss	status,0,c
   592   000364  D7EF               	goto	l1535
   593   000366                     u840:
   594                           
   595                           ;main.c: 93:             lcd_message(keys + message_length-1);
   596   000366  503D               	movf	_message_length^0,w,c
   597   000368  0F3D               	addlw	low (_keys+-1)
   598   00036A  6E33               	movwf	??_main^0,c
   599   00036C  C033  F02C         	movff	??_main,lcd_message@message
   600   000370  6A2D               	clrf	(lcd_message@message+1)^0,c
   601   000372  ECC6  F003         	call	_lcd_message	;wreg free
   602                           
   603                           ;main.c: 95:             message_length = 10;
   604   000376  0E0A               	movlw	10
   605   000378  6E3D               	movwf	_message_length^0,c
   606                           
   607                           ;main.c: 96:             key_pressed = 0;
   608   00037A  0E00               	movlw	0
   609   00037C  6E3C               	movwf	_key_pressed^0,c
   610   00037E                     l1547:
   611                           
   612                           ;main.c: 99:         if(key_pressed && keys[message_length-1] == '#')
   613   00037E  503C               	movf	_key_pressed^0,w,c
   614   000380  B4D8               	btfsc	status,2,c
   615   000382  D03B               	goto	l125
   616   000384  503D               	movf	_message_length^0,w,c
   617   000386  0F3D               	addlw	low (_keys+255)
   618   000388  6ED9               	movwf	fsr2l,c
   619   00038A  6ADA               	clrf	fsr2h,c
   620   00038C  0E23               	movlw	35
   621   00038E  18DE               	xorwf	postinc2,w,c
   622   000390  A4D8               	btfss	status,2,c
   623   000392  D033               	goto	l125
   624                           
   625                           ;main.c: 100:         {;main.c: 101:             lcd_move_cursor(1,0);
   626   000394  0E00               	movlw	0
   627   000396  6E31               	movwf	lcd_move_cursor@position^0,c
   628   000398  0E01               	movlw	1
   629   00039A  EC9B  F004         	call	_lcd_move_cursor
   630                           
   631                           ;main.c: 102:             lcd_message("Sending");
   632   00039E  0E1A               	movlw	low STR_1
   633   0003A0  6E2C               	movwf	lcd_message@message^0,c
   634   0003A2  502C               	movf	lcd_message@message^0,w,c
   635   0003A4  A4D8               	btfss	status,2,c
   636   0003A6  0E02               	movlw	high __smallconst
   637   0003A8  6E2D               	movwf	(lcd_message@message+1)^0,c
   638   0003AA  ECC6  F003         	call	_lcd_message	;wreg free
   639                           
   640                           ;main.c: 103:             keys[message_length - 1] = '\0';
   641   0003AE  503D               	movf	_message_length^0,w,c
   642   0003B0  0F3D               	addlw	low (_keys+255)
   643   0003B2  6ED9               	movwf	fsr2l,c
   644   0003B4  6ADA               	clrf	fsr2h,c
   645   0003B6  6ADF               	clrf	indf2,c
   646                           
   647                           ;main.c: 104:             send_message();
   648   0003B8  EC22  F003         	call	_send_message	;wreg free
   649                           
   650                           ;main.c: 105:             lcd_clear();
   651   0003BC  EC96  F003         	call	_lcd_clear	;wreg free
   652                           
   653                           ;main.c: 106:             for(int i = 0; i < message_length; i++)
   654   0003C0  0E00               	movlw	0
   655   0003C2  6E39               	movwf	(main@i_898+1)^0,c
   656   0003C4  0E00               	movlw	0
   657   0003C6  6E38               	movwf	main@i_898^0,c
   658   0003C8  D007               	goto	l1567
   659   0003CA                     l1563:
   660                           
   661                           ;main.c: 107:             {;main.c: 108:                 keys[i] = '\0';
   662   0003CA  5038               	movf	main@i_898^0,w,c
   663   0003CC  0F3E               	addlw	low _keys
   664   0003CE  6ED9               	movwf	fsr2l,c
   665   0003D0  6ADA               	clrf	fsr2h,c
   666   0003D2  6ADF               	clrf	indf2,c
   667                           
   668                           ;main.c: 109:             }
   669   0003D4  4A38               	infsnz	main@i_898^0,f,c
   670   0003D6  2A39               	incf	(main@i_898+1)^0,f,c
   671   0003D8                     l1567:
   672   0003D8  503D               	movf	_message_length^0,w,c
   673   0003DA  6E33               	movwf	??_main^0,c
   674   0003DC  6A34               	clrf	(??_main+1)^0,c
   675   0003DE  5033               	movf	??_main^0,w,c
   676   0003E0  5C38               	subwf	main@i_898^0,w,c
   677   0003E2  5039               	movf	(main@i_898+1)^0,w,c
   678   0003E4  0A80               	xorlw	128
   679   0003E6  6E35               	movwf	(??_main+2)^0,c
   680   0003E8  5034               	movf	(??_main+1)^0,w,c
   681   0003EA  0A80               	xorlw	128
   682   0003EC  5835               	subwfb	(??_main+2)^0,w,c
   683   0003EE  A0D8               	btfss	status,0,c
   684   0003F0  D7EC               	goto	l1563
   685                           
   686                           ;main.c: 110:             key_pressed = 0;
   687   0003F2  0E00               	movlw	0
   688   0003F4  6E3C               	movwf	_key_pressed^0,c
   689                           
   690                           ;main.c: 111:             message_length = 0;
   691   0003F6  0E00               	movlw	0
   692   0003F8  6E3D               	movwf	_message_length^0,c
   693   0003FA                     l125:
   694   0003FA  0003               	sleep		;# 
   695   0003FC  D71D               	goto	l1479
   696   0003FE                     __end_of_main:
   697                           	callstack 0
   698                           
   699 ;; *************** function _system_init *****************
   700 ;; Defined at:
   701 ;;		line 407 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1
   715 ;;      Params:         0       0       0
   716 ;;      Locals:         0       0       0
   717 ;;      Temps:          0       0       0
   718 ;;      Totals:         0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; Hardware stack levels required when called: 2
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text1
   730   00088E                     __ptext1:
   731                           	callstack 0
   732   00088E                     _system_init:
   733                           	callstack 28
   734                           
   735                           ;main.c: 410:     OSCCONbits.SCS = 0;
   736                           
   737                           ;incstack = 0
   738   00088E  0EFC               	movlw	-4
   739   000890  16D3               	andwf	211,f,c	;volatile
   740                           
   741                           ;main.c: 411:     OSCCONbits.IDLEN = 1;
   742   000892  8ED3               	bsf	211,7,c	;volatile
   743                           
   744                           ;main.c: 412:     OSCCONbits.IRCF = 7;
   745   000894  0E70               	movlw	112
   746   000896  12D3               	iorwf	211,f,c	;volatile
   747                           
   748                           ;main.c: 413:     OSCTUNEbits.PLLEN = 1;
   749   000898  8C9B               	bsf	155,6,c	;volatile
   750                           
   751                           ;main.c: 416:     INTCONbits.GIE = 1;
   752   00089A  8EF2               	bsf	242,7,c	;volatile
   753                           
   754                           ;main.c: 417:     INTCONbits.PEIE = 1;
   755   00089C  8CF2               	bsf	242,6,c	;volatile
   756                           
   757                           ;main.c: 419:     INTCON2bits.RBPU = 0;
   758   00089E  9EF1               	bcf	241,7,c	;volatile
   759                           
   760                           ;main.c: 423:     RCONbits.IPEN = 0;
   761   0008A0  9ED0               	bcf	208,7,c	;volatile
   762                           
   763                           ;main.c: 426:     LATCbits.LC7 = 1;
   764   0008A2  8E8B               	bsf	139,7,c	;volatile
   765                           
   766                           ;main.c: 427:     TRISCbits.RC7 = 0;
   767   0008A4  9E94               	bcf	148,7,c	;volatile
   768                           
   769                           ;main.c: 428:     TRISB = TRISB & 0xF0;
   770   0008A6  5093               	movf	147,w,c	;volatile
   771   0008A8  0BF0               	andlw	240
   772   0008AA  6E93               	movwf	147,c	;volatile
   773                           
   774                           ;main.c: 431:     SSPSTATbits.SMP = 1;
   775   0008AC  8EC7               	bsf	199,7,c	;volatile
   776                           
   777                           ;main.c: 432:     SSPSTATbits.CKE = 0;
   778   0008AE  9CC7               	bcf	199,6,c	;volatile
   779                           
   780                           ;main.c: 433:     SSPADD = 0x50;
   781   0008B0  0E50               	movlw	80
   782   0008B2  6EC8               	movwf	200,c	;volatile
   783                           
   784                           ;main.c: 434:     SSPCON1bits.SSPEN = 1;
   785   0008B4  8AC6               	bsf	198,5,c	;volatile
   786                           
   787                           ;main.c: 435:     SSPCON1bits.SSPM = 0b1000;
   788   0008B6  50C6               	movf	198,w,c	;volatile
   789   0008B8  0BF0               	andlw	-16
   790   0008BA  0908               	iorlw	8
   791   0008BC  6EC6               	movwf	198,c	;volatile
   792                           
   793                           ;main.c: 436:     TRISCbits.RC3 = 1;
   794   0008BE  8694               	bsf	148,3,c	;volatile
   795                           
   796                           ;main.c: 437:     TRISCbits.RC4 = 1;
   797   0008C0  8894               	bsf	148,4,c	;volatile
   798                           
   799                           ;main.c: 440:     keys[10] = '\0';
   800   0008C2  0E00               	movlw	0
   801   0008C4  6E48               	movwf	(_keys+10)^0,c
   802   0008C6  0012               	return		;funcret
   803   0008C8                     __end_of_system_init:
   804                           	callstack 0
   805                           
   806 ;; *************** function _send_message *****************
   807 ;; Defined at:
   808 ;;		line 175 in file "main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  j               2   45[COMRAM] int 
   813 ;;  i               2   47[COMRAM] int 
   814 ;;  send_cnt        2    0        int 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1
   824 ;;      Params:         0       0       0
   825 ;;      Locals:         4       0       0
   826 ;;      Temps:          1       0       0
   827 ;;      Totals:         5       0       0
   828 ;;Total ram usage:        5 bytes
   829 ;; Hardware stack levels used: 1
   830 ;; Hardware stack levels required when called: 6
   831 ;; This function calls:
   832 ;;		_packet_interim_amble
   833 ;;		_packet_pre_post_amble
   834 ;;		_send
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text2
   841   000644                     __ptext2:
   842                           	callstack 0
   843   000644                     _send_message:
   844                           	callstack 24
   845                           
   846                           ;main.c: 177:     int i = 0;
   847                           
   848                           ;incstack = 0
   849   000644  0E00               	movlw	0
   850   000646  6E31               	movwf	(send_message@i+1)^0,c
   851   000648  0E00               	movlw	0
   852   00064A  6E30               	movwf	send_message@i^0,c
   853                           
   854                           ;main.c: 179:     packet_pre_post_amble();
   855   00064C  ECCD  F004         	call	_packet_pre_post_amble	;wreg free
   856                           
   857                           ;main.c: 181:     for(int j = 0; j < 7; j++)
   858   000650  0E00               	movlw	0
   859   000652  6E2F               	movwf	(send_message@j+1)^0,c
   860   000654  0E00               	movlw	0
   861   000656  6E2E               	movwf	send_message@j^0,c
   862   000658  D015               	goto	l1461
   863   00065A                     l1457:
   864                           
   865                           ;main.c: 184:         {;main.c: 185:             send(keys[i] & 0x0F);
   866   00065A  5030               	movf	send_message@i^0,w,c
   867   00065C  0F3E               	addlw	low _keys
   868   00065E  6ED9               	movwf	fsr2l,c
   869   000660  6ADA               	clrf	fsr2h,c
   870   000662  50DF               	movf	indf2,w,c
   871   000664  0B0F               	andlw	15
   872   000666  EC64  F004         	call	_send
   873                           
   874                           ;main.c: 186:             send((keys[i] & 0xF0)>> 4);
   875   00066A  5030               	movf	send_message@i^0,w,c
   876   00066C  0F3E               	addlw	low _keys
   877   00066E  6ED9               	movwf	fsr2l,c
   878   000670  6ADA               	clrf	fsr2h,c
   879   000672  50DF               	movf	indf2,w,c
   880   000674  6E2D               	movwf	??_send_message^0,c
   881   000676  382D               	swapf	??_send_message^0,w,c
   882   000678  0B0F               	andlw	15
   883   00067A  0B0F               	andlw	15
   884   00067C  EC64  F004         	call	_send
   885                           
   886                           ;main.c: 187:             i++;
   887   000680  4A30               	infsnz	send_message@i^0,f,c
   888   000682  2A31               	incf	(send_message@i+1)^0,f,c
   889   000684                     l1461:
   890                           
   891                           ;main.c: 183:         while(keys[i] != '\0')
   892   000684  5030               	movf	send_message@i^0,w,c
   893   000686  0F3E               	addlw	low _keys
   894   000688  6ED9               	movwf	fsr2l,c
   895   00068A  6ADA               	clrf	fsr2h,c
   896   00068C  50DF               	movf	indf2,w,c
   897   00068E  A4D8               	btfss	status,2,c
   898   000690  D7E4               	goto	l1457
   899                           
   900                           ;main.c: 189:         packet_interim_amble();
   901   000692  ECE2  F004         	call	_packet_interim_amble	;wreg free
   902                           
   903                           ;main.c: 190:         i = 0;
   904   000696  0E00               	movlw	0
   905   000698  6E31               	movwf	(send_message@i+1)^0,c
   906   00069A  0E00               	movlw	0
   907   00069C  6E30               	movwf	send_message@i^0,c
   908                           
   909                           ;main.c: 191:     }
   910   00069E  4A2E               	infsnz	send_message@j^0,f,c
   911   0006A0  2A2F               	incf	(send_message@j+1)^0,f,c
   912   0006A2  BE2F               	btfsc	(send_message@j+1)^0,7,c
   913   0006A4  D7EF               	goto	l1461
   914   0006A6  502F               	movf	(send_message@j+1)^0,w,c
   915   0006A8  E104               	bnz	u700
   916   0006AA  0E07               	movlw	7
   917   0006AC  5C2E               	subwf	send_message@j^0,w,c
   918   0006AE  A0D8               	btfss	status,0,c
   919   0006B0  D7E9               	goto	l1461
   920   0006B2                     u700:
   921                           
   922                           ;main.c: 192:     packet_pre_post_amble();
   923   0006B2  ECCD  F004         	call	_packet_pre_post_amble	;wreg free
   924   0006B6  0012               	return		;funcret
   925   0006B8                     __end_of_send_message:
   926                           	callstack 0
   927                           
   928 ;; *************** function _packet_pre_post_amble *****************
   929 ;; Defined at:
   930 ;;		line 195 in file "main.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  i               2   42[COMRAM] int 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2, status,0, cstack
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1
   944 ;;      Params:         0       0       0
   945 ;;      Locals:         2       0       0
   946 ;;      Temps:          0       0       0
   947 ;;      Totals:         2       0       0
   948 ;;Total ram usage:        2 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; Hardware stack levels required when called: 5
   951 ;; This function calls:
   952 ;;		_send
   953 ;; This function is called by:
   954 ;;		_send_message
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text3
   959   00099A                     __ptext3:
   960                           	callstack 0
   961   00099A                     _packet_pre_post_amble:
   962                           	callstack 24
   963                           
   964                           ;main.c: 197:     for(int i = 0; i < 1; i++)
   965                           
   966                           ;incstack = 0
   967   00099A  0E00               	movlw	0
   968   00099C  6E2C               	movwf	(packet_pre_post_amble@i+1)^0,c
   969   00099E  0E00               	movlw	0
   970   0009A0  6E2B               	movwf	packet_pre_post_amble@i^0,c
   971   0009A2                     l1415:
   972                           
   973                           ;main.c: 198:     {;main.c: 199:         send(0xA);
   974   0009A2  0E0A               	movlw	10
   975   0009A4  EC64  F004         	call	_send
   976                           
   977                           ;main.c: 200:         send(0xA);
   978   0009A8  0E0A               	movlw	10
   979   0009AA  EC64  F004         	call	_send
   980                           
   981                           ;main.c: 201:     }
   982   0009AE  4A2B               	infsnz	packet_pre_post_amble@i^0,f,c
   983   0009B0  2A2C               	incf	(packet_pre_post_amble@i+1)^0,f,c
   984   0009B2  BE2C               	btfsc	(packet_pre_post_amble@i+1)^0,7,c
   985   0009B4  D7F6               	goto	l1415
   986   0009B6  502C               	movf	(packet_pre_post_amble@i+1)^0,w,c
   987   0009B8  E104               	bnz	u670
   988   0009BA  042B               	decf	packet_pre_post_amble@i^0,w,c
   989   0009BC  B0D8               	btfsc	status,0,c
   990   0009BE  0012               	return	
   991   0009C0  D7F0               	goto	l1415
   992   0009C2                     u670:
   993   0009C2  0012               	return		;funcret
   994   0009C4                     __end_of_packet_pre_post_amble:
   995                           	callstack 0
   996                           
   997 ;; *************** function _packet_interim_amble *****************
   998 ;; Defined at:
   999 ;;		line 203 in file "main.c"
  1000 ;; Parameters:    Size  Location     Type
  1001 ;;		None
  1002 ;; Auto vars:     Size  Location     Type
  1003 ;;  i               2   42[COMRAM] int 
  1004 ;; Return value:  Size  Location     Type
  1005 ;;                  1    wreg      void 
  1006 ;; Registers used:
  1007 ;;		wreg, status,2, status,0, cstack
  1008 ;; Tracked objects:
  1009 ;;		On entry : 0/0
  1010 ;;		On exit  : 0/0
  1011 ;;		Unchanged: 0/0
  1012 ;; Data sizes:     COMRAM   BANK0   BANK1
  1013 ;;      Params:         0       0       0
  1014 ;;      Locals:         2       0       0
  1015 ;;      Temps:          0       0       0
  1016 ;;      Totals:         2       0       0
  1017 ;;Total ram usage:        2 bytes
  1018 ;; Hardware stack levels used: 1
  1019 ;; Hardware stack levels required when called: 5
  1020 ;; This function calls:
  1021 ;;		_send
  1022 ;; This function is called by:
  1023 ;;		_send_message
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text4
  1028   0009C4                     __ptext4:
  1029                           	callstack 0
  1030   0009C4                     _packet_interim_amble:
  1031                           	callstack 24
  1032                           
  1033                           ;main.c: 205:     for(int i = 0; i < 1; i++)
  1034                           
  1035                           ;incstack = 0
  1036   0009C4  0E00               	movlw	0
  1037   0009C6  6E2C               	movwf	(packet_interim_amble@i+1)^0,c
  1038   0009C8  0E00               	movlw	0
  1039   0009CA  6E2B               	movwf	packet_interim_amble@i^0,c
  1040   0009CC                     l1427:
  1041                           
  1042                           ;main.c: 206:     {;main.c: 207:         send(0xB);
  1043   0009CC  0E0B               	movlw	11
  1044   0009CE  EC64  F004         	call	_send
  1045                           
  1046                           ;main.c: 208:         send(0xB);
  1047   0009D2  0E0B               	movlw	11
  1048   0009D4  EC64  F004         	call	_send
  1049                           
  1050                           ;main.c: 209:     }
  1051   0009D8  4A2B               	infsnz	packet_interim_amble@i^0,f,c
  1052   0009DA  2A2C               	incf	(packet_interim_amble@i+1)^0,f,c
  1053   0009DC  BE2C               	btfsc	(packet_interim_amble@i+1)^0,7,c
  1054   0009DE  D7F6               	goto	l1427
  1055   0009E0  502C               	movf	(packet_interim_amble@i+1)^0,w,c
  1056   0009E2  E104               	bnz	u680
  1057   0009E4  042B               	decf	packet_interim_amble@i^0,w,c
  1058   0009E6  B0D8               	btfsc	status,0,c
  1059   0009E8  0012               	return	
  1060   0009EA  D7F0               	goto	l1427
  1061   0009EC                     u680:
  1062   0009EC  0012               	return		;funcret
  1063   0009EE                     __end_of_packet_interim_amble:
  1064                           	callstack 0
  1065                           
  1066 ;; *************** function _send *****************
  1067 ;; Defined at:
  1068 ;;		line 212 in file "main.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;  data            1    wreg     unsigned char 
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  data            1   41[COMRAM] unsigned char 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;                  1    wreg      void 
  1075 ;; Registers used:
  1076 ;;		wreg, status,2, status,0, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1
  1082 ;;      Params:         0       0       0
  1083 ;;      Locals:         1       0       0
  1084 ;;      Temps:          0       0       0
  1085 ;;      Totals:         1       0       0
  1086 ;;Total ram usage:        1 bytes
  1087 ;; Hardware stack levels used: 1
  1088 ;; Hardware stack levels required when called: 4
  1089 ;; This function calls:
  1090 ;;		_delay
  1091 ;; This function is called by:
  1092 ;;		_send_message
  1093 ;;		_packet_pre_post_amble
  1094 ;;		_packet_interim_amble
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text5
  1099   0008C8                     __ptext5:
  1100                           	callstack 0
  1101   0008C8                     _send:
  1102                           	callstack 25
  1103                           
  1104                           ;incstack = 0
  1105                           ;send@data stored from wreg
  1106   0008C8  6E2A               	movwf	send@data^0,c
  1107                           
  1108                           ;main.c: 212: void send(char data);main.c: 213: {;main.c: 214:     LATB = (LATB & 0xF0) 
      +                          | data;
  1109   0008CA  508A               	movf	138,w,c	;volatile
  1110   0008CC  0BF0               	andlw	240
  1111   0008CE  102A               	iorwf	send@data^0,w,c
  1112   0008D0  6E8A               	movwf	138,c	;volatile
  1113                           
  1114                           ;main.c: 215:     LATCbits.LC7 = 0;
  1115   0008D2  9E8B               	bcf	139,7,c	;volatile
  1116                           
  1117                           ;main.c: 216:     delay(75);
  1118   0008D4  0E4B               	movlw	75
  1119   0008D6  6E1E               	movwf	delay@milliseconds^0,c
  1120   0008D8  0E00               	movlw	0
  1121   0008DA  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1122   0008DC  0E00               	movlw	0
  1123   0008DE  6E20               	movwf	(delay@milliseconds+2)^0,c
  1124   0008E0  0E00               	movlw	0
  1125   0008E2  6E21               	movwf	(delay@milliseconds+3)^0,c
  1126   0008E4  EC6D  F002         	call	_delay	;wreg free
  1127                           
  1128                           ;main.c: 217:     LATCbits.LC7 = 1;
  1129   0008E8  8E8B               	bsf	139,7,c	;volatile
  1130                           
  1131                           ;main.c: 218:     delay(10);
  1132   0008EA  0E0A               	movlw	10
  1133   0008EC  6E1E               	movwf	delay@milliseconds^0,c
  1134   0008EE  0E00               	movlw	0
  1135   0008F0  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1136   0008F2  0E00               	movlw	0
  1137   0008F4  6E20               	movwf	(delay@milliseconds+2)^0,c
  1138   0008F6  0E00               	movlw	0
  1139   0008F8  6E21               	movwf	(delay@milliseconds+3)^0,c
  1140   0008FA  EC6D  F002         	call	_delay	;wreg free
  1141   0008FE  0012               	return		;funcret
  1142   000900                     __end_of_send:
  1143                           	callstack 0
  1144                           
  1145 ;; *************** function _lcd_init *****************
  1146 ;; Defined at:
  1147 ;;		line 221 in file "main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1
  1161 ;;      Params:         0       0       0
  1162 ;;      Locals:         0       0       0
  1163 ;;      Temps:          0       0       0
  1164 ;;      Totals:         0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used: 1
  1167 ;; Hardware stack levels required when called: 6
  1168 ;; This function calls:
  1169 ;;		_lcd_clear
  1170 ;;		_lcd_command
  1171 ;;		_lcd_message
  1172 ;;		_lcd_move_cursor
  1173 ;; This function is called by:
  1174 ;;		_main
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178                           	psect	text6
  1179   0006B8                     __ptext6:
  1180                           	callstack 0
  1181   0006B8                     _lcd_init:
  1182                           	callstack 24
  1183                           
  1184                           ;main.c: 228:     lcd_command(0x02, 1, 0, 0);
  1185                           
  1186                           ;incstack = 0
  1187   0006B8  0E01               	movlw	1
  1188   0006BA  6E2A               	movwf	lcd_command@lt^0,c
  1189   0006BC  0E00               	movlw	0
  1190   0006BE  6E2B               	movwf	lcd_command@rw^0,c
  1191   0006C0  0E00               	movlw	0
  1192   0006C2  6E2C               	movwf	lcd_command@rs^0,c
  1193   0006C4  0E02               	movlw	2
  1194   0006C6  ECD3  F002         	call	_lcd_command
  1195                           
  1196                           ;main.c: 229:     lcd_command(0x28, 1, 0, 0);
  1197   0006CA  0E01               	movlw	1
  1198   0006CC  6E2A               	movwf	lcd_command@lt^0,c
  1199   0006CE  0E00               	movlw	0
  1200   0006D0  6E2B               	movwf	lcd_command@rw^0,c
  1201   0006D2  0E00               	movlw	0
  1202   0006D4  6E2C               	movwf	lcd_command@rs^0,c
  1203   0006D6  0E28               	movlw	40
  1204   0006D8  ECD3  F002         	call	_lcd_command
  1205                           
  1206                           ;main.c: 231:     lcd_clear();
  1207   0006DC  EC96  F003         	call	_lcd_clear	;wreg free
  1208                           
  1209                           ;main.c: 234:     lcd_command(0x0F, 1, 0, 0);
  1210   0006E0  0E01               	movlw	1
  1211   0006E2  6E2A               	movwf	lcd_command@lt^0,c
  1212   0006E4  0E00               	movlw	0
  1213   0006E6  6E2B               	movwf	lcd_command@rw^0,c
  1214   0006E8  0E00               	movlw	0
  1215   0006EA  6E2C               	movwf	lcd_command@rs^0,c
  1216   0006EC  0E0F               	movlw	15
  1217   0006EE  ECD3  F002         	call	_lcd_command
  1218                           
  1219                           ;main.c: 239:     lcd_move_cursor(0, 5);
  1220   0006F2  0E05               	movlw	5
  1221   0006F4  6E31               	movwf	lcd_move_cursor@position^0,c
  1222   0006F6  0E00               	movlw	0
  1223   0006F8  EC9B  F004         	call	_lcd_move_cursor
  1224                           
  1225                           ;main.c: 240:     lcd_message("Senior");
  1226   0006FC  0E22               	movlw	low STR_2
  1227   0006FE  6E2C               	movwf	lcd_message@message^0,c
  1228   000700  502C               	movf	lcd_message@message^0,w,c
  1229   000702  A4D8               	btfss	status,2,c
  1230   000704  0E02               	movlw	high __smallconst
  1231   000706  6E2D               	movwf	(lcd_message@message+1)^0,c
  1232   000708  ECC6  F003         	call	_lcd_message	;wreg free
  1233                           
  1234                           ;main.c: 241:     lcd_move_cursor(1, 4);
  1235   00070C  0E04               	movlw	4
  1236   00070E  6E31               	movwf	lcd_move_cursor@position^0,c
  1237   000710  0E01               	movlw	1
  1238   000712  EC9B  F004         	call	_lcd_move_cursor
  1239                           
  1240                           ;main.c: 242:     lcd_message("Capstone");
  1241   000716  0E11               	movlw	low STR_3
  1242   000718  6E2C               	movwf	lcd_message@message^0,c
  1243   00071A  502C               	movf	lcd_message@message^0,w,c
  1244   00071C  A4D8               	btfss	status,2,c
  1245   00071E  0E02               	movlw	high __smallconst
  1246   000720  6E2D               	movwf	(lcd_message@message+1)^0,c
  1247   000722  ECC6  F003         	call	_lcd_message	;wreg free
  1248                           
  1249                           ;main.c: 244:     lcd_clear();
  1250   000726  EC96  F003         	call	_lcd_clear	;wreg free
  1251   00072A  0012               	return		;funcret
  1252   00072C                     __end_of_lcd_init:
  1253                           	callstack 0
  1254                           
  1255 ;; *************** function _lcd_move_cursor *****************
  1256 ;; Defined at:
  1257 ;;		line 262 in file "main.c"
  1258 ;; Parameters:    Size  Location     Type
  1259 ;;  line            1    wreg     unsigned char 
  1260 ;;  position        1   48[COMRAM] unsigned char 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  line            1   49[COMRAM] unsigned char 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0, cstack
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1
  1272 ;;      Params:         1       0       0
  1273 ;;      Locals:         1       0       0
  1274 ;;      Temps:          0       0       0
  1275 ;;      Totals:         2       0       0
  1276 ;;Total ram usage:        2 bytes
  1277 ;; Hardware stack levels used: 1
  1278 ;; Hardware stack levels required when called: 5
  1279 ;; This function calls:
  1280 ;;		_lcd_command
  1281 ;; This function is called by:
  1282 ;;		_main
  1283 ;;		_lcd_init
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text7
  1288   000936                     __ptext7:
  1289                           	callstack 0
  1290   000936                     _lcd_move_cursor:
  1291                           	callstack 25
  1292                           
  1293                           ;incstack = 0
  1294                           ;lcd_move_cursor@line stored from wreg
  1295   000936  6E32               	movwf	lcd_move_cursor@line^0,c
  1296                           
  1297                           ;main.c: 262: void lcd_move_cursor(char line, char position);main.c: 263: {;main.c: 264:
      +                               if(!line)
  1298   000938  5032               	movf	lcd_move_cursor@line^0,w,c
  1299   00093A  A4D8               	btfss	status,2,c
  1300   00093C  D00B               	goto	l1407
  1301                           
  1302                           ;main.c: 265:     {;main.c: 266:         lcd_command(0x80 | position, 1, 0, 0);
  1303   00093E  0E01               	movlw	1
  1304   000940  6E2A               	movwf	lcd_command@lt^0,c
  1305   000942  0E00               	movlw	0
  1306   000944  6E2B               	movwf	lcd_command@rw^0,c
  1307   000946  0E00               	movlw	0
  1308   000948  6E2C               	movwf	lcd_command@rs^0,c
  1309   00094A  5031               	movf	lcd_move_cursor@position^0,w,c
  1310   00094C  0980               	iorlw	128
  1311   00094E  ECD3  F002         	call	_lcd_command
  1312                           
  1313                           ;main.c: 267:     }
  1314   000952  0012               	return	
  1315   000954                     l1407:
  1316                           
  1317                           ;main.c: 269:     {;main.c: 270:         lcd_command(0xC0 | position, 1, 0, 0);
  1318   000954  0E01               	movlw	1
  1319   000956  6E2A               	movwf	lcd_command@lt^0,c
  1320   000958  0E00               	movlw	0
  1321   00095A  6E2B               	movwf	lcd_command@rw^0,c
  1322   00095C  0E00               	movlw	0
  1323   00095E  6E2C               	movwf	lcd_command@rs^0,c
  1324   000960  5031               	movf	lcd_move_cursor@position^0,w,c
  1325   000962  09C0               	iorlw	192
  1326   000964  ECD3  F002         	call	_lcd_command
  1327   000968  0012               	return		;funcret
  1328   00096A                     __end_of_lcd_move_cursor:
  1329                           	callstack 0
  1330                           
  1331 ;; *************** function _lcd_clear *****************
  1332 ;; Defined at:
  1333 ;;		line 315 in file "main.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;		None
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;		None
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, status,2, status,0, cstack
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMRAM   BANK0   BANK1
  1347 ;;      Params:         0       0       0
  1348 ;;      Locals:         0       0       0
  1349 ;;      Temps:          0       0       0
  1350 ;;      Totals:         0       0       0
  1351 ;;Total ram usage:        0 bytes
  1352 ;; Hardware stack levels used: 1
  1353 ;; Hardware stack levels required when called: 4
  1354 ;; This function calls:
  1355 ;;		_delay
  1356 ;;		_i2c_data_tx
  1357 ;;		_i2c_start_and_addr
  1358 ;;		_i2c_stop
  1359 ;; This function is called by:
  1360 ;;		_main
  1361 ;;		_lcd_init
  1362 ;; This function uses a non-reentrant model
  1363 ;;
  1364                           
  1365                           	psect	text8
  1366   00072C                     __ptext8:
  1367                           	callstack 0
  1368   00072C                     _lcd_clear:
  1369                           	callstack 25
  1370                           
  1371                           ;main.c: 317:     i2c_start_and_addr(0x4E);
  1372                           
  1373                           ;incstack = 0
  1374   00072C  0E4E               	movlw	78
  1375   00072E  EC04  F005         	call	_i2c_start_and_addr
  1376                           
  1377                           ;main.c: 320:     i2c_data_tx(0b00001100);
  1378   000732  0E0C               	movlw	12
  1379   000734  EC11  F005         	call	_i2c_data_tx
  1380                           
  1381                           ;main.c: 321:     delay(1);
  1382   000738  0E01               	movlw	1
  1383   00073A  6E1E               	movwf	delay@milliseconds^0,c
  1384   00073C  0E00               	movlw	0
  1385   00073E  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1386   000740  0E00               	movlw	0
  1387   000742  6E20               	movwf	(delay@milliseconds+2)^0,c
  1388   000744  0E00               	movlw	0
  1389   000746  6E21               	movwf	(delay@milliseconds+3)^0,c
  1390   000748  EC6D  F002         	call	_delay	;wreg free
  1391                           
  1392                           ;main.c: 322:     i2c_data_tx(0b00001000);
  1393   00074C  0E08               	movlw	8
  1394   00074E  EC11  F005         	call	_i2c_data_tx
  1395                           
  1396                           ;main.c: 325:     i2c_data_tx(0b00011100);
  1397   000752  0E1C               	movlw	28
  1398   000754  EC11  F005         	call	_i2c_data_tx
  1399                           
  1400                           ;main.c: 326:     delay(1);
  1401   000758  0E01               	movlw	1
  1402   00075A  6E1E               	movwf	delay@milliseconds^0,c
  1403   00075C  0E00               	movlw	0
  1404   00075E  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1405   000760  0E00               	movlw	0
  1406   000762  6E20               	movwf	(delay@milliseconds+2)^0,c
  1407   000764  0E00               	movlw	0
  1408   000766  6E21               	movwf	(delay@milliseconds+3)^0,c
  1409   000768  EC6D  F002         	call	_delay	;wreg free
  1410                           
  1411                           ;main.c: 327:     i2c_data_tx(0b00011000);
  1412   00076C  0E18               	movlw	24
  1413   00076E  EC11  F005         	call	_i2c_data_tx
  1414                           
  1415                           ;main.c: 328:     delay(1);
  1416   000772  0E01               	movlw	1
  1417   000774  6E1E               	movwf	delay@milliseconds^0,c
  1418   000776  0E00               	movlw	0
  1419   000778  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1420   00077A  0E00               	movlw	0
  1421   00077C  6E20               	movwf	(delay@milliseconds+2)^0,c
  1422   00077E  0E00               	movlw	0
  1423   000780  6E21               	movwf	(delay@milliseconds+3)^0,c
  1424   000782  EC6D  F002         	call	_delay	;wreg free
  1425                           
  1426                           ;main.c: 330:     i2c_stop();
  1427   000786  EC1A  F005         	call	_i2c_stop	;wreg free
  1428   00078A  0012               	return		;funcret
  1429   00078C                     __end_of_lcd_clear:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function _lcd_backspace *****************
  1433 ;; Defined at:
  1434 ;;		line 255 in file "main.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1
  1448 ;;      Params:         0       0       0
  1449 ;;      Locals:         0       0       0
  1450 ;;      Temps:          0       0       0
  1451 ;;      Totals:         0       0       0
  1452 ;;Total ram usage:        0 bytes
  1453 ;; Hardware stack levels used: 1
  1454 ;; Hardware stack levels required when called: 6
  1455 ;; This function calls:
  1456 ;;		_lcd_command
  1457 ;;		_lcd_message
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text9
  1464   000900                     __ptext9:
  1465                           	callstack 0
  1466   000900                     _lcd_backspace:
  1467                           	callstack 24
  1468                           
  1469                           ;main.c: 257:     lcd_command(0x10, 1, 0, 0);
  1470                           
  1471                           ;incstack = 0
  1472   000900  0E01               	movlw	1
  1473   000902  6E2A               	movwf	lcd_command@lt^0,c
  1474   000904  0E00               	movlw	0
  1475   000906  6E2B               	movwf	lcd_command@rw^0,c
  1476   000908  0E00               	movlw	0
  1477   00090A  6E2C               	movwf	lcd_command@rs^0,c
  1478   00090C  0E10               	movlw	16
  1479   00090E  ECD3  F002         	call	_lcd_command
  1480                           
  1481                           ;main.c: 258:     lcd_message(" ");
  1482   000912  0E29               	movlw	low STR_4
  1483   000914  6E2C               	movwf	lcd_message@message^0,c
  1484   000916  502C               	movf	lcd_message@message^0,w,c
  1485   000918  A4D8               	btfss	status,2,c
  1486   00091A  0E02               	movlw	high __smallconst
  1487   00091C  6E2D               	movwf	(lcd_message@message+1)^0,c
  1488   00091E  ECC6  F003         	call	_lcd_message	;wreg free
  1489                           
  1490                           ;main.c: 259:     lcd_command(0x10, 1, 0, 0);
  1491   000922  0E01               	movlw	1
  1492   000924  6E2A               	movwf	lcd_command@lt^0,c
  1493   000926  0E00               	movlw	0
  1494   000928  6E2B               	movwf	lcd_command@rw^0,c
  1495   00092A  0E00               	movlw	0
  1496   00092C  6E2C               	movwf	lcd_command@rs^0,c
  1497   00092E  0E10               	movlw	16
  1498   000930  ECD3  F002         	call	_lcd_command
  1499   000934  0012               	return		;funcret
  1500   000936                     __end_of_lcd_backspace:
  1501                           	callstack 0
  1502                           
  1503 ;; *************** function _lcd_message *****************
  1504 ;; Defined at:
  1505 ;;		line 292 in file "main.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  message         2   43[COMRAM] PTR unsigned char 
  1508 ;;		 -> STR_4(2), STR_3(9), STR_2(7), STR_1(8), 
  1509 ;;		 -> keys(11), 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  1    wreg      void 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1
  1521 ;;      Params:         2       0       0
  1522 ;;      Locals:         0       0       0
  1523 ;;      Temps:          0       0       0
  1524 ;;      Totals:         2       0       0
  1525 ;;Total ram usage:        2 bytes
  1526 ;; Hardware stack levels used: 1
  1527 ;; Hardware stack levels required when called: 5
  1528 ;; This function calls:
  1529 ;;		_i2c_start_and_addr
  1530 ;;		_i2c_stop
  1531 ;;		_lcd_char
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;;		_lcd_init
  1535 ;;		_lcd_backspace
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text10
  1540   00078C                     __ptext10:
  1541                           	callstack 0
  1542   00078C                     _lcd_message:
  1543                           	callstack 25
  1544                           
  1545                           ;main.c: 292: void lcd_message(char* message);main.c: 293: {;main.c: 294:     i2c_start_
      +                          and_addr(0x4E);
  1546                           
  1547                           ;incstack = 0
  1548   00078C  0E4E               	movlw	78
  1549   00078E  EC04  F005         	call	_i2c_start_and_addr
  1550                           
  1551                           ;main.c: 295:     while(*message != 0)
  1552   000792  D014               	goto	l1385
  1553   000794                     l1381:
  1554                           
  1555                           ;main.c: 296:     {;main.c: 297:         lcd_char(*message);
  1556   000794  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1557   000798  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1558   00079C  6AF8               	clrf	tblptru,c
  1559   00079E  0E01               	movlw	(high __ramtop+-1)
  1560   0007A0  64F7               	cpfsgt	tblptrh,c
  1561   0007A2  D003               	bra	u637
  1562   0007A4  0008               	tblrd		*
  1563   0007A6  50F5               	movf	tablat,w,c
  1564   0007A8  D005               	bra	u630
  1565   0007AA                     u637:
  1566   0007AA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1567   0007AE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1568   0007B2  50EF               	movf	indf0,w,c
  1569   0007B4                     u630:
  1570   0007B4  EC1F  F004         	call	_lcd_char
  1571                           
  1572                           ;main.c: 298:         message++;
  1573   0007B8  4A2C               	infsnz	lcd_message@message^0,f,c
  1574   0007BA  2A2D               	incf	(lcd_message@message+1)^0,f,c
  1575   0007BC                     l1385:
  1576                           
  1577                           ;main.c: 295:     while(*message != 0)
  1578   0007BC  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1579   0007C0  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1580   0007C4  6AF8               	clrf	tblptru,c
  1581   0007C6  0E01               	movlw	(high __ramtop+-1)
  1582   0007C8  64F7               	cpfsgt	tblptrh,c
  1583   0007CA  D003               	bra	u647
  1584   0007CC  0008               	tblrd		*
  1585   0007CE  50F5               	movf	tablat,w,c
  1586   0007D0  D005               	bra	u640
  1587   0007D2                     u647:
  1588   0007D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1589   0007D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1590   0007DA  50EF               	movf	indf0,w,c
  1591   0007DC                     u640:
  1592   0007DC  0900               	iorlw	0
  1593   0007DE  A4D8               	btfss	status,2,c
  1594   0007E0  D7D9               	goto	l1381
  1595                           
  1596                           ;main.c: 300:     i2c_stop();
  1597   0007E2  EC1A  F005         	call	_i2c_stop	;wreg free
  1598   0007E6  0012               	return		;funcret
  1599   0007E8                     __end_of_lcd_message:
  1600                           	callstack 0
  1601                           
  1602 ;; *************** function _lcd_char *****************
  1603 ;; Defined at:
  1604 ;;		line 303 in file "main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  letter          1    wreg     unsigned char 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  letter          1   42[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1
  1618 ;;      Params:         0       0       0
  1619 ;;      Locals:         1       0       0
  1620 ;;      Temps:          1       0       0
  1621 ;;      Totals:         2       0       0
  1622 ;;Total ram usage:        2 bytes
  1623 ;; Hardware stack levels used: 1
  1624 ;; Hardware stack levels required when called: 4
  1625 ;; This function calls:
  1626 ;;		_delay
  1627 ;;		_i2c_data_tx
  1628 ;; This function is called by:
  1629 ;;		_lcd_message
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           	psect	text11
  1634   00083E                     __ptext11:
  1635                           	callstack 0
  1636   00083E                     _lcd_char:
  1637                           	callstack 25
  1638                           
  1639                           ;incstack = 0
  1640                           ;lcd_char@letter stored from wreg
  1641   00083E  6E2B               	movwf	lcd_char@letter^0,c
  1642                           
  1643                           ;main.c: 303: void lcd_char(char letter);main.c: 304: {;main.c: 305:     i2c_data_tx((le
      +                          tter & 0xF0) | 0b1101);
  1644   000840  502B               	movf	lcd_char@letter^0,w,c
  1645   000842  0BF0               	andlw	240
  1646   000844  090D               	iorlw	13
  1647   000846  EC11  F005         	call	_i2c_data_tx
  1648                           
  1649                           ;main.c: 306:     i2c_data_tx((letter & 0xF0) | 8);
  1650   00084A  502B               	movf	lcd_char@letter^0,w,c
  1651   00084C  0BF0               	andlw	240
  1652   00084E  0908               	iorlw	8
  1653   000850  EC11  F005         	call	_i2c_data_tx
  1654                           
  1655                           ;main.c: 310:     i2c_data_tx(((letter & 0x0F) << 4) | 0b1101);
  1656   000854  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1657   000858  0E0F               	movlw	15
  1658   00085A  162A               	andwf	??_lcd_char^0,f,c
  1659   00085C  382A               	swapf	??_lcd_char^0,w,c
  1660   00085E  0BF0               	andlw	240
  1661   000860  090D               	iorlw	13
  1662   000862  EC11  F005         	call	_i2c_data_tx
  1663                           
  1664                           ;main.c: 311:     i2c_data_tx(((letter & 0x0F) << 4) | 8);
  1665   000866  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1666   00086A  0E0F               	movlw	15
  1667   00086C  162A               	andwf	??_lcd_char^0,f,c
  1668   00086E  382A               	swapf	??_lcd_char^0,w,c
  1669   000870  0BF0               	andlw	240
  1670   000872  0908               	iorlw	8
  1671   000874  EC11  F005         	call	_i2c_data_tx
  1672                           
  1673                           ;main.c: 312:     delay(1);
  1674   000878  0E01               	movlw	1
  1675   00087A  6E1E               	movwf	delay@milliseconds^0,c
  1676   00087C  0E00               	movlw	0
  1677   00087E  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1678   000880  0E00               	movlw	0
  1679   000882  6E20               	movwf	(delay@milliseconds+2)^0,c
  1680   000884  0E00               	movlw	0
  1681   000886  6E21               	movwf	(delay@milliseconds+3)^0,c
  1682   000888  EC6D  F002         	call	_delay	;wreg free
  1683   00088C  0012               	return		;funcret
  1684   00088E                     __end_of_lcd_char:
  1685                           	callstack 0
  1686                           
  1687 ;; *************** function _lcd_command *****************
  1688 ;; Defined at:
  1689 ;;		line 276 in file "main.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  data            1    wreg     unsigned char 
  1692 ;;  lt              1   41[COMRAM] unsigned char 
  1693 ;;  rw              1   42[COMRAM] unsigned char 
  1694 ;;  rs              1   43[COMRAM] unsigned char 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  data            1   47[COMRAM] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1
  1706 ;;      Params:         3       0       0
  1707 ;;      Locals:         1       0       0
  1708 ;;      Temps:          3       0       0
  1709 ;;      Totals:         7       0       0
  1710 ;;Total ram usage:        7 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 4
  1713 ;; This function calls:
  1714 ;;		_delay
  1715 ;;		_i2c_data_tx
  1716 ;;		_i2c_start_and_addr
  1717 ;;		_i2c_stop
  1718 ;; This function is called by:
  1719 ;;		_lcd_init
  1720 ;;		_lcd_backspace
  1721 ;;		_lcd_move_cursor
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text12
  1726   0005A6                     __ptext12:
  1727                           	callstack 0
  1728   0005A6                     _lcd_command:
  1729                           	callstack 25
  1730                           
  1731                           ;incstack = 0
  1732                           ;lcd_command@data stored from wreg
  1733   0005A6  6E30               	movwf	lcd_command@data^0,c
  1734                           
  1735                           ;main.c: 276: void lcd_command(char data, char lt, char rw, char rs);main.c: 277: {;main
      +                          .c: 278:     i2c_start_and_addr(0x4E);
  1736   0005A8  0E4E               	movlw	78
  1737   0005AA  EC04  F005         	call	_i2c_start_and_addr
  1738                           
  1739                           ;main.c: 280:     i2c_data_tx((data & 0xF0) | (lt << 3) | 4 | (rw <<1) | rs);
  1740   0005AE  90D8               	bcf	status,0,c
  1741   0005B0  342B               	rlcf	lcd_command@rw^0,w,c
  1742   0005B2  6E2D               	movwf	??_lcd_command^0,c
  1743   0005B4  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1744   0005B8  90D8               	bcf	status,0,c
  1745   0005BA  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1746   0005BC  90D8               	bcf	status,0,c
  1747   0005BE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1748   0005C0  90D8               	bcf	status,0,c
  1749   0005C2  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1750   0005C4  5030               	movf	lcd_command@data^0,w,c
  1751   0005C6  0BF0               	andlw	240
  1752   0005C8  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1753   0005CA  102D               	iorwf	??_lcd_command^0,w,c
  1754   0005CC  102C               	iorwf	lcd_command@rs^0,w,c
  1755   0005CE  0904               	iorlw	4
  1756   0005D0  EC11  F005         	call	_i2c_data_tx
  1757                           
  1758                           ;main.c: 281:     delay(1);
  1759   0005D4  0E01               	movlw	1
  1760   0005D6  6E1E               	movwf	delay@milliseconds^0,c
  1761   0005D8  0E00               	movlw	0
  1762   0005DA  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1763   0005DC  0E00               	movlw	0
  1764   0005DE  6E20               	movwf	(delay@milliseconds+2)^0,c
  1765   0005E0  0E00               	movlw	0
  1766   0005E2  6E21               	movwf	(delay@milliseconds+3)^0,c
  1767   0005E4  EC6D  F002         	call	_delay	;wreg free
  1768                           
  1769                           ;main.c: 282:     i2c_data_tx(lt<<3);
  1770   0005E8  382A               	swapf	lcd_command@lt^0,w,c
  1771   0005EA  42E8               	rrncf	wreg,f,c
  1772   0005EC  0BF8               	andlw	248
  1773   0005EE  EC11  F005         	call	_i2c_data_tx
  1774                           
  1775                           ;main.c: 285:     i2c_data_tx(((data & 0x0F) <<4) | (lt << 3) | 4 | (rw <<1) | rs);
  1776   0005F2  90D8               	bcf	status,0,c
  1777   0005F4  342B               	rlcf	lcd_command@rw^0,w,c
  1778   0005F6  6E2D               	movwf	??_lcd_command^0,c
  1779   0005F8  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1780   0005FC  90D8               	bcf	status,0,c
  1781   0005FE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1782   000600  90D8               	bcf	status,0,c
  1783   000602  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1784   000604  90D8               	bcf	status,0,c
  1785   000606  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1786   000608  C030  F02F         	movff	lcd_command@data,??_lcd_command+2
  1787   00060C  0E0F               	movlw	15
  1788   00060E  162F               	andwf	(??_lcd_command+2)^0,f,c
  1789   000610  382F               	swapf	(??_lcd_command+2)^0,w,c
  1790   000612  0BF0               	andlw	240
  1791   000614  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1792   000616  102D               	iorwf	??_lcd_command^0,w,c
  1793   000618  102C               	iorwf	lcd_command@rs^0,w,c
  1794   00061A  0904               	iorlw	4
  1795   00061C  EC11  F005         	call	_i2c_data_tx
  1796                           
  1797                           ;main.c: 286:     delay(1);
  1798   000620  0E01               	movlw	1
  1799   000622  6E1E               	movwf	delay@milliseconds^0,c
  1800   000624  0E00               	movlw	0
  1801   000626  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1802   000628  0E00               	movlw	0
  1803   00062A  6E20               	movwf	(delay@milliseconds+2)^0,c
  1804   00062C  0E00               	movlw	0
  1805   00062E  6E21               	movwf	(delay@milliseconds+3)^0,c
  1806   000630  EC6D  F002         	call	_delay	;wreg free
  1807                           
  1808                           ;main.c: 287:     i2c_data_tx(lt<<3);
  1809   000634  382A               	swapf	lcd_command@lt^0,w,c
  1810   000636  42E8               	rrncf	wreg,f,c
  1811   000638  0BF8               	andlw	248
  1812   00063A  EC11  F005         	call	_i2c_data_tx
  1813                           
  1814                           ;main.c: 289:     i2c_stop();
  1815   00063E  EC1A  F005         	call	_i2c_stop	;wreg free
  1816   000642  0012               	return		;funcret
  1817   000644                     __end_of_lcd_command:
  1818                           	callstack 0
  1819                           
  1820 ;; *************** function _i2c_stop *****************
  1821 ;; Defined at:
  1822 ;;		line 344 in file "main.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  1    wreg      void 
  1829 ;; Registers used:
  1830 ;;		None
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1
  1836 ;;      Params:         0       0       0
  1837 ;;      Locals:         0       0       0
  1838 ;;      Temps:          0       0       0
  1839 ;;      Totals:         0       0       0
  1840 ;;Total ram usage:        0 bytes
  1841 ;; Hardware stack levels used: 1
  1842 ;; Hardware stack levels required when called: 2
  1843 ;; This function calls:
  1844 ;;		Nothing
  1845 ;; This function is called by:
  1846 ;;		_lcd_command
  1847 ;;		_lcd_message
  1848 ;;		_lcd_clear
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text13
  1853   000A34                     __ptext13:
  1854                           	callstack 0
  1855   000A34                     _i2c_stop:
  1856                           	callstack 26
  1857                           
  1858                           ;main.c: 347:     SSPCON2bits.PEN = 1;
  1859                           
  1860                           ;incstack = 0
  1861   000A34  84C5               	bsf	197,2,c	;volatile
  1862   000A36                     l219:
  1863   000A36  A69E               	btfss	158,3,c	;volatile
  1864   000A38  D7FE               	goto	l219
  1865                           
  1866                           ;main.c: 349:     PIR1bits.SSPIF = 0;
  1867   000A3A  969E               	bcf	158,3,c	;volatile
  1868   000A3C  0012               	return		;funcret
  1869   000A3E                     __end_of_i2c_stop:
  1870                           	callstack 0
  1871                           
  1872 ;; *************** function _i2c_start_and_addr *****************
  1873 ;; Defined at:
  1874 ;;		line 352 in file "main.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;  address         1    wreg     unsigned char 
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;  address         1   17[COMRAM] unsigned char 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMRAM   BANK0   BANK1
  1888 ;;      Params:         0       0       0
  1889 ;;      Locals:         1       0       0
  1890 ;;      Temps:          0       0       0
  1891 ;;      Totals:         1       0       0
  1892 ;;Total ram usage:        1 bytes
  1893 ;; Hardware stack levels used: 1
  1894 ;; Hardware stack levels required when called: 2
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		_lcd_command
  1899 ;;		_lcd_message
  1900 ;;		_lcd_clear
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text14
  1905   000A08                     __ptext14:
  1906                           	callstack 0
  1907   000A08                     _i2c_start_and_addr:
  1908                           	callstack 26
  1909                           
  1910                           ;incstack = 0
  1911                           ;i2c_start_and_addr@address stored from wreg
  1912   000A08  6E12               	movwf	i2c_start_and_addr@address^0,c
  1913                           
  1914                           ;main.c: 352: void i2c_start_and_addr(unsigned char address);main.c: 353: {;main.c: 355:
      +                               SSPCON2bits.SEN = 1;
  1915   000A0A  80C5               	bsf	197,0,c	;volatile
  1916   000A0C                     l225:
  1917   000A0C  A69E               	btfss	158,3,c	;volatile
  1918   000A0E  D7FE               	goto	l225
  1919                           
  1920                           ;main.c: 357:     PIR1bits.SSPIF = 0;
  1921   000A10  969E               	bcf	158,3,c	;volatile
  1922   000A12                     l967:
  1923                           
  1924                           ;main.c: 359:     {;main.c: 360:         SSPBUF = address;
  1925   000A12  C012  FFC9         	movff	i2c_start_and_addr@address,4041	;volatile
  1926   000A16                     l229:
  1927   000A16  A69E               	btfss	158,3,c	;volatile
  1928   000A18  D7FE               	goto	l229
  1929                           
  1930                           ;main.c: 362:         PIR1bits.SSPIF = 0;
  1931   000A1A  969E               	bcf	158,3,c	;volatile
  1932                           
  1933                           ;main.c: 363:     }while(SSPCON2bits.ACKSTAT);
  1934   000A1C  ACC5               	btfss	197,6,c	;volatile
  1935   000A1E  0012               	return	
  1936   000A20  D7F8               	goto	l967
  1937   000A22                     __end_of_i2c_start_and_addr:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _i2c_data_tx *****************
  1941 ;; Defined at:
  1942 ;;		line 333 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  data            1    wreg     unsigned char 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  data            1   17[COMRAM] unsigned char 
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  1    wreg      void 
  1949 ;; Registers used:
  1950 ;;		wreg
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1
  1956 ;;      Params:         0       0       0
  1957 ;;      Locals:         1       0       0
  1958 ;;      Temps:          0       0       0
  1959 ;;      Totals:         1       0       0
  1960 ;;Total ram usage:        1 bytes
  1961 ;; Hardware stack levels used: 1
  1962 ;; Hardware stack levels required when called: 2
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_lcd_command
  1967 ;;		_lcd_char
  1968 ;;		_lcd_clear
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text15
  1973   000A22                     __ptext15:
  1974                           	callstack 0
  1975   000A22                     _i2c_data_tx:
  1976                           	callstack 26
  1977                           
  1978                           ;incstack = 0
  1979                           ;i2c_data_tx@data stored from wreg
  1980   000A22  6E12               	movwf	i2c_data_tx@data^0,c
  1981   000A24                     l211:
  1982                           
  1983                           ;main.c: 336:     {;main.c: 337:         SSPBUF = data;
  1984   000A24  C012  FFC9         	movff	i2c_data_tx@data,4041	;volatile
  1985   000A28                     l212:
  1986   000A28  A69E               	btfss	158,3,c	;volatile
  1987   000A2A  D7FE               	goto	l212
  1988                           
  1989                           ;main.c: 339:         PIR1bits.SSPIF = 0;
  1990   000A2C  969E               	bcf	158,3,c	;volatile
  1991                           
  1992                           ;main.c: 341:     }while(SSPCON2bits.ACKSTAT);
  1993   000A2E  ACC5               	btfss	197,6,c	;volatile
  1994   000A30  0012               	return	
  1995   000A32  D7F8               	goto	l211
  1996   000A34                     __end_of_i2c_data_tx:
  1997                           	callstack 0
  1998                           
  1999 ;; *************** function _delay *****************
  2000 ;; Defined at:
  2001 ;;		line 151 in file "main.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;  milliseconds    4   29[COMRAM] unsigned long 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  timer_value     8   33[COMRAM] unsigned long long 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      void 
  2008 ;; Registers used:
  2009 ;;		wreg, status,2, status,0, cstack
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMRAM   BANK0   BANK1
  2015 ;;      Params:         4       0       0
  2016 ;;      Locals:         8       0       0
  2017 ;;      Temps:          0       0       0
  2018 ;;      Totals:        12       0       0
  2019 ;;Total ram usage:       12 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; Hardware stack levels required when called: 3
  2022 ;; This function calls:
  2023 ;;		___lmul
  2024 ;; This function is called by:
  2025 ;;		_send
  2026 ;;		_lcd_command
  2027 ;;		_lcd_char
  2028 ;;		_lcd_clear
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text16
  2033   0004DA                     __ptext16:
  2034                           	callstack 0
  2035   0004DA                     _delay:
  2036                           	callstack 25
  2037                           
  2038                           ;main.c: 151: void delay(unsigned long milliseconds);main.c: 152: {;main.c: 153:     T1C
      +                          ON = 0b10110000;
  2039                           
  2040                           ;incstack = 0
  2041   0004DA  0EB0               	movlw	176
  2042   0004DC  6ECD               	movwf	205,c	;volatile
  2043                           
  2044                           ;main.c: 154:     PIE1bits.TMR1IE = 0;
  2045   0004DE  909D               	bcf	157,0,c	;volatile
  2046                           
  2047                           ;main.c: 155:     unsigned long long timer_value = (milliseconds) * 1000 ;
  2048   0004E0  C01E  F012         	movff	delay@milliseconds,___lmul@multiplier
  2049   0004E4  C01F  F013         	movff	delay@milliseconds+1,___lmul@multiplier+1
  2050   0004E8  C020  F014         	movff	delay@milliseconds+2,___lmul@multiplier+2
  2051   0004EC  C021  F015         	movff	delay@milliseconds+3,___lmul@multiplier+3
  2052   0004F0  0EE8               	movlw	232
  2053   0004F2  6E16               	movwf	___lmul@multiplicand^0,c
  2054   0004F4  0E03               	movlw	3
  2055   0004F6  6E17               	movwf	(___lmul@multiplicand+1)^0,c
  2056   0004F8  0E00               	movlw	0
  2057   0004FA  6E18               	movwf	(___lmul@multiplicand+2)^0,c
  2058   0004FC  0E00               	movlw	0
  2059   0004FE  6E19               	movwf	(___lmul@multiplicand+3)^0,c
  2060   000500  ECF4  F003         	call	___lmul	;wreg free
  2061   000504  5012               	movf	?___lmul^0,w,c
  2062   000506  6E22               	movwf	delay@timer_value^0,c
  2063   000508  5013               	movf	(?___lmul+1)^0,w,c
  2064   00050A  6E23               	movwf	(delay@timer_value+1)^0,c
  2065   00050C  5014               	movf	(?___lmul+2)^0,w,c
  2066   00050E  6E24               	movwf	(delay@timer_value+2)^0,c
  2067   000510  5015               	movf	(?___lmul+3)^0,w,c
  2068   000512  6E25               	movwf	(delay@timer_value+3)^0,c
  2069   000514  6A26               	clrf	(delay@timer_value+4)^0,c
  2070   000516  6A27               	clrf	(delay@timer_value+5)^0,c
  2071   000518  6A28               	clrf	(delay@timer_value+6)^0,c
  2072   00051A  6A29               	clrf	(delay@timer_value+7)^0,c
  2073                           
  2074                           ;main.c: 156:     while(timer_value > 65535)
  2075   00051C  D019               	goto	l1341
  2076   00051E                     l1333:
  2077                           
  2078                           ;main.c: 157:     {;main.c: 158:         timer_value -= 65535;
  2079   00051E  0EFF               	movlw	255
  2080   000520  5E22               	subwf	delay@timer_value^0,f,c
  2081   000522  0EFF               	movlw	255
  2082   000524  5A23               	subwfb	(delay@timer_value+1)^0,f,c
  2083   000526  0E00               	movlw	0
  2084   000528  5A24               	subwfb	(delay@timer_value+2)^0,f,c
  2085   00052A  0E00               	movlw	0
  2086   00052C  5A25               	subwfb	(delay@timer_value+3)^0,f,c
  2087   00052E  0E00               	movlw	0
  2088   000530  5A26               	subwfb	(delay@timer_value+4)^0,f,c
  2089   000532  0E00               	movlw	0
  2090   000534  5A27               	subwfb	(delay@timer_value+5)^0,f,c
  2091   000536  0E00               	movlw	0
  2092   000538  5A28               	subwfb	(delay@timer_value+6)^0,f,c
  2093   00053A  0E00               	movlw	0
  2094   00053C  5A29               	subwfb	(delay@timer_value+7)^0,f,c
  2095                           
  2096                           ;main.c: 159:         TMR1H = 0;
  2097   00053E  0E00               	movlw	0
  2098   000540  6ECF               	movwf	207,c	;volatile
  2099                           
  2100                           ;main.c: 160:         TMR1L = 0;
  2101   000542  0E00               	movlw	0
  2102   000544  6ECE               	movwf	206,c	;volatile
  2103                           
  2104                           ;main.c: 161:         T1CONbits.TMR1ON = 1;
  2105   000546  80CD               	bsf	205,0,c	;volatile
  2106   000548                     l154:
  2107   000548  A09E               	btfss	158,0,c	;volatile
  2108   00054A  D7FE               	goto	l154
  2109                           
  2110                           ;main.c: 163:         T1CONbits.TMR1ON = 0;
  2111   00054C  90CD               	bcf	205,0,c	;volatile
  2112                           
  2113                           ;main.c: 164:         PIR1bits.TMR1IF = 0;
  2114   00054E  909E               	bcf	158,0,c	;volatile
  2115   000550                     l1341:
  2116                           
  2117                           ;main.c: 156:     while(timer_value > 65535)
  2118   000550  5029               	movf	(delay@timer_value+7)^0,w,c
  2119   000552  1028               	iorwf	(delay@timer_value+6)^0,w,c
  2120   000554  1027               	iorwf	(delay@timer_value+5)^0,w,c
  2121   000556  1026               	iorwf	(delay@timer_value+4)^0,w,c
  2122   000558  1025               	iorwf	(delay@timer_value+3)^0,w,c
  2123   00055A  E1E1               	bnz	l1333
  2124   00055C  0424               	decf	(delay@timer_value+2)^0,w,c
  2125   00055E  B0D8               	btfsc	status,0,c
  2126   000560  D7DE               	goto	l1333
  2127                           
  2128                           ;main.c: 166:     timer_value = 65535 - timer_value + 1;
  2129   000562  5022               	movf	delay@timer_value^0,w,c
  2130   000564  0800               	sublw	0
  2131   000566  6E22               	movwf	delay@timer_value^0,c
  2132   000568  0E00               	movlw	0
  2133   00056A  5423               	subfwb	(delay@timer_value+1)^0,w,c
  2134   00056C  6E23               	movwf	(delay@timer_value+1)^0,c
  2135   00056E  0E01               	movlw	1
  2136   000570  5424               	subfwb	(delay@timer_value+2)^0,w,c
  2137   000572  6E24               	movwf	(delay@timer_value+2)^0,c
  2138   000574  0E00               	movlw	0
  2139   000576  5425               	subfwb	(delay@timer_value+3)^0,w,c
  2140   000578  6E25               	movwf	(delay@timer_value+3)^0,c
  2141   00057A  0E00               	movlw	0
  2142   00057C  5426               	subfwb	(delay@timer_value+4)^0,w,c
  2143   00057E  6E26               	movwf	(delay@timer_value+4)^0,c
  2144   000580  0E00               	movlw	0
  2145   000582  5427               	subfwb	(delay@timer_value+5)^0,w,c
  2146   000584  6E27               	movwf	(delay@timer_value+5)^0,c
  2147   000586  0E00               	movlw	0
  2148   000588  5428               	subfwb	(delay@timer_value+6)^0,w,c
  2149   00058A  6E28               	movwf	(delay@timer_value+6)^0,c
  2150   00058C  0E00               	movlw	0
  2151   00058E  5429               	subfwb	(delay@timer_value+7)^0,w,c
  2152   000590  6E29               	movwf	(delay@timer_value+7)^0,c
  2153                           
  2154                           ;main.c: 167:     TMR1H = (unsigned char)(0xFF00 & timer_value);
  2155   000592  0E00               	movlw	0
  2156   000594  6ECF               	movwf	207,c	;volatile
  2157                           
  2158                           ;main.c: 168:     TMR1L = (unsigned char)(0xFF & timer_value);
  2159   000596  C022  FFCE         	movff	delay@timer_value,4046	;volatile
  2160                           
  2161                           ;main.c: 169:     T1CONbits.TMR1ON = 1;
  2162   00059A  80CD               	bsf	205,0,c	;volatile
  2163   00059C                     l158:
  2164   00059C  A09E               	btfss	158,0,c	;volatile
  2165   00059E  D7FE               	goto	l158
  2166                           
  2167                           ;main.c: 171:     T1CONbits.TMR1ON = 0;
  2168   0005A0  90CD               	bcf	205,0,c	;volatile
  2169                           
  2170                           ;main.c: 172:     PIR1bits.TMR1IF = 0;
  2171   0005A2  909E               	bcf	158,0,c	;volatile
  2172   0005A4  0012               	return		;funcret
  2173   0005A6                     __end_of_delay:
  2174                           	callstack 0
  2175                           
  2176 ;; *************** function ___lmul *****************
  2177 ;; Defined at:
  2178 ;;		line 15 in file "C:\Microchip\xc8\v2.41\pic\sources\c99\common\Umul32.c"
  2179 ;; Parameters:    Size  Location     Type
  2180 ;;  multiplier      4   17[COMRAM] unsigned long 
  2181 ;;  multiplicand    4   21[COMRAM] unsigned long 
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;  product         4   25[COMRAM] unsigned long 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  4   17[COMRAM] unsigned long 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1
  2193 ;;      Params:         8       0       0
  2194 ;;      Locals:         4       0       0
  2195 ;;      Temps:          0       0       0
  2196 ;;      Totals:        12       0       0
  2197 ;;Total ram usage:       12 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 2
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_delay
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text17
  2208   0007E8                     __ptext17:
  2209                           	callstack 0
  2210   0007E8                     ___lmul:
  2211                           	callstack 25
  2212                           
  2213                           ;incstack = 0
  2214   0007E8  0E00               	movlw	0
  2215   0007EA  6E1A               	movwf	___lmul@product^0,c
  2216   0007EC  0E00               	movlw	0
  2217   0007EE  6E1B               	movwf	(___lmul@product+1)^0,c
  2218   0007F0  0E00               	movlw	0
  2219   0007F2  6E1C               	movwf	(___lmul@product+2)^0,c
  2220   0007F4  0E00               	movlw	0
  2221   0007F6  6E1D               	movwf	(___lmul@product+3)^0,c
  2222   0007F8                     l1319:
  2223   0007F8  A012               	btfss	___lmul@multiplier^0,0,c
  2224   0007FA  D008               	goto	l1323
  2225   0007FC  5016               	movf	___lmul@multiplicand^0,w,c
  2226   0007FE  261A               	addwf	___lmul@product^0,f,c
  2227   000800  5017               	movf	(___lmul@multiplicand+1)^0,w,c
  2228   000802  221B               	addwfc	(___lmul@product+1)^0,f,c
  2229   000804  5018               	movf	(___lmul@multiplicand+2)^0,w,c
  2230   000806  221C               	addwfc	(___lmul@product+2)^0,f,c
  2231   000808  5019               	movf	(___lmul@multiplicand+3)^0,w,c
  2232   00080A  221D               	addwfc	(___lmul@product+3)^0,f,c
  2233   00080C                     l1323:
  2234   00080C  90D8               	bcf	status,0,c
  2235   00080E  3616               	rlcf	___lmul@multiplicand^0,f,c
  2236   000810  3617               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2237   000812  3618               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2238   000814  3619               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2239   000816  90D8               	bcf	status,0,c
  2240   000818  3215               	rrcf	(___lmul@multiplier+3)^0,f,c
  2241   00081A  3214               	rrcf	(___lmul@multiplier+2)^0,f,c
  2242   00081C  3213               	rrcf	(___lmul@multiplier+1)^0,f,c
  2243   00081E  3212               	rrcf	___lmul@multiplier^0,f,c
  2244   000820  5012               	movf	___lmul@multiplier^0,w,c
  2245   000822  1013               	iorwf	(___lmul@multiplier+1)^0,w,c
  2246   000824  1014               	iorwf	(___lmul@multiplier+2)^0,w,c
  2247   000826  1015               	iorwf	(___lmul@multiplier+3)^0,w,c
  2248   000828  A4D8               	btfss	status,2,c
  2249   00082A  D7E6               	goto	l1319
  2250   00082C  C01A  F012         	movff	___lmul@product,?___lmul
  2251   000830  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  2252   000834  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  2253   000838  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  2254   00083C  0012               	return		;funcret
  2255   00083E                     __end_of___lmul:
  2256                           	callstack 0
  2257                           
  2258 ;; *************** function _keypad_init *****************
  2259 ;; Defined at:
  2260 ;;		line 443 in file "main.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1
  2274 ;;      Params:         0       0       0
  2275 ;;      Locals:         0       0       0
  2276 ;;      Temps:          0       0       0
  2277 ;;      Totals:         0       0       0
  2278 ;;Total ram usage:        0 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; Hardware stack levels required when called: 2
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text18
  2289   00096A                     __ptext18:
  2290                           	callstack 0
  2291   00096A                     _keypad_init:
  2292                           	callstack 28
  2293                           
  2294                           ;main.c: 445:     ADCON1bits.PCFG = 15;
  2295                           
  2296                           ;incstack = 0
  2297   00096A  0E0F               	movlw	15
  2298   00096C  12C1               	iorwf	193,f,c	;volatile
  2299                           
  2300                           ;main.c: 446:     TRISA = TRISA & 0xF0;
  2301   00096E  5092               	movf	146,w,c	;volatile
  2302   000970  0BF0               	andlw	240
  2303   000972  6E92               	movwf	146,c	;volatile
  2304                           
  2305                           ;main.c: 447:     TRISB = (TRISB & 0xFF) | 0xF0;
  2306   000974  5093               	movf	147,w,c	;volatile
  2307   000976  09F0               	iorlw	240
  2308   000978  6E93               	movwf	147,c	;volatile
  2309                           
  2310                           ;main.c: 449:     LATA = LATA & 0b11110000;
  2311   00097A  5089               	movf	137,w,c	;volatile
  2312   00097C  0BF0               	andlw	240
  2313   00097E  6E89               	movwf	137,c	;volatile
  2314                           
  2315                           ;main.c: 450:     PORTB = PORTB & 0b00001111;
  2316   000980  5081               	movf	129,w,c	;volatile
  2317   000982  0B0F               	andlw	15
  2318   000984  6E81               	movwf	129,c	;volatile
  2319                           
  2320                           ;main.c: 453:     T0CON = 0b00000100;
  2321   000986  0E04               	movlw	4
  2322   000988  6ED5               	movwf	213,c	;volatile
  2323                           
  2324                           ;main.c: 454:     INTCONbits.TMR0IF = 0;
  2325   00098A  94F2               	bcf	242,2,c	;volatile
  2326                           
  2327                           ;main.c: 455:     TMR0H = 0x0B;
  2328   00098C  0E0B               	movlw	11
  2329   00098E  6ED7               	movwf	215,c	;volatile
  2330                           
  2331                           ;main.c: 456:     TMR0L = 0xDD;
  2332   000990  0EDD               	movlw	221
  2333   000992  6ED6               	movwf	214,c	;volatile
  2334                           
  2335                           ;main.c: 457:     INTCONbits.TMR0IE = 1;
  2336   000994  8AF2               	bsf	242,5,c	;volatile
  2337                           
  2338                           ;main.c: 458:     T0CONbits.TMR0ON = 1;
  2339   000996  8ED5               	bsf	213,7,c	;volatile
  2340   000998  0012               	return		;funcret
  2341   00099A                     __end_of_keypad_init:
  2342                           	callstack 0
  2343                           
  2344 ;; *************** function _ISR *****************
  2345 ;; Defined at:
  2346 ;;		line 122 in file "main.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;  is_key_press    1   16[COMRAM] unsigned char 
  2351 ;;  current_row     1   15[COMRAM] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1
  2361 ;;      Params:         0       0       0
  2362 ;;      Locals:         2       0       0
  2363 ;;      Temps:          9       0       0
  2364 ;;      Totals:        11       0       0
  2365 ;;Total ram usage:       11 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 1
  2368 ;; This function calls:
  2369 ;;		_keypress
  2370 ;; This function is called by:
  2371 ;;		Interrupt level 2
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	intcode
  2376   000008                     __pintcode:
  2377                           	callstack 0
  2378   000008                     _ISR:
  2379                           	callstack 24
  2380                           
  2381                           ;incstack = 0
  2382   000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2383   00000A  CFD9 F008          	movff	fsr2l,??_ISR+1
  2384   00000E  CFDA F009          	movff	fsr2h,??_ISR+2
  2385   000012  CFF3 F00A          	movff	prodl,??_ISR+3
  2386   000016  CFF4 F00B          	movff	prodh,??_ISR+4
  2387   00001A  CFF6 F00C          	movff	tblptrl,??_ISR+5
  2388   00001E  CFF7 F00D          	movff	tblptrh,??_ISR+6
  2389   000022  CFF8 F00E          	movff	tblptru,??_ISR+7
  2390   000026  CFF5 F00F          	movff	tablat,??_ISR+8
  2391                           
  2392                           ;main.c: 124:     if(INTCONbits.TMR0IF == 1)
  2393   00002A  A4F2               	btfss	242,2,c	;volatile
  2394   00002C  D043               	goto	i2l149
  2395                           
  2396                           ;main.c: 125:     {;main.c: 127:         INTCONbits.TMR0IF = 0;
  2397   00002E  94F2               	bcf	242,2,c	;volatile
  2398                           
  2399                           ;main.c: 128:         TMR0H = 0x0B;
  2400   000030  0E0B               	movlw	11
  2401   000032  6ED7               	movwf	215,c	;volatile
  2402                           
  2403                           ;main.c: 129:         TMR0L = 0xDD;
  2404   000034  0EDD               	movlw	221
  2405   000036  6ED6               	movwf	214,c	;volatile
  2406                           
  2407                           ;main.c: 130:         char is_key_pressed = 0;
  2408   000038  0E00               	movlw	0
  2409   00003A  6E11               	movwf	ISR@is_key_pressed^0,c
  2410                           
  2411                           ;main.c: 131:         char current_row = 0;
  2412   00003C  0E00               	movlw	0
  2413   00003E  6E10               	movwf	ISR@current_row^0,c
  2414                           
  2415                           ;main.c: 134:         while(!is_key_pressed && current_row < 4)
  2416   000040  D005               	goto	i2l1291
  2417   000042                     i2l1287:
  2418                           
  2419                           ;main.c: 135:         {;main.c: 136:             is_key_pressed = keypress(current_row);
  2420   000042  5010               	movf	ISR@current_row^0,w,c
  2421   000044  ECFF  F001         	call	_keypress
  2422   000048  6E11               	movwf	ISR@is_key_pressed^0,c
  2423                           
  2424                           ;main.c: 137:             current_row++;
  2425   00004A  2A10               	incf	ISR@current_row^0,f,c
  2426   00004C                     i2l1291:
  2427                           
  2428                           ;main.c: 134:         while(!is_key_pressed && current_row < 4)
  2429   00004C  5011               	movf	ISR@is_key_pressed^0,w,c
  2430   00004E  A4D8               	btfss	status,2,c
  2431   000050  D003               	goto	i2u50_40
  2432   000052  0E03               	movlw	3
  2433   000054  6410               	cpfsgt	ISR@current_row^0,c
  2434   000056  D7F5               	goto	i2l1287
  2435   000058                     i2u50_40:
  2436                           
  2437                           ;main.c: 139:         if(is_key_pressed && message_length < (10) || (is_key_pressed && c
      +                          urrent_row == 4 && (is_key_pressed == 1 || is_key_pressed == 3 || is_key_pressed == 4)))
  2438   000058  5011               	movf	ISR@is_key_pressed^0,w,c
  2439   00005A  B4D8               	btfsc	status,2,c
  2440   00005C  D003               	goto	i2u52_40
  2441   00005E  0E09               	movlw	9
  2442   000060  643D               	cpfsgt	_message_length^0,c
  2443   000062  D012               	goto	i2u57_40
  2444   000064                     i2u52_40:
  2445   000064  5011               	movf	ISR@is_key_pressed^0,w,c
  2446   000066  B4D8               	btfsc	status,2,c
  2447   000068  D025               	goto	i2l149
  2448   00006A  0E04               	movlw	4
  2449   00006C  1810               	xorwf	ISR@current_row^0,w,c
  2450   00006E  A4D8               	btfss	status,2,c
  2451   000070  D021               	goto	i2l149
  2452   000072  0411               	decf	ISR@is_key_pressed^0,w,c
  2453   000074  B4D8               	btfsc	status,2,c
  2454   000076  D008               	goto	i2u57_40
  2455   000078  0E03               	movlw	3
  2456   00007A  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2457   00007C  B4D8               	btfsc	status,2,c
  2458   00007E  D004               	goto	i2u57_40
  2459   000080  0E04               	movlw	4
  2460   000082  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2461   000084  A4D8               	btfss	status,2,c
  2462   000086  D016               	goto	i2l149
  2463   000088                     i2u57_40:
  2464                           
  2465                           ;main.c: 140:         {;main.c: 141:             keys[message_length] = keypad_array[--c
      +                          urrent_row][--is_key_pressed];
  2466   000088  0611               	decf	ISR@is_key_pressed^0,f,c
  2467   00008A  0610               	decf	ISR@current_row^0,f,c
  2468   00008C  5010               	movf	ISR@current_row^0,w,c
  2469   00008E  0D04               	mullw	4
  2470   000090  50F3               	movf	243,w,c
  2471   000092  0F01               	addlw	low _keypad_array
  2472   000094  2411               	addwf	ISR@is_key_pressed^0,w,c
  2473   000096  6E07               	movwf	??_ISR^0,c
  2474   000098  C007  FFF6         	movff	??_ISR,tblptrl
  2475   00009C                     	if	1	;There is more than 1 active tblptr byte
  2476   00009C  0E02               	movlw	high __smallconst
  2477   00009E  6EF7               	movwf	tblptrh,c
  2478   0000A0                     	endif
  2479   0000A0                     	if	0	;tblptru may be non-zero
  2480   0000A0                     	endif
  2481   0000A0                     	if	0	;tblptru may be non-zero
  2482   0000A0                     	endif
  2483   0000A0  503D               	movf	_message_length^0,w,c
  2484   0000A2  0F3E               	addlw	low _keys
  2485   0000A4  6ED9               	movwf	fsr2l,c
  2486   0000A6  6ADA               	clrf	fsr2h,c
  2487   0000A8  0008               	tblrd		*
  2488   0000AA  CFF5 FFDF          	movff	tablat,indf2
  2489                           
  2490                           ;main.c: 142:             key_pressed = 1;
  2491   0000AE  0E01               	movlw	1
  2492   0000B0  6E3C               	movwf	_key_pressed^0,c
  2493                           
  2494                           ;main.c: 143:             message_length++;
  2495   0000B2  2A3D               	incf	_message_length^0,f,c
  2496   0000B4                     i2l149:
  2497   0000B4  C00F  FFF5         	movff	??_ISR+8,tablat
  2498   0000B8  C00E  FFF8         	movff	??_ISR+7,tblptru
  2499   0000BC  C00D  FFF7         	movff	??_ISR+6,tblptrh
  2500   0000C0  C00C  FFF6         	movff	??_ISR+5,tblptrl
  2501   0000C4  C00B  FFF4         	movff	??_ISR+4,prodh
  2502   0000C8  C00A  FFF3         	movff	??_ISR+3,prodl
  2503   0000CC  C009  FFDA         	movff	??_ISR+2,fsr2h
  2504   0000D0  C008  FFD9         	movff	??_ISR+1,fsr2l
  2505   0000D4  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2506   0000D6  0011               	retfie		f
  2507   0000D8                     __end_of_ISR:
  2508                           	callstack 0
  2509                           
  2510 ;; *************** function _keypress *****************
  2511 ;; Defined at:
  2512 ;;		line 368 in file "main.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  current_row     1    wreg     unsigned char 
  2515 ;; Auto vars:     Size  Location     Type
  2516 ;;  current_row     1    3[COMRAM] unsigned char 
  2517 ;;  col_num         1    5[COMRAM] unsigned char 
  2518 ;;  col_key_pres    1    4[COMRAM] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      unsigned char 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1
  2528 ;;      Params:         0       0       0
  2529 ;;      Locals:         3       0       0
  2530 ;;      Temps:          3       0       0
  2531 ;;      Totals:         6       0       0
  2532 ;;Total ram usage:        6 bytes
  2533 ;; Hardware stack levels used: 1
  2534 ;; This function calls:
  2535 ;;		Nothing
  2536 ;; This function is called by:
  2537 ;;		_ISR
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text20
  2542   0003FE                     __ptext20:
  2543                           	callstack 0
  2544   0003FE                     _keypress:
  2545                           	callstack 24
  2546                           
  2547                           ;incstack = 0
  2548                           ;keypress@current_row stored from wreg
  2549   0003FE  6E04               	movwf	keypress@current_row^0,c
  2550                           
  2551                           ;main.c: 368: char keypress(char current_row);main.c: 369: {;main.c: 371:     LATA = (un
      +                          signed char)(1 << current_row) | LATA;
  2552   000400  C004  F001         	movff	keypress@current_row,??_keypress
  2553   000404  0E01               	movlw	1
  2554   000406  6E02               	movwf	(??_keypress+1)^0,c
  2555   000408  2A01               	incf	??_keypress^0,f,c
  2556   00040A  D002               	goto	i2u20_44
  2557   00040C                     i2u20_45:
  2558   00040C  90D8               	bcf	status,0,c
  2559   00040E  3602               	rlcf	(??_keypress+1)^0,f,c
  2560   000410                     i2u20_44:
  2561   000410  2E01               	decfsz	??_keypress^0,f,c
  2562   000412  D7FC               	goto	i2u20_45
  2563   000414  5002               	movf	(??_keypress+1)^0,w,c
  2564   000416  1089               	iorwf	137,w,c	;volatile
  2565   000418  6E89               	movwf	137,c	;volatile
  2566                           
  2567                           ;main.c: 372:     char col_key_press = 0;
  2568   00041A  0E00               	movlw	0
  2569   00041C  6E05               	movwf	keypress@col_key_press^0,c
  2570                           
  2571                           ;main.c: 373:     char col_num = 0;
  2572   00041E  0E00               	movlw	0
  2573   000420  6E06               	movwf	keypress@col_num^0,c
  2574                           
  2575                           ;main.c: 375:     while(col_num < 4 && !col_key_press)
  2576   000422  D046               	goto	i2l1173
  2577   000424                     i2l1153:
  2578                           
  2579                           ;main.c: 376:     {;main.c: 377:         if((128 >> col_num) & PORTB)
  2580   000424  C006  F001         	movff	keypress@col_num,??_keypress
  2581   000428  0E80               	movlw	128
  2582   00042A  6E02               	movwf	(??_keypress+1)^0,c
  2583   00042C  0E00               	movlw	0
  2584   00042E  6E03               	movwf	(??_keypress+2)^0,c
  2585   000430  2A01               	incf	??_keypress^0,f,c
  2586   000432  D003               	goto	i2u21_44
  2587   000434                     i2u21_45:
  2588   000434  3403               	rlcf	(??_keypress+2)^0,w,c
  2589   000436  3203               	rrcf	(??_keypress+2)^0,f,c
  2590   000438  3202               	rrcf	(??_keypress+1)^0,f,c
  2591   00043A                     i2u21_44:
  2592   00043A  2E01               	decfsz	??_keypress^0,f,c
  2593   00043C  D7FB               	goto	i2u21_45
  2594   00043E  5002               	movf	(??_keypress+1)^0,w,c
  2595   000440  1481               	andwf	129,w,c	;volatile
  2596   000442  0900               	iorlw	0
  2597   000444  B4D8               	btfsc	status,2,c
  2598   000446  D033               	goto	i2l1171
  2599                           
  2600                           ;main.c: 378:         {;main.c: 379:             T3CON = 0b10010000;
  2601   000448  0E90               	movlw	144
  2602   00044A  6EB1               	movwf	177,c	;volatile
  2603                           
  2604                           ;main.c: 380:             PIE2bits.TMR3IE = 0;
  2605   00044C  92A0               	bcf	160,1,c	;volatile
  2606                           
  2607                           ;main.c: 381:             TMR3H = 0x63;
  2608   00044E  0E63               	movlw	99
  2609   000450  6EB3               	movwf	179,c	;volatile
  2610                           
  2611                           ;main.c: 382:             TMR3L = 0xC1;
  2612   000452  0EC1               	movlw	193
  2613   000454  6EB2               	movwf	178,c	;volatile
  2614                           
  2615                           ;main.c: 383:             PIR2bits.TMR3IF = 0;
  2616   000456  92A1               	bcf	161,1,c	;volatile
  2617                           
  2618                           ;main.c: 385:             T3CONbits.TMR3ON = 1;
  2619   000458  80B1               	bsf	177,0,c	;volatile
  2620   00045A                     i2l239:
  2621   00045A  A2A1               	btfss	161,1,c	;volatile
  2622   00045C  D7FE               	goto	i2l239
  2623                           
  2624                           ;main.c: 388:             T3CONbits.TMR3ON = 0;
  2625   00045E  90B1               	bcf	177,0,c	;volatile
  2626                           
  2627                           ;main.c: 389:             PIR2bits.TMR3IF = 0;
  2628   000460  92A1               	bcf	161,1,c	;volatile
  2629                           
  2630                           ;main.c: 391:             if((128 >> col_num) & PORTB)
  2631   000462  C006  F001         	movff	keypress@col_num,??_keypress
  2632   000466  0E80               	movlw	128
  2633   000468  6E02               	movwf	(??_keypress+1)^0,c
  2634   00046A  0E00               	movlw	0
  2635   00046C  6E03               	movwf	(??_keypress+2)^0,c
  2636   00046E  2A01               	incf	??_keypress^0,f,c
  2637   000470  D003               	goto	i2u24_44
  2638   000472                     i2u24_45:
  2639   000472  3403               	rlcf	(??_keypress+2)^0,w,c
  2640   000474  3203               	rrcf	(??_keypress+2)^0,f,c
  2641   000476  3202               	rrcf	(??_keypress+1)^0,f,c
  2642   000478                     i2u24_44:
  2643   000478  2E01               	decfsz	??_keypress^0,f,c
  2644   00047A  D7FB               	goto	i2u24_45
  2645   00047C  5002               	movf	(??_keypress+1)^0,w,c
  2646   00047E  1481               	andwf	129,w,c	;volatile
  2647   000480  0900               	iorlw	0
  2648   000482  B4D8               	btfsc	status,2,c
  2649   000484  D014               	goto	i2l1171
  2650   000486                     i2u25_40:
  2651   000486  C006  F001         	movff	keypress@col_num,??_keypress
  2652   00048A  0E80               	movlw	128
  2653   00048C  6E02               	movwf	(??_keypress+1)^0,c
  2654   00048E  0E00               	movlw	0
  2655   000490  6E03               	movwf	(??_keypress+2)^0,c
  2656   000492  2A01               	incf	??_keypress^0,f,c
  2657   000494  D003               	goto	i2u26_44
  2658   000496                     i2u26_45:
  2659   000496  3403               	rlcf	(??_keypress+2)^0,w,c
  2660   000498  3203               	rrcf	(??_keypress+2)^0,f,c
  2661   00049A  3202               	rrcf	(??_keypress+1)^0,f,c
  2662   00049C                     i2u26_44:
  2663   00049C  2E01               	decfsz	??_keypress^0,f,c
  2664   00049E  D7FB               	goto	i2u26_45
  2665   0004A0  5002               	movf	(??_keypress+1)^0,w,c
  2666   0004A2  1481               	andwf	129,w,c	;volatile
  2667   0004A4  0900               	iorlw	0
  2668   0004A6  A4D8               	btfss	status,2,c
  2669   0004A8  D7EE               	goto	i2u25_40
  2670                           
  2671                           ;main.c: 394:                 col_key_press = col_num + 1;
  2672   0004AA  2806               	incf	keypress@col_num^0,w,c
  2673   0004AC  6E05               	movwf	keypress@col_key_press^0,c
  2674   0004AE                     i2l1171:
  2675                           
  2676                           ;main.c: 397:         col_num++;
  2677   0004AE  2A06               	incf	keypress@col_num^0,f,c
  2678   0004B0                     i2l1173:
  2679                           
  2680                           ;main.c: 375:     while(col_num < 4 && !col_key_press)
  2681   0004B0  0E04               	movlw	4
  2682   0004B2  6006               	cpfslt	keypress@col_num^0,c
  2683   0004B4  D003               	goto	i2u29_40
  2684   0004B6  5005               	movf	keypress@col_key_press^0,w,c
  2685   0004B8  B4D8               	btfsc	status,2,c
  2686   0004BA  D7B4               	goto	i2l1153
  2687   0004BC                     i2u29_40:
  2688                           
  2689                           ;main.c: 401:     LATA = (unsigned char)(1 << current_row) ^ LATA;
  2690   0004BC  C004  F001         	movff	keypress@current_row,??_keypress
  2691   0004C0  0E01               	movlw	1
  2692   0004C2  6E02               	movwf	(??_keypress+1)^0,c
  2693   0004C4  2A01               	incf	??_keypress^0,f,c
  2694   0004C6  D002               	goto	i2u30_44
  2695   0004C8                     i2u30_45:
  2696   0004C8  90D8               	bcf	status,0,c
  2697   0004CA  3602               	rlcf	(??_keypress+1)^0,f,c
  2698   0004CC                     i2u30_44:
  2699   0004CC  2E01               	decfsz	??_keypress^0,f,c
  2700   0004CE  D7FC               	goto	i2u30_45
  2701   0004D0  5002               	movf	(??_keypress+1)^0,w,c
  2702   0004D2  1889               	xorwf	137,w,c	;volatile
  2703   0004D4  6E89               	movwf	137,c	;volatile
  2704                           
  2705                           ;main.c: 402:     return col_key_press;
  2706   0004D6  5005               	movf	keypress@col_key_press^0,w,c
  2707   0004D8  0012               	return		;funcret
  2708   0004DA                     __end_of_keypress:
  2709                           	callstack 0
  2710                           
  2711                           	psect	rparam
  2712   000000                     
  2713                           	psect	temp
  2714   000049                     btemp:
  2715                           	callstack 0
  2716   000049                     	ds	1
  2717   000000                     int$flags	set	btemp
  2718   000000                     wtemp8	set	btemp+1
  2719   000000                     ttemp5	set	btemp+1
  2720   000000                     ttemp6	set	btemp+4
  2721   000000                     ttemp7	set	btemp+8
  2722                           
  2723                           	psect	config
  2724                           
  2725                           ; Padding undefined space
  2726   300000                     	org	3145728
  2727   300000  FF                 	db	255
  2728                           
  2729                           ;Config register CONFIG1H @ 0x300001
  2730                           ;	Oscillator
  2731                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2732                           ;	Fail-Safe Clock Monitor Enable bit
  2733                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2734                           ;	Internal/External Oscillator Switchover bit
  2735                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2736   300001                     	org	3145729
  2737   300001  08                 	db	8
  2738                           
  2739                           ;Config register CONFIG2L @ 0x300002
  2740                           ;	Power-up Timer Enable bit
  2741                           ;	PWRT = OFF, PWRT disabled
  2742                           ;	Brown-out Reset Enable bits
  2743                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2744                           ;	Brown-out Reset Voltage bits
  2745                           ;	BORV = 3, Minimum Setting
  2746   300002                     	org	3145730
  2747   300002  1F                 	db	31
  2748                           
  2749                           ;Config register CONFIG2H @ 0x300003
  2750                           ;	Watchdog Timer Enable bit
  2751                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2752                           ;	Watchdog Timer Postscale Select bits
  2753                           ;	WDTPS = 32768, 1:32768
  2754   300003                     	org	3145731
  2755   300003  1E                 	db	30
  2756                           
  2757                           ; Padding undefined space
  2758   300004                     	org	3145732
  2759   300004  FF                 	db	255
  2760                           
  2761                           ;Config register CONFIG3H @ 0x300005
  2762                           ;	CCP2 MUX bit
  2763                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2764                           ;	PORTB A/D Enable bit
  2765                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2766                           ;	Low-Power Timer1 Oscillator Enable bit
  2767                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2768                           ;	MCLR Pin Enable bit
  2769                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2770   300005                     	org	3145733
  2771   300005  83                 	db	131
  2772                           
  2773                           ;Config register CONFIG4L @ 0x300006
  2774                           ;	Stack Full/Underflow Reset Enable bit
  2775                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2776                           ;	Single-Supply ICSP Enable bit
  2777                           ;	LVP = OFF, Single-Supply ICSP disabled
  2778                           ;	Boot Block Size Select bits
  2779                           ;	BBSIZ = BB256, 256 Word
  2780                           ;	Extended Instruction Set Enable bit
  2781                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2782                           ;	Background Debugger Enable bit
  2783                           ;	DEBUG = 0x1, unprogrammed default
  2784   300006                     	org	3145734
  2785   300006  81                 	db	129
  2786                           
  2787                           ; Padding undefined space
  2788   300007                     	org	3145735
  2789   300007  FF                 	db	255
  2790                           
  2791                           ;Config register CONFIG5L @ 0x300008
  2792                           ;	Code Protection bit
  2793                           ;	CP0 = OFF, Block 0 not code-protected
  2794                           ;	Code Protection bit
  2795                           ;	CP1 = OFF, Block 1 not code-protected
  2796   300008                     	org	3145736
  2797   300008  03                 	db	3
  2798                           
  2799                           ;Config register CONFIG5H @ 0x300009
  2800                           ;	Boot Block Code Protection bitProtect Boot
  2801                           ;	CPB = OFF, Boot block not code-protected
  2802                           ;	Data EEPROM Code Protection bit
  2803                           ;	CPD = OFF, Data EEPROM not code-protected
  2804   300009                     	org	3145737
  2805   300009  C0                 	db	192
  2806                           
  2807                           ;Config register CONFIG6L @ 0x30000A
  2808                           ;	Write Protection bit
  2809                           ;	WRT0 = OFF, Block 0 not write-protected
  2810                           ;	Write Protection bit
  2811                           ;	WRT1 = OFF, Block 1 not write-protected
  2812   30000A                     	org	3145738
  2813   30000A  03                 	db	3
  2814                           
  2815                           ;Config register CONFIG6H @ 0x30000B
  2816                           ;	Configuration Register Write Protection bit
  2817                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2818                           ;	Boot Block Write Protection bit
  2819                           ;	WRTB = OFF, Boot block not write-protected
  2820                           ;	Data EEPROM Write Protection bit
  2821                           ;	WRTD = OFF, Data EEPROM not write-protected
  2822   30000B                     	org	3145739
  2823   30000B  E0                 	db	224
  2824                           
  2825                           ;Config register CONFIG7L @ 0x30000C
  2826                           ;	Table Read Protection bit
  2827                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2828                           ;	Table Read Protection bit
  2829                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2830   30000C                     	org	3145740
  2831   30000C  03                 	db	3
  2832                           
  2833                           ;Config register CONFIG7H @ 0x30000D
  2834                           ;	Boot Block Table Read Protection bit
  2835                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2836   30000D                     	org	3145741
  2837   30000D  40                 	db	64
  2838                           tosu	equ	0xFFF
  2839                           tosh	equ	0xFFE
  2840                           tosl	equ	0xFFD
  2841                           stkptr	equ	0xFFC
  2842                           pclatu	equ	0xFFB
  2843                           pclath	equ	0xFFA
  2844                           pcl	equ	0xFF9
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           indf0	equ	0xFEF
  2852                           postinc0	equ	0xFEE
  2853                           postdec0	equ	0xFED
  2854                           preinc0	equ	0xFEC
  2855                           plusw0	equ	0xFEB
  2856                           fsr0h	equ	0xFEA
  2857                           fsr0l	equ	0xFE9
  2858                           wreg	equ	0xFE8
  2859                           indf1	equ	0xFE7
  2860                           postinc1	equ	0xFE6
  2861                           postdec1	equ	0xFE5
  2862                           preinc1	equ	0xFE4
  2863                           plusw1	equ	0xFE3
  2864                           fsr1h	equ	0xFE2
  2865                           fsr1l	equ	0xFE1
  2866                           bsr	equ	0xFE0
  2867                           indf2	equ	0xFDF
  2868                           postinc2	equ	0xFDE
  2869                           postdec2	equ	0xFDD
  2870                           preinc2	equ	0xFDC
  2871                           plusw2	equ	0xFDB
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    16
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      72
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    lcd_message@message	PTR unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[2]), STR_3(CODE[9]), STR_2(CODE[7]), STR_1(CODE[8]), 
		 -> keys(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_lcd_move_cursor
    _send_message->_packet_interim_amble
    _send_message->_packet_pre_post_amble
    _packet_pre_post_amble->_send
    _packet_interim_amble->_send
    _send->_delay
    _lcd_init->_lcd_move_cursor
    _lcd_move_cursor->_lcd_command
    _lcd_clear->_delay
    _lcd_backspace->_lcd_command
    _lcd_message->_lcd_char
    _lcd_char->_delay
    _lcd_command->_delay
    _delay->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_keypress

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   23173
                                             50 COMRAM     9     9      0
                        _keypad_init
                      _lcd_backspace
                          _lcd_clear
                           _lcd_init
                        _lcd_message
                    _lcd_move_cursor
                       _send_message
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_message                                         7     7      0    3481
                                             44 COMRAM     5     5      0
               _packet_interim_amble
              _packet_pre_post_amble
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_pre_post_amble                                2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_interim_amble                                 2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _send                                                 1     1      0    1091
                                             41 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    8911
                          _lcd_clear
                        _lcd_command
                        _lcd_message
                    _lcd_move_cursor
 ---------------------------------------------------------------------------------
 (1) _lcd_move_cursor                                      2     1      1    3209
                                             48 COMRAM     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0    1099
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _lcd_backspace                                        0     0      0    4603
                        _lcd_command
                        _lcd_message
 ---------------------------------------------------------------------------------
 (1) _lcd_message                                          2     0      2    1688
                                             43 COMRAM     2     0      2
                 _i2c_start_and_addr
                           _i2c_stop
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0    1172
                                             41 COMRAM     2     2      0
                              _delay
                        _i2c_data_tx
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          7     4      3    2915
                                             41 COMRAM     7     4      3
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_start_and_addr                                   1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_data_tx                                          1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                               12     8      4    1069
                                             29 COMRAM    12     8      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 11    11      0     300
                                              6 COMRAM    11    11      0
                           _keypress
 ---------------------------------------------------------------------------------
 (7) _keypress                                             6     6      0     135
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_init
   _lcd_backspace
     _lcd_command
       _delay
         ___lmul
       _i2c_data_tx
       _i2c_start_and_addr
       _i2c_stop
     _lcd_message
       _i2c_start_and_addr
       _i2c_stop
       _lcd_char
         _delay
         _i2c_data_tx
   _lcd_clear
     _delay
     _i2c_data_tx
     _i2c_start_and_addr
     _i2c_stop
   _lcd_init
     _lcd_clear
     _lcd_command
     _lcd_message
     _lcd_move_cursor
       _lcd_command
   _lcd_message
   _lcd_move_cursor
   _send_message
     _packet_interim_amble
       _send
         _delay
     _packet_pre_post_amble
       _send
     _send
   _system_init

 _ISR (ROOT)
   _keypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      48       1       57.1%
BITBIGSFRlh         19      0       0       9        0.0%
BITBIGSFRlllhll      F      0       0      15        0.0%
BITBIGSFRlllhll      D      0       0      14        0.0%
BITBIGSFRh           D      0       0       8        0.0%
BITBIGSFRlllllh      7      0       0      20        0.0%
BITBIGSFRllllhl      6      0       0      18        0.0%
BITBIGSFRllllhl      6      0       0      19        0.0%
BITBIGSFRlllhll      3      0       0      13        0.0%
BITBIGSFRlllhh       3      0       0      12        0.0%
BITBIGSFRllhhl       2      0       0      11        0.0%
BITBIGSFRllllhh      1      0       0      17        0.0%
BITBIGSFRllhhh       1      0       0      10        0.0%
BITBIGSFRlllhll      1      0       0      16        0.0%
BITBIGSFRllllll      1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      22        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Mar 23 14:43:55 2024

                  _SSPSTATbits 0FC7            __end_of_system_init 08C8                            l211 0A24  
                          l212 0A28                            l125 03FA                            l118 0322  
                          l225 0A0C                            l154 0548                            l219 0A36  
                          l229 0A16                            l158 059C                            l967 0A12  
                          u700 06B2                            _ISR 0008                            u630 07B4  
                          u640 07DC                            u637 07AA                            u670 09C2  
                          u647 07D2                            u680 09EC                            u840 0366  
                          wreg 0FE8                 lcd_char@letter 002B                           ?_ISR 0001  
                         l1323 080C                           l1333 051E                           l1341 0550  
                         l1319 07F8                           l1407 0954                           l1415 09A2  
                         l1521 0300                           l1427 09CC                           l1381 0794  
                         l1461 0684                           l1517 02F2                           l1509 02CE  
                         l1535 0344                           l1385 07BC                           l1457 065A  
                         l1563 03CA                           l1547 037E                           l1493 0292  
                         l1567 03D8                           l1479 0238                           STR_1 021A  
                         STR_2 0222                           STR_3 0211                           STR_4 0229  
                         _LATA 0F89                           _LATB 0F8A                  ??_i2c_data_tx 0012  
                         _main 022C                           _keys 003E                           _send 08C8  
                         fsr0h 0FEA                ??_lcd_backspace 0031                           indf0 0FEF  
                         fsr2h 0FDA                           fsr0l 0FE9                           indf2 0FDF  
                         fsr2l 0FD9                           btemp 0049                           prodh 0FF4  
                         prodl 0FF3                           start 00D8      i2c_start_and_addr@address 0012  
             ?_lcd_move_cursor 0031                   ___param_bank 0000                          ??_ISR 0007  
                lcd_command@lt 002A                  lcd_command@rs 002C                  lcd_command@rw 002B  
                        ?_main 0001                          ?_send 0001                          _T0CON 0FD5  
                        _T1CON 0FCD                          _T3CON 0FB1                          i2l149 00B4  
                        i2l239 045A                          _TMR0H 0FD7                          _TMR1H 0FCF  
                        _TMR0L 0FD6                          _TMR1L 0FCE                          _TMR3H 0FB3  
                        _TMR3L 0FB2                          _PORTB 0F81                          _TRISA 0F92  
                        _TRISB 0F93            ___lmul@multiplicand 0016                          _delay 04DA  
                 ?_keypad_init 0001                i2c_data_tx@data 0012                          main@i 0036  
                        tablat 0FF5                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          status 0FD8                          wtemp8 004A  
          __end_of_i2c_data_tx 0A34                __initialization 09EE                    _system_init 088E  
                 __end_of_main 03FE                   __end_of_send 0900          packet_interim_amble@i 002B  
             __end_of_i2c_stop 0A3E          _packet_pre_post_amble 099A                         ??_main 0033  
                       ??_send 002A                  __activetblptr 0002             _i2c_start_and_addr 0A08  
                       ?_delay 001E            ?_i2c_start_and_addr 0001                         i2l1153 0424  
                       i2l1171 04AE                         i2l1173 04B0                         i2l1291 004C  
                       i2l1287 0042                         _SSPADD 0FC8                         _SSPBUF 0FC9  
             __end_of_lcd_char 088E               __end_of_lcd_init 072C                         ___lmul 07E8  
         ??_i2c_start_and_addr 0012                         clear_0 09F4                         isa$std 0001  
             __end_of_keypress 04DA                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8        lcd_move_cursor@position 0031  
                   __accesstop 0080        __end_of__initialization 09FA                    _i2c_data_tx 0A22  
                ___rparam_used 0001                 __pcstackCOMRAM 0001                  __end_of_delay 05A6  
       ?_packet_pre_post_amble 0001                        ??_delay 0022                      ?_i2c_stop 0001  
              lcd_command@data 0030                        ?___lmul 0012                 ISR@current_row 0010  
               ___lmul@product 001A                  ?_send_message 0001                        i2u20_44 0410  
                      i2u20_45 040C                        i2u21_44 043A                        i2u21_45 0434  
                      i2u30_44 04CC                        i2u30_45 04C8                        i2u24_44 0478  
                      i2u24_45 0472                        i2u25_40 0486                        i2u50_40 0058  
                      i2u26_44 049C                        i2u26_45 0496                        i2u52_40 0064  
                      i2u29_40 04BC                        i2u57_40 0088                      ?_lcd_char 0001  
                    ?_lcd_init 0001                     ??_i2c_stop 0012            lcd_move_cursor@line 0032  
                    ?_keypress 0001          __end_of_lcd_backspace 0936                        __Hparam 0000  
                      __Lparam 0000              __end_of_lcd_clear 078C                   ?_system_init 0001  
                 __psmallconst 0200                 ??_send_message 002D                        __pcinit 09EE  
                      __ramtop 0200                        __ptext0 022C                        __ptext1 088E  
                      __ptext2 0644                        __ptext3 099A                        __ptext4 09C4  
                      __ptext5 08C8                        __ptext6 06B8                        __ptext7 0936  
                      __ptext8 072C                        __ptext9 0900                      _T0CONbits 0FD5  
                    _T1CONbits 0FCD                      _T3CONbits 0FB1                     ??_lcd_char 002A  
                   ??_lcd_init 0033           end_of_initialization 09FA           __end_of_keypad_array 0211  
                __Lmediumconst 0000                     ??_keypress 0001                        postinc0 0FEE  
                      postinc2 0FDE                      _TRISCbits 0F94             lcd_message@message 002C  
                 ?_i2c_data_tx 0001                  ??_lcd_command 002D                  ??_lcd_message 002E  
      ??_packet_pre_post_amble 002B                  send_message@i 0030                  send_message@j 002E  
               __end_of___lmul 083E               delay@timer_value 0022            start_initialization 09EE  
                  __end_of_ISR 00D8              ??_lcd_move_cursor 0032   __end_of_packet_interim_amble 09EE  
         __end_of_send_message 06B8                       ??___lmul 001A            __end_of_lcd_command 0644  
          __end_of_lcd_message 07E8                    __pbssCOMRAM 003C                  ??_keypad_init 0012  
              keypress@col_num 0006                      __pintcode 0008              ISR@is_key_pressed 0011  
                 _keypad_array 0201                      _lcd_clear 072C                    __smallconst 0200  
                     _LATCbits 0F8B            __end_of_keypad_init 099A                       _PIE1bits 0F9D  
                     _PIE2bits 0FA0                    _lcd_command 05A6                       _PIR1bits 0F9E  
                     _PIR2bits 0FA1                    _lcd_message 078C          keypress@col_key_press 0005  
                     _RCONbits 0FD0                     ?_lcd_clear 0001           _packet_interim_amble 09C4  
                   _ADCON1bits 0FC1                      main@i_896 003A                      main@i_898 0038  
            ___lmul@multiplier 0012                    _INTCON2bits 0FF1                       _i2c_stop 0A34  
                     __Hrparam 0000            keypress@current_row 0004                       __Lrparam 0000  
__end_of_packet_pre_post_amble 09C4          ?_packet_interim_amble 0001                _lcd_move_cursor 0936  
                 _send_message 0644                    _key_pressed 003C                       __ptext10 078C  
                     __ptext11 083E                       __ptext20 03FE                       __ptext12 05A6  
                     __ptext13 0A34                       __ptext14 0A08                       __ptext15 0A22  
                     __ptext16 04DA                       __ptext17 07E8                       __ptext18 096A  
                     _lcd_char 083E                    _keypad_init 096A                       _lcd_init 06B8  
               _message_length 003D                       _keypress 03FE                  _lcd_backspace 0900  
   __end_of_i2c_start_and_addr 0A22                       isa$xinst 0000                       int$flags 0049  
            delay@milliseconds 001E         packet_pre_post_amble@i 002B                    ??_lcd_clear 002A  
                  _OSCTUNEbits 0F9B                     _INTCONbits 0FF2                       intlevel2 0000  
                     send@data 002A                 ?_lcd_backspace 0001                     _OSCCONbits 0FD3  
      __end_of_lcd_move_cursor 096A                  ??_system_init 0012         ??_packet_interim_amble 002B  
                  _SSPCON1bits 0FC6                    _SSPCON2bits 0FC5                   ?_lcd_command 002A  
                 ?_lcd_message 002C  
