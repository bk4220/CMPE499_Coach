

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Mar 25 22:19:34 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	18F2221
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 18/08/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2221 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     
    70                           	psect	smallconst
    71   000200                     __psmallconst:
    72                           	callstack 0
    73   000200  00                 	db	0
    74   000201                     _keypad_array:
    75                           	callstack 0
    76   000201  31                 	db	49
    77   000202  32                 	db	50
    78   000203  33                 	db	51
    79   000204  41                 	db	65
    80   000205  34                 	db	52
    81   000206  35                 	db	53
    82   000207  36                 	db	54
    83   000208  42                 	db	66
    84   000209  37                 	db	55
    85   00020A  38                 	db	56
    86   00020B  39                 	db	57
    87   00020C  43                 	db	67
    88   00020D  2A                 	db	42
    89   00020E  30                 	db	48
    90   00020F  23                 	db	35
    91   000210  44                 	db	68
    92   000211                     __end_of_keypad_array:
    93                           	callstack 0
    94   000000                     _SSPCON1bits	set	4038
    95   000000                     _SSPADD	set	4040
    96   000000                     _SSPSTATbits	set	4039
    97   000000                     _TMR3L	set	4018
    98   000000                     _TMR3H	set	4019
    99   000000                     _TMR1L	set	4046
   100   000000                     _TMR1H	set	4047
   101   000000                     _T0CONbits	set	4053
   102   000000                     _T3CONbits	set	4017
   103   000000                     _T1CONbits	set	4045
   104   000000                     _PORTB	set	3969
   105   000000                     _LATA	set	3977
   106   000000                     _LATB	set	3978
   107   000000                     _PIE1bits	set	3997
   108   000000                     _T1CON	set	4045
   109   000000                     _TMR0L	set	4054
   110   000000                     _TMR0H	set	4055
   111   000000                     _INTCONbits	set	4082
   112   000000                     _INTCON2bits	set	4081
   113   000000                     _PIE2bits	set	4000
   114   000000                     _T3CON	set	4017
   115   000000                     _SSPCON2bits	set	4037
   116   000000                     _SSPBUF	set	4041
   117   000000                     _PIR1bits	set	3998
   118   000000                     _RCONbits	set	4048
   119   000000                     _OSCCONbits	set	4051
   120   000000                     _TRISA	set	3986
   121   000000                     _TRISB	set	3987
   122   000000                     _TRISCbits	set	3988
   123   000000                     _OSCTUNEbits	set	3995
   124   000000                     _LATCbits	set	3979
   125   000000                     _PIR2bits	set	4001
   126   000000                     _ADCON1bits	set	4033
   127   000000                     _T0CON	set	4053
   128   000211                     STR_3:
   129   000211  43                 	db	67	;'C'
   130   000212  61                 	db	97	;'a'
   131   000213  70                 	db	112	;'p'
   132   000214  73                 	db	115	;'s'
   133   000215  74                 	db	116	;'t'
   134   000216  6F                 	db	111	;'o'
   135   000217  6E                 	db	110	;'n'
   136   000218  65                 	db	101	;'e'
   137   000219  00                 	db	0
   138   00021A                     STR_1:
   139   00021A  53                 	db	83	;'S'
   140   00021B  65                 	db	101	;'e'
   141   00021C  6E                 	db	110	;'n'
   142   00021D  64                 	db	100	;'d'
   143   00021E  69                 	db	105	;'i'
   144   00021F  6E                 	db	110	;'n'
   145   000220  67                 	db	103	;'g'
   146   000221  00                 	db	0
   147   000222                     STR_2:
   148   000222  53                 	db	83	;'S'
   149   000223  65                 	db	101	;'e'
   150   000224  6E                 	db	110	;'n'
   151   000225  69                 	db	105	;'i'
   152   000226  6F                 	db	111	;'o'
   153   000227  72                 	db	114	;'r'
   154   000228  00                 	db	0
   155   000229                     STR_4:
   156   000229  20                 	db	32
   157   00022A  00                 	db	0
   158   00022B  00                 	db	0	; dummy byte at the end
   159   000000                     
   160                           ; #config settings
   161                           
   162                           	psect	cinit
   163   0009EE                     __pcinit:
   164                           	callstack 0
   165   0009EE                     start_initialization:
   166                           	callstack 0
   167   0009EE                     __initialization:
   168                           	callstack 0
   169                           
   170                           ; Clear objects allocated to COMRAM (13 bytes)
   171   0009EE  EE00  F03C         	lfsr	0,__pbssCOMRAM
   172   0009F2  0E0D               	movlw	13
   173   0009F4                     clear_0:
   174   0009F4  6AEE               	clrf	postinc0,c
   175   0009F6  06E8               	decf	wreg,f,c
   176   0009F8  E1FD               	bnz	clear_0
   177   0009FA                     end_of_initialization:
   178                           	callstack 0
   179   0009FA                     __end_of__initialization:
   180                           	callstack 0
   181   0009FA  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   182   0009FC  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   183   0009FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184   000A00  6EF8               	movwf	tblptru,c
   185   000A02  0100               	movlb	0
   186   000A04  EF16  F001         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189   00003C                     __pbssCOMRAM:
   190                           	callstack 0
   191   00003C                     _key_pressed:
   192                           	callstack 0
   193   00003C                     	ds	1
   194   00003D                     _message_length:
   195                           	callstack 0
   196   00003D                     	ds	1
   197   00003E                     _keys:
   198                           	callstack 0
   199   00003E                     	ds	11
   200                           
   201                           	psect	cstackCOMRAM
   202   000001                     __pcstackCOMRAM:
   203                           	callstack 0
   204   000001                     ??_keypress:
   205   000001                     
   206                           ; 1 bytes @ 0x0
   207   000001                     	ds	3
   208   000004                     keypress@current_row:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x3
   212   000004                     	ds	1
   213   000005                     keypress@col_key_press:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x4
   217   000005                     	ds	1
   218   000006                     keypress@col_num:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x5
   222   000006                     	ds	1
   223   000007                     ??_ISR:
   224                           
   225                           ; 1 bytes @ 0x6
   226   000007                     	ds	9
   227   000010                     ISR@current_row:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0xF
   231   000010                     	ds	1
   232   000011                     ISR@is_key_pressed:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0x10
   236   000011                     	ds	1
   237   000012                     ?___lmul:
   238                           	callstack 0
   239   000012                     i2c_data_tx@data:
   240                           	callstack 0
   241   000012                     i2c_start_and_addr@address:
   242                           	callstack 0
   243   000012                     ___lmul@multiplier:
   244                           	callstack 0
   245                           
   246                           ; 4 bytes @ 0x11
   247   000012                     	ds	4
   248   000016                     ___lmul@multiplicand:
   249                           	callstack 0
   250                           
   251                           ; 4 bytes @ 0x15
   252   000016                     	ds	4
   253   00001A                     ___lmul@product:
   254                           	callstack 0
   255                           
   256                           ; 4 bytes @ 0x19
   257   00001A                     	ds	4
   258   00001E                     delay@milliseconds:
   259                           	callstack 0
   260                           
   261                           ; 4 bytes @ 0x1D
   262   00001E                     	ds	4
   263   000022                     delay@timer_value:
   264                           	callstack 0
   265                           
   266                           ; 8 bytes @ 0x21
   267   000022                     	ds	8
   268   00002A                     ??_lcd_char:
   269   00002A                     send@data:
   270                           	callstack 0
   271   00002A                     lcd_command@lt:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x29
   275   00002A                     	ds	1
   276   00002B                     lcd_command@rw:
   277                           	callstack 0
   278   00002B                     lcd_char@letter:
   279                           	callstack 0
   280   00002B                     packet_pre_post_amble@i:
   281                           	callstack 0
   282   00002B                     packet_interim_amble@i:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x2A
   286   00002B                     	ds	1
   287   00002C                     lcd_command@rs:
   288                           	callstack 0
   289   00002C                     lcd_message@message:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x2B
   293   00002C                     	ds	1
   294   00002D                     ??_send_message:
   295   00002D                     ??_lcd_command:
   296                           
   297                           ; 1 bytes @ 0x2C
   298   00002D                     	ds	1
   299   00002E                     send_message@j:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x2D
   303   00002E                     	ds	2
   304   000030                     lcd_command@data:
   305                           	callstack 0
   306   000030                     send_message@i:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x2F
   310   000030                     	ds	1
   311   000031                     lcd_move_cursor@position:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x30
   315   000031                     	ds	1
   316   000032                     lcd_move_cursor@line:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x31
   320   000032                     	ds	1
   321   000033                     ??_main:
   322                           
   323                           ; 1 bytes @ 0x32
   324   000033                     	ds	3
   325   000036                     main@i:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x35
   329   000036                     	ds	2
   330   000038                     main@i_898:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x37
   334   000038                     	ds	2
   335   00003A                     main@i_896:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x39
   339   00003A                     	ds	2
   340                           
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 46 in file "main.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  i               2   55[COMRAM] int 
   351 ;;  i               2   57[COMRAM] int 
   352 ;;  i               2   53[COMRAM] int 
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1
   362 ;;      Params:         0       0       0
   363 ;;      Locals:         6       0       0
   364 ;;      Temps:          3       0       0
   365 ;;      Totals:         9       0       0
   366 ;;Total ram usage:        9 bytes
   367 ;; Hardware stack levels required when called: 7
   368 ;; This function calls:
   369 ;;		_keypad_init
   370 ;;		_lcd_backspace
   371 ;;		_lcd_clear
   372 ;;		_lcd_init
   373 ;;		_lcd_message
   374 ;;		_lcd_move_cursor
   375 ;;		_send_message
   376 ;;		_system_init
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text0
   383   00022C                     __ptext0:
   384                           	callstack 0
   385   00022C                     _main:
   386                           	callstack 24
   387                           
   388                           ;main.c: 49:     system_init();
   389                           
   390                           ;incstack = 0
   391   00022C  EC45  F004         	call	_system_init	;wreg free
   392                           
   393                           ;main.c: 51:     lcd_init();
   394   000230  EC5A  F003         	call	_lcd_init	;wreg free
   395                           
   396                           ;main.c: 52:     keypad_init();
   397   000234  ECB3  F004         	call	_keypad_init	;wreg free
   398   000238                     l1477:
   399                           
   400                           ;main.c: 56:     {;main.c: 58:         if(key_pressed && keys[message_length-1] != '*' &
      +                          & keys[message_length-1] != 'D' && keys[message_length-1] != '#' && keys[message_length-
      +                          1] != 'A')
   401   000238  503C               	movf	_key_pressed^0,w,c
   402   00023A  B4D8               	btfsc	status,2,c
   403   00023C  D02A               	goto	l1491
   404   00023E  503D               	movf	_message_length^0,w,c
   405   000240  0F3D               	addlw	low (_keys+255)
   406   000242  6ED9               	movwf	fsr2l,c
   407   000244  6ADA               	clrf	fsr2h,c
   408   000246  0E2A               	movlw	42
   409   000248  18DE               	xorwf	postinc2,w,c
   410   00024A  B4D8               	btfsc	status,2,c
   411   00024C  D022               	goto	l1491
   412   00024E  503D               	movf	_message_length^0,w,c
   413   000250  0F3D               	addlw	low (_keys+255)
   414   000252  6ED9               	movwf	fsr2l,c
   415   000254  6ADA               	clrf	fsr2h,c
   416   000256  0E44               	movlw	68
   417   000258  18DE               	xorwf	postinc2,w,c
   418   00025A  B4D8               	btfsc	status,2,c
   419   00025C  D01A               	goto	l1491
   420   00025E  503D               	movf	_message_length^0,w,c
   421   000260  0F3D               	addlw	low (_keys+255)
   422   000262  6ED9               	movwf	fsr2l,c
   423   000264  6ADA               	clrf	fsr2h,c
   424   000266  0E23               	movlw	35
   425   000268  18DE               	xorwf	postinc2,w,c
   426   00026A  B4D8               	btfsc	status,2,c
   427   00026C  D012               	goto	l1491
   428   00026E  503D               	movf	_message_length^0,w,c
   429   000270  0F3D               	addlw	low (_keys+255)
   430   000272  6ED9               	movwf	fsr2l,c
   431   000274  6ADA               	clrf	fsr2h,c
   432   000276  0E41               	movlw	65
   433   000278  18DE               	xorwf	postinc2,w,c
   434   00027A  B4D8               	btfsc	status,2,c
   435   00027C  D00A               	goto	l1491
   436                           
   437                           ;main.c: 59:         {;main.c: 60:             lcd_message(keys + message_length-1);
   438   00027E  503D               	movf	_message_length^0,w,c
   439   000280  0F3D               	addlw	low (_keys+-1)
   440   000282  6E33               	movwf	??_main^0,c
   441   000284  C033  F02C         	movff	??_main,lcd_message@message
   442   000288  6A2D               	clrf	(lcd_message@message+1)^0,c
   443   00028A  ECC4  F003         	call	_lcd_message	;wreg free
   444                           
   445                           ;main.c: 62:             key_pressed = 0;
   446   00028E  0E00               	movlw	0
   447   000290  6E3C               	movwf	_key_pressed^0,c
   448   000292                     l1491:
   449                           
   450                           ;main.c: 64:         if(key_pressed && keys[message_length-1] == '*' && message_length >
      +                           1)
   451   000292  503C               	movf	_key_pressed^0,w,c
   452   000294  B4D8               	btfsc	status,2,c
   453   000296  D01B               	goto	l1507
   454   000298  503D               	movf	_message_length^0,w,c
   455   00029A  0F3D               	addlw	low (_keys+255)
   456   00029C  6ED9               	movwf	fsr2l,c
   457   00029E  6ADA               	clrf	fsr2h,c
   458   0002A0  0E2A               	movlw	42
   459   0002A2  18DE               	xorwf	postinc2,w,c
   460   0002A4  A4D8               	btfss	status,2,c
   461   0002A6  D013               	goto	l1507
   462   0002A8  0E01               	movlw	1
   463   0002AA  643D               	cpfsgt	_message_length^0,c
   464   0002AC  D010               	goto	l1507
   465                           
   466                           ;main.c: 65:         {;main.c: 66:             lcd_backspace();
   467   0002AE  EC7E  F004         	call	_lcd_backspace	;wreg free
   468                           
   469                           ;main.c: 67:             keys[message_length - 1] = '\0';
   470   0002B2  503D               	movf	_message_length^0,w,c
   471   0002B4  0F3D               	addlw	low (_keys+255)
   472   0002B6  6ED9               	movwf	fsr2l,c
   473   0002B8  6ADA               	clrf	fsr2h,c
   474   0002BA  6ADF               	clrf	indf2,c
   475                           
   476                           ;main.c: 68:             keys[message_length - 2] = '\0';
   477   0002BC  503D               	movf	_message_length^0,w,c
   478   0002BE  0F3C               	addlw	low (_keys+254)
   479   0002C0  6ED9               	movwf	fsr2l,c
   480   0002C2  6ADA               	clrf	fsr2h,c
   481   0002C4  6ADF               	clrf	indf2,c
   482                           
   483                           ;main.c: 69:             message_length -= 2;
   484   0002C6  0E02               	movlw	2
   485   0002C8  5E3D               	subwf	_message_length^0,f,c
   486                           
   487                           ;main.c: 70:             key_pressed = 0;
   488   0002CA  0E00               	movlw	0
   489   0002CC  6E3C               	movwf	_key_pressed^0,c
   490   0002CE                     l1507:
   491                           
   492                           ;main.c: 72:         if(key_pressed && keys[message_length-1] == 'D')
   493   0002CE  503C               	movf	_key_pressed^0,w,c
   494   0002D0  B4D8               	btfsc	status,2,c
   495   0002D2  D027               	goto	l118
   496   0002D4  503D               	movf	_message_length^0,w,c
   497   0002D6  0F3D               	addlw	low (_keys+255)
   498   0002D8  6ED9               	movwf	fsr2l,c
   499   0002DA  6ADA               	clrf	fsr2h,c
   500   0002DC  0E44               	movlw	68
   501   0002DE  18DE               	xorwf	postinc2,w,c
   502   0002E0  A4D8               	btfss	status,2,c
   503   0002E2  D01F               	goto	l118
   504                           
   505                           ;main.c: 73:         {;main.c: 74:             lcd_clear();
   506   0002E4  EC94  F003         	call	_lcd_clear	;wreg free
   507                           
   508                           ;main.c: 76:             for(int i = 0; i < message_length; i++)
   509   0002E8  0E00               	movlw	0
   510   0002EA  6E37               	movwf	(main@i+1)^0,c
   511   0002EC  0E00               	movlw	0
   512   0002EE  6E36               	movwf	main@i^0,c
   513   0002F0  D007               	goto	l1519
   514   0002F2                     l1515:
   515                           
   516                           ;main.c: 77:             {;main.c: 78:                 keys[i] = '\0';
   517   0002F2  5036               	movf	main@i^0,w,c
   518   0002F4  0F3E               	addlw	low _keys
   519   0002F6  6ED9               	movwf	fsr2l,c
   520   0002F8  6ADA               	clrf	fsr2h,c
   521   0002FA  6ADF               	clrf	indf2,c
   522                           
   523                           ;main.c: 79:             }
   524   0002FC  4A36               	infsnz	main@i^0,f,c
   525   0002FE  2A37               	incf	(main@i+1)^0,f,c
   526   000300                     l1519:
   527   000300  503D               	movf	_message_length^0,w,c
   528   000302  6E33               	movwf	??_main^0,c
   529   000304  6A34               	clrf	(??_main+1)^0,c
   530   000306  5033               	movf	??_main^0,w,c
   531   000308  5C36               	subwf	main@i^0,w,c
   532   00030A  5037               	movf	(main@i+1)^0,w,c
   533   00030C  0A80               	xorlw	128
   534   00030E  6E35               	movwf	(??_main+2)^0,c
   535   000310  5034               	movf	(??_main+1)^0,w,c
   536   000312  0A80               	xorlw	128
   537   000314  5835               	subwfb	(??_main+2)^0,w,c
   538   000316  A0D8               	btfss	status,0,c
   539   000318  D7EC               	goto	l1515
   540                           
   541                           ;main.c: 81:             message_length = 0;
   542   00031A  0E00               	movlw	0
   543   00031C  6E3D               	movwf	_message_length^0,c
   544                           
   545                           ;main.c: 82:             key_pressed = 0;
   546   00031E  0E00               	movlw	0
   547   000320  6E3C               	movwf	_key_pressed^0,c
   548   000322                     l118:
   549                           
   550                           ;main.c: 85:         if(key_pressed && keys[message_length-1] == 'A')
   551   000322  503C               	movf	_key_pressed^0,w,c
   552   000324  B4D8               	btfsc	status,2,c
   553   000326  D029               	goto	l1543
   554   000328  503D               	movf	_message_length^0,w,c
   555   00032A  0F3D               	addlw	low (_keys+255)
   556   00032C  6ED9               	movwf	fsr2l,c
   557   00032E  6ADA               	clrf	fsr2h,c
   558   000330  0E41               	movlw	65
   559   000332  18DE               	xorwf	postinc2,w,c
   560   000334  A4D8               	btfss	status,2,c
   561   000336  D021               	goto	l1543
   562                           
   563                           ;main.c: 86:         {;main.c: 89:             for(int i = 0; i < 6; i++)
   564   000338  0E00               	movlw	0
   565   00033A  6E3B               	movwf	(main@i_896+1)^0,c
   566   00033C  0E00               	movlw	0
   567   00033E  6E3A               	movwf	main@i_896^0,c
   568   000340                     l1531:
   569                           
   570                           ;main.c: 90:             {;main.c: 91:                 keys[i] = '0' + i;
   571   000340  503A               	movf	main@i_896^0,w,c
   572   000342  0F3E               	addlw	low _keys
   573   000344  6ED9               	movwf	fsr2l,c
   574   000346  6ADA               	clrf	fsr2h,c
   575   000348  503A               	movf	main@i_896^0,w,c
   576   00034A  0F30               	addlw	48
   577   00034C  6EDF               	movwf	indf2,c
   578                           
   579                           ;main.c: 92:             }
   580   00034E  4A3A               	infsnz	main@i_896^0,f,c
   581   000350  2A3B               	incf	(main@i_896+1)^0,f,c
   582   000352  BE3B               	btfsc	(main@i_896+1)^0,7,c
   583   000354  D7F5               	goto	l1531
   584   000356  503B               	movf	(main@i_896+1)^0,w,c
   585   000358  E104               	bnz	u840
   586   00035A  0E06               	movlw	6
   587   00035C  5C3A               	subwf	main@i_896^0,w,c
   588   00035E  A0D8               	btfss	status,0,c
   589   000360  D7EF               	goto	l1531
   590   000362                     u840:
   591                           
   592                           ;main.c: 93:             lcd_message(keys + message_length-1);
   593   000362  503D               	movf	_message_length^0,w,c
   594   000364  0F3D               	addlw	low (_keys+-1)
   595   000366  6E33               	movwf	??_main^0,c
   596   000368  C033  F02C         	movff	??_main,lcd_message@message
   597   00036C  6A2D               	clrf	(lcd_message@message+1)^0,c
   598   00036E  ECC4  F003         	call	_lcd_message	;wreg free
   599                           
   600                           ;main.c: 95:             message_length = 6;
   601   000372  0E06               	movlw	6
   602   000374  6E3D               	movwf	_message_length^0,c
   603                           
   604                           ;main.c: 96:             key_pressed = 0;
   605   000376  0E00               	movlw	0
   606   000378  6E3C               	movwf	_key_pressed^0,c
   607   00037A                     l1543:
   608                           
   609                           ;main.c: 100:         if(key_pressed && keys[message_length-1] == '#')
   610   00037A  503C               	movf	_key_pressed^0,w,c
   611   00037C  B4D8               	btfsc	status,2,c
   612   00037E  D03B               	goto	l125
   613   000380  503D               	movf	_message_length^0,w,c
   614   000382  0F3D               	addlw	low (_keys+255)
   615   000384  6ED9               	movwf	fsr2l,c
   616   000386  6ADA               	clrf	fsr2h,c
   617   000388  0E23               	movlw	35
   618   00038A  18DE               	xorwf	postinc2,w,c
   619   00038C  A4D8               	btfss	status,2,c
   620   00038E  D033               	goto	l125
   621                           
   622                           ;main.c: 101:         {;main.c: 102:             lcd_move_cursor(1,0);
   623   000390  0E00               	movlw	0
   624   000392  6E31               	movwf	lcd_move_cursor@position^0,c
   625   000394  0E01               	movlw	1
   626   000396  EC99  F004         	call	_lcd_move_cursor
   627                           
   628                           ;main.c: 103:             lcd_message("Sending");
   629   00039A  0E1A               	movlw	low STR_1
   630   00039C  6E2C               	movwf	lcd_message@message^0,c
   631   00039E  502C               	movf	lcd_message@message^0,w,c
   632   0003A0  A4D8               	btfss	status,2,c
   633   0003A2  0E02               	movlw	high __smallconst
   634   0003A4  6E2D               	movwf	(lcd_message@message+1)^0,c
   635   0003A6  ECC4  F003         	call	_lcd_message	;wreg free
   636                           
   637                           ;main.c: 104:             keys[message_length - 1] = '\0';
   638   0003AA  503D               	movf	_message_length^0,w,c
   639   0003AC  0F3D               	addlw	low (_keys+255)
   640   0003AE  6ED9               	movwf	fsr2l,c
   641   0003B0  6ADA               	clrf	fsr2h,c
   642   0003B2  6ADF               	clrf	indf2,c
   643                           
   644                           ;main.c: 105:             send_message();
   645   0003B4  EC20  F003         	call	_send_message	;wreg free
   646                           
   647                           ;main.c: 106:             lcd_clear();
   648   0003B8  EC94  F003         	call	_lcd_clear	;wreg free
   649                           
   650                           ;main.c: 107:             for(int i = 0; i < message_length; i++)
   651   0003BC  0E00               	movlw	0
   652   0003BE  6E39               	movwf	(main@i_898+1)^0,c
   653   0003C0  0E00               	movlw	0
   654   0003C2  6E38               	movwf	main@i_898^0,c
   655   0003C4  D007               	goto	l1563
   656   0003C6                     l1559:
   657                           
   658                           ;main.c: 108:             {;main.c: 109:                 keys[i] = '\0';
   659   0003C6  5038               	movf	main@i_898^0,w,c
   660   0003C8  0F3E               	addlw	low _keys
   661   0003CA  6ED9               	movwf	fsr2l,c
   662   0003CC  6ADA               	clrf	fsr2h,c
   663   0003CE  6ADF               	clrf	indf2,c
   664                           
   665                           ;main.c: 110:             }
   666   0003D0  4A38               	infsnz	main@i_898^0,f,c
   667   0003D2  2A39               	incf	(main@i_898+1)^0,f,c
   668   0003D4                     l1563:
   669   0003D4  503D               	movf	_message_length^0,w,c
   670   0003D6  6E33               	movwf	??_main^0,c
   671   0003D8  6A34               	clrf	(??_main+1)^0,c
   672   0003DA  5033               	movf	??_main^0,w,c
   673   0003DC  5C38               	subwf	main@i_898^0,w,c
   674   0003DE  5039               	movf	(main@i_898+1)^0,w,c
   675   0003E0  0A80               	xorlw	128
   676   0003E2  6E35               	movwf	(??_main+2)^0,c
   677   0003E4  5034               	movf	(??_main+1)^0,w,c
   678   0003E6  0A80               	xorlw	128
   679   0003E8  5835               	subwfb	(??_main+2)^0,w,c
   680   0003EA  A0D8               	btfss	status,0,c
   681   0003EC  D7EC               	goto	l1559
   682                           
   683                           ;main.c: 111:             key_pressed = 0;
   684   0003EE  0E00               	movlw	0
   685   0003F0  6E3C               	movwf	_key_pressed^0,c
   686                           
   687                           ;main.c: 112:             message_length = 0;
   688   0003F2  0E00               	movlw	0
   689   0003F4  6E3D               	movwf	_message_length^0,c
   690   0003F6                     l125:
   691   0003F6  0003               	sleep		;# 
   692   0003F8  D71F               	goto	l1477
   693   0003FA                     __end_of_main:
   694                           	callstack 0
   695                           
   696 ;; *************** function _system_init *****************
   697 ;; Defined at:
   698 ;;		line 408 in file "main.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1
   712 ;;      Params:         0       0       0
   713 ;;      Locals:         0       0       0
   714 ;;      Temps:          0       0       0
   715 ;;      Totals:         0       0       0
   716 ;;Total ram usage:        0 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; Hardware stack levels required when called: 2
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_main
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text1
   727   00088A                     __ptext1:
   728                           	callstack 0
   729   00088A                     _system_init:
   730                           	callstack 28
   731                           
   732                           ;main.c: 411:     OSCCONbits.SCS = 0;
   733                           
   734                           ;incstack = 0
   735   00088A  0EFC               	movlw	-4
   736   00088C  16D3               	andwf	211,f,c	;volatile
   737                           
   738                           ;main.c: 412:     OSCCONbits.IDLEN = 1;
   739   00088E  8ED3               	bsf	211,7,c	;volatile
   740                           
   741                           ;main.c: 413:     OSCCONbits.IRCF = 7;
   742   000890  0E70               	movlw	112
   743   000892  12D3               	iorwf	211,f,c	;volatile
   744                           
   745                           ;main.c: 414:     OSCTUNEbits.PLLEN = 1;
   746   000894  8C9B               	bsf	155,6,c	;volatile
   747                           
   748                           ;main.c: 417:     INTCONbits.GIE = 1;
   749   000896  8EF2               	bsf	242,7,c	;volatile
   750                           
   751                           ;main.c: 418:     INTCONbits.PEIE = 1;
   752   000898  8CF2               	bsf	242,6,c	;volatile
   753                           
   754                           ;main.c: 420:     INTCON2bits.RBPU = 0;
   755   00089A  9EF1               	bcf	241,7,c	;volatile
   756                           
   757                           ;main.c: 424:     RCONbits.IPEN = 0;
   758   00089C  9ED0               	bcf	208,7,c	;volatile
   759                           
   760                           ;main.c: 427:     LATCbits.LC7 = 1;
   761   00089E  8E8B               	bsf	139,7,c	;volatile
   762                           
   763                           ;main.c: 428:     TRISCbits.RC7 = 0;
   764   0008A0  9E94               	bcf	148,7,c	;volatile
   765                           
   766                           ;main.c: 429:     TRISB = TRISB & 0xF0;
   767   0008A2  5093               	movf	147,w,c	;volatile
   768   0008A4  0BF0               	andlw	240
   769   0008A6  6E93               	movwf	147,c	;volatile
   770                           
   771                           ;main.c: 432:     SSPSTATbits.SMP = 1;
   772   0008A8  8EC7               	bsf	199,7,c	;volatile
   773                           
   774                           ;main.c: 433:     SSPSTATbits.CKE = 0;
   775   0008AA  9CC7               	bcf	199,6,c	;volatile
   776                           
   777                           ;main.c: 434:     SSPADD = 0x50;
   778   0008AC  0E50               	movlw	80
   779   0008AE  6EC8               	movwf	200,c	;volatile
   780                           
   781                           ;main.c: 435:     SSPCON1bits.SSPEN = 1;
   782   0008B0  8AC6               	bsf	198,5,c	;volatile
   783                           
   784                           ;main.c: 436:     SSPCON1bits.SSPM = 0b1000;
   785   0008B2  50C6               	movf	198,w,c	;volatile
   786   0008B4  0BF0               	andlw	-16
   787   0008B6  0908               	iorlw	8
   788   0008B8  6EC6               	movwf	198,c	;volatile
   789                           
   790                           ;main.c: 437:     TRISCbits.RC3 = 1;
   791   0008BA  8694               	bsf	148,3,c	;volatile
   792                           
   793                           ;main.c: 438:     TRISCbits.RC4 = 1;
   794   0008BC  8894               	bsf	148,4,c	;volatile
   795                           
   796                           ;main.c: 441:     keys[10] = '\0';
   797   0008BE  0E00               	movlw	0
   798   0008C0  6E48               	movwf	(_keys+10)^0,c
   799   0008C2  0012               	return		;funcret
   800   0008C4                     __end_of_system_init:
   801                           	callstack 0
   802                           
   803 ;; *************** function _send_message *****************
   804 ;; Defined at:
   805 ;;		line 176 in file "main.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  j               2   45[COMRAM] int 
   810 ;;  i               2   47[COMRAM] int 
   811 ;;  send_cnt        2    0        int 
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : 0/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMRAM   BANK0   BANK1
   821 ;;      Params:         0       0       0
   822 ;;      Locals:         4       0       0
   823 ;;      Temps:          1       0       0
   824 ;;      Totals:         5       0       0
   825 ;;Total ram usage:        5 bytes
   826 ;; Hardware stack levels used: 1
   827 ;; Hardware stack levels required when called: 6
   828 ;; This function calls:
   829 ;;		_packet_interim_amble
   830 ;;		_packet_pre_post_amble
   831 ;;		_send
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text2
   838   000640                     __ptext2:
   839                           	callstack 0
   840   000640                     _send_message:
   841                           	callstack 24
   842                           
   843                           ;main.c: 178:     int i = 0;
   844                           
   845                           ;incstack = 0
   846   000640  0E00               	movlw	0
   847   000642  6E31               	movwf	(send_message@i+1)^0,c
   848   000644  0E00               	movlw	0
   849   000646  6E30               	movwf	send_message@i^0,c
   850                           
   851                           ;main.c: 180:     packet_pre_post_amble();
   852   000648  ECCB  F004         	call	_packet_pre_post_amble	;wreg free
   853                           
   854                           ;main.c: 182:     for(int j = 0; j < 7; j++)
   855   00064C  0E00               	movlw	0
   856   00064E  6E2F               	movwf	(send_message@j+1)^0,c
   857   000650  0E00               	movlw	0
   858   000652  6E2E               	movwf	send_message@j^0,c
   859   000654  D015               	goto	l1459
   860   000656                     l1455:
   861                           
   862                           ;main.c: 185:         {;main.c: 186:             send(keys[i] & 0x0F);
   863   000656  5030               	movf	send_message@i^0,w,c
   864   000658  0F3E               	addlw	low _keys
   865   00065A  6ED9               	movwf	fsr2l,c
   866   00065C  6ADA               	clrf	fsr2h,c
   867   00065E  50DF               	movf	indf2,w,c
   868   000660  0B0F               	andlw	15
   869   000662  EC62  F004         	call	_send
   870                           
   871                           ;main.c: 187:             send((keys[i] & 0xF0)>> 4);
   872   000666  5030               	movf	send_message@i^0,w,c
   873   000668  0F3E               	addlw	low _keys
   874   00066A  6ED9               	movwf	fsr2l,c
   875   00066C  6ADA               	clrf	fsr2h,c
   876   00066E  50DF               	movf	indf2,w,c
   877   000670  6E2D               	movwf	??_send_message^0,c
   878   000672  382D               	swapf	??_send_message^0,w,c
   879   000674  0B0F               	andlw	15
   880   000676  0B0F               	andlw	15
   881   000678  EC62  F004         	call	_send
   882                           
   883                           ;main.c: 188:             i++;
   884   00067C  4A30               	infsnz	send_message@i^0,f,c
   885   00067E  2A31               	incf	(send_message@i+1)^0,f,c
   886   000680                     l1459:
   887                           
   888                           ;main.c: 184:         while(keys[i] != '\0')
   889   000680  5030               	movf	send_message@i^0,w,c
   890   000682  0F3E               	addlw	low _keys
   891   000684  6ED9               	movwf	fsr2l,c
   892   000686  6ADA               	clrf	fsr2h,c
   893   000688  50DF               	movf	indf2,w,c
   894   00068A  A4D8               	btfss	status,2,c
   895   00068C  D7E4               	goto	l1455
   896                           
   897                           ;main.c: 190:         packet_interim_amble();
   898   00068E  ECE1  F004         	call	_packet_interim_amble	;wreg free
   899                           
   900                           ;main.c: 191:         i = 0;
   901   000692  0E00               	movlw	0
   902   000694  6E31               	movwf	(send_message@i+1)^0,c
   903   000696  0E00               	movlw	0
   904   000698  6E30               	movwf	send_message@i^0,c
   905                           
   906                           ;main.c: 192:     }
   907   00069A  4A2E               	infsnz	send_message@j^0,f,c
   908   00069C  2A2F               	incf	(send_message@j+1)^0,f,c
   909   00069E  BE2F               	btfsc	(send_message@j+1)^0,7,c
   910   0006A0  D7EF               	goto	l1459
   911   0006A2  502F               	movf	(send_message@j+1)^0,w,c
   912   0006A4  E104               	bnz	u700
   913   0006A6  0E07               	movlw	7
   914   0006A8  5C2E               	subwf	send_message@j^0,w,c
   915   0006AA  A0D8               	btfss	status,0,c
   916   0006AC  D7E9               	goto	l1459
   917   0006AE                     u700:
   918                           
   919                           ;main.c: 193:     packet_pre_post_amble();
   920   0006AE  ECCB  F004         	call	_packet_pre_post_amble	;wreg free
   921   0006B2  0012               	return		;funcret
   922   0006B4                     __end_of_send_message:
   923                           	callstack 0
   924                           
   925 ;; *************** function _packet_pre_post_amble *****************
   926 ;; Defined at:
   927 ;;		line 196 in file "main.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;		None
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  i               2   42[COMRAM] int 
   932 ;; Return value:  Size  Location     Type
   933 ;;                  1    wreg      void 
   934 ;; Registers used:
   935 ;;		wreg, status,2, status,0, cstack
   936 ;; Tracked objects:
   937 ;;		On entry : 0/0
   938 ;;		On exit  : 0/0
   939 ;;		Unchanged: 0/0
   940 ;; Data sizes:     COMRAM   BANK0   BANK1
   941 ;;      Params:         0       0       0
   942 ;;      Locals:         2       0       0
   943 ;;      Temps:          0       0       0
   944 ;;      Totals:         2       0       0
   945 ;;Total ram usage:        2 bytes
   946 ;; Hardware stack levels used: 1
   947 ;; Hardware stack levels required when called: 5
   948 ;; This function calls:
   949 ;;		_send
   950 ;; This function is called by:
   951 ;;		_send_message
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956   000996                     __ptext3:
   957                           	callstack 0
   958   000996                     _packet_pre_post_amble:
   959                           	callstack 24
   960                           
   961                           ;main.c: 198:     for(int i = 0; i < 3; i++)
   962                           
   963                           ;incstack = 0
   964   000996  0E00               	movlw	0
   965   000998  6E2C               	movwf	(packet_pre_post_amble@i+1)^0,c
   966   00099A  0E00               	movlw	0
   967   00099C  6E2B               	movwf	packet_pre_post_amble@i^0,c
   968   00099E                     l1413:
   969                           
   970                           ;main.c: 199:     {;main.c: 200:         send(0xA);
   971   00099E  0E0A               	movlw	10
   972   0009A0  EC62  F004         	call	_send
   973                           
   974                           ;main.c: 201:         send(0xA);
   975   0009A4  0E0A               	movlw	10
   976   0009A6  EC62  F004         	call	_send
   977                           
   978                           ;main.c: 202:     }
   979   0009AA  4A2B               	infsnz	packet_pre_post_amble@i^0,f,c
   980   0009AC  2A2C               	incf	(packet_pre_post_amble@i+1)^0,f,c
   981   0009AE  BE2C               	btfsc	(packet_pre_post_amble@i+1)^0,7,c
   982   0009B0  D7F6               	goto	l1413
   983   0009B2  502C               	movf	(packet_pre_post_amble@i+1)^0,w,c
   984   0009B4  E105               	bnz	u670
   985   0009B6  0E03               	movlw	3
   986   0009B8  5C2B               	subwf	packet_pre_post_amble@i^0,w,c
   987   0009BA  B0D8               	btfsc	status,0,c
   988   0009BC  0012               	return	
   989   0009BE  D7EF               	goto	l1413
   990   0009C0                     u670:
   991   0009C0  0012               	return		;funcret
   992   0009C2                     __end_of_packet_pre_post_amble:
   993                           	callstack 0
   994                           
   995 ;; *************** function _packet_interim_amble *****************
   996 ;; Defined at:
   997 ;;		line 204 in file "main.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;  i               2   42[COMRAM] int 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMRAM   BANK0   BANK1
  1011 ;;      Params:         0       0       0
  1012 ;;      Locals:         2       0       0
  1013 ;;      Temps:          0       0       0
  1014 ;;      Totals:         2       0       0
  1015 ;;Total ram usage:        2 bytes
  1016 ;; Hardware stack levels used: 1
  1017 ;; Hardware stack levels required when called: 5
  1018 ;; This function calls:
  1019 ;;		_send
  1020 ;; This function is called by:
  1021 ;;		_send_message
  1022 ;; This function uses a non-reentrant model
  1023 ;;
  1024                           
  1025                           	psect	text4
  1026   0009C2                     __ptext4:
  1027                           	callstack 0
  1028   0009C2                     _packet_interim_amble:
  1029                           	callstack 24
  1030                           
  1031                           ;main.c: 206:     for(int i = 0; i < 3; i++)
  1032                           
  1033                           ;incstack = 0
  1034   0009C2  0E00               	movlw	0
  1035   0009C4  6E2C               	movwf	(packet_interim_amble@i+1)^0,c
  1036   0009C6  0E00               	movlw	0
  1037   0009C8  6E2B               	movwf	packet_interim_amble@i^0,c
  1038   0009CA                     l1425:
  1039                           
  1040                           ;main.c: 207:     {;main.c: 208:         send(0xB);
  1041   0009CA  0E0B               	movlw	11
  1042   0009CC  EC62  F004         	call	_send
  1043                           
  1044                           ;main.c: 209:         send(0xB);
  1045   0009D0  0E0B               	movlw	11
  1046   0009D2  EC62  F004         	call	_send
  1047                           
  1048                           ;main.c: 210:     }
  1049   0009D6  4A2B               	infsnz	packet_interim_amble@i^0,f,c
  1050   0009D8  2A2C               	incf	(packet_interim_amble@i+1)^0,f,c
  1051   0009DA  BE2C               	btfsc	(packet_interim_amble@i+1)^0,7,c
  1052   0009DC  D7F6               	goto	l1425
  1053   0009DE  502C               	movf	(packet_interim_amble@i+1)^0,w,c
  1054   0009E0  E105               	bnz	u680
  1055   0009E2  0E03               	movlw	3
  1056   0009E4  5C2B               	subwf	packet_interim_amble@i^0,w,c
  1057   0009E6  B0D8               	btfsc	status,0,c
  1058   0009E8  0012               	return	
  1059   0009EA  D7EF               	goto	l1425
  1060   0009EC                     u680:
  1061   0009EC  0012               	return		;funcret
  1062   0009EE                     __end_of_packet_interim_amble:
  1063                           	callstack 0
  1064                           
  1065 ;; *************** function _send *****************
  1066 ;; Defined at:
  1067 ;;		line 213 in file "main.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  data            1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  data            1   41[COMRAM] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1
  1081 ;;      Params:         0       0       0
  1082 ;;      Locals:         1       0       0
  1083 ;;      Temps:          0       0       0
  1084 ;;      Totals:         1       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used: 1
  1087 ;; Hardware stack levels required when called: 4
  1088 ;; This function calls:
  1089 ;;		_delay
  1090 ;; This function is called by:
  1091 ;;		_send_message
  1092 ;;		_packet_pre_post_amble
  1093 ;;		_packet_interim_amble
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           	psect	text5
  1098   0008C4                     __ptext5:
  1099                           	callstack 0
  1100   0008C4                     _send:
  1101                           	callstack 25
  1102                           
  1103                           ;incstack = 0
  1104                           ;send@data stored from wreg
  1105   0008C4  6E2A               	movwf	send@data^0,c
  1106                           
  1107                           ;main.c: 213: void send(char data);main.c: 214: {;main.c: 215:     LATB = (LATB & 0xF0) 
      +                          | data;
  1108   0008C6  508A               	movf	138,w,c	;volatile
  1109   0008C8  0BF0               	andlw	240
  1110   0008CA  102A               	iorwf	send@data^0,w,c
  1111   0008CC  6E8A               	movwf	138,c	;volatile
  1112                           
  1113                           ;main.c: 216:     LATCbits.LC7 = 0;
  1114   0008CE  9E8B               	bcf	139,7,c	;volatile
  1115                           
  1116                           ;main.c: 217:     delay(70);
  1117   0008D0  0E46               	movlw	70
  1118   0008D2  6E1E               	movwf	delay@milliseconds^0,c
  1119   0008D4  0E00               	movlw	0
  1120   0008D6  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1121   0008D8  0E00               	movlw	0
  1122   0008DA  6E20               	movwf	(delay@milliseconds+2)^0,c
  1123   0008DC  0E00               	movlw	0
  1124   0008DE  6E21               	movwf	(delay@milliseconds+3)^0,c
  1125   0008E0  EC6B  F002         	call	_delay	;wreg free
  1126                           
  1127                           ;main.c: 218:     LATCbits.LC7 = 1;
  1128   0008E4  8E8B               	bsf	139,7,c	;volatile
  1129                           
  1130                           ;main.c: 219:     delay(70);
  1131   0008E6  0E46               	movlw	70
  1132   0008E8  6E1E               	movwf	delay@milliseconds^0,c
  1133   0008EA  0E00               	movlw	0
  1134   0008EC  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1135   0008EE  0E00               	movlw	0
  1136   0008F0  6E20               	movwf	(delay@milliseconds+2)^0,c
  1137   0008F2  0E00               	movlw	0
  1138   0008F4  6E21               	movwf	(delay@milliseconds+3)^0,c
  1139   0008F6  EC6B  F002         	call	_delay	;wreg free
  1140   0008FA  0012               	return		;funcret
  1141   0008FC                     __end_of_send:
  1142                           	callstack 0
  1143                           
  1144 ;; *************** function _lcd_init *****************
  1145 ;; Defined at:
  1146 ;;		line 222 in file "main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1
  1160 ;;      Params:         0       0       0
  1161 ;;      Locals:         0       0       0
  1162 ;;      Temps:          0       0       0
  1163 ;;      Totals:         0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 6
  1167 ;; This function calls:
  1168 ;;		_lcd_clear
  1169 ;;		_lcd_command
  1170 ;;		_lcd_message
  1171 ;;		_lcd_move_cursor
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text6
  1178   0006B4                     __ptext6:
  1179                           	callstack 0
  1180   0006B4                     _lcd_init:
  1181                           	callstack 24
  1182                           
  1183                           ;main.c: 229:     lcd_command(0x02, 1, 0, 0);
  1184                           
  1185                           ;incstack = 0
  1186   0006B4  0E01               	movlw	1
  1187   0006B6  6E2A               	movwf	lcd_command@lt^0,c
  1188   0006B8  0E00               	movlw	0
  1189   0006BA  6E2B               	movwf	lcd_command@rw^0,c
  1190   0006BC  0E00               	movlw	0
  1191   0006BE  6E2C               	movwf	lcd_command@rs^0,c
  1192   0006C0  0E02               	movlw	2
  1193   0006C2  ECD1  F002         	call	_lcd_command
  1194                           
  1195                           ;main.c: 230:     lcd_command(0x28, 1, 0, 0);
  1196   0006C6  0E01               	movlw	1
  1197   0006C8  6E2A               	movwf	lcd_command@lt^0,c
  1198   0006CA  0E00               	movlw	0
  1199   0006CC  6E2B               	movwf	lcd_command@rw^0,c
  1200   0006CE  0E00               	movlw	0
  1201   0006D0  6E2C               	movwf	lcd_command@rs^0,c
  1202   0006D2  0E28               	movlw	40
  1203   0006D4  ECD1  F002         	call	_lcd_command
  1204                           
  1205                           ;main.c: 232:     lcd_clear();
  1206   0006D8  EC94  F003         	call	_lcd_clear	;wreg free
  1207                           
  1208                           ;main.c: 235:     lcd_command(0x0F, 1, 0, 0);
  1209   0006DC  0E01               	movlw	1
  1210   0006DE  6E2A               	movwf	lcd_command@lt^0,c
  1211   0006E0  0E00               	movlw	0
  1212   0006E2  6E2B               	movwf	lcd_command@rw^0,c
  1213   0006E4  0E00               	movlw	0
  1214   0006E6  6E2C               	movwf	lcd_command@rs^0,c
  1215   0006E8  0E0F               	movlw	15
  1216   0006EA  ECD1  F002         	call	_lcd_command
  1217                           
  1218                           ;main.c: 240:     lcd_move_cursor(0, 5);
  1219   0006EE  0E05               	movlw	5
  1220   0006F0  6E31               	movwf	lcd_move_cursor@position^0,c
  1221   0006F2  0E00               	movlw	0
  1222   0006F4  EC99  F004         	call	_lcd_move_cursor
  1223                           
  1224                           ;main.c: 241:     lcd_message("Senior");
  1225   0006F8  0E22               	movlw	low STR_2
  1226   0006FA  6E2C               	movwf	lcd_message@message^0,c
  1227   0006FC  502C               	movf	lcd_message@message^0,w,c
  1228   0006FE  A4D8               	btfss	status,2,c
  1229   000700  0E02               	movlw	high __smallconst
  1230   000702  6E2D               	movwf	(lcd_message@message+1)^0,c
  1231   000704  ECC4  F003         	call	_lcd_message	;wreg free
  1232                           
  1233                           ;main.c: 242:     lcd_move_cursor(1, 4);
  1234   000708  0E04               	movlw	4
  1235   00070A  6E31               	movwf	lcd_move_cursor@position^0,c
  1236   00070C  0E01               	movlw	1
  1237   00070E  EC99  F004         	call	_lcd_move_cursor
  1238                           
  1239                           ;main.c: 243:     lcd_message("Capstone");
  1240   000712  0E11               	movlw	low STR_3
  1241   000714  6E2C               	movwf	lcd_message@message^0,c
  1242   000716  502C               	movf	lcd_message@message^0,w,c
  1243   000718  A4D8               	btfss	status,2,c
  1244   00071A  0E02               	movlw	high __smallconst
  1245   00071C  6E2D               	movwf	(lcd_message@message+1)^0,c
  1246   00071E  ECC4  F003         	call	_lcd_message	;wreg free
  1247                           
  1248                           ;main.c: 245:     lcd_clear();
  1249   000722  EC94  F003         	call	_lcd_clear	;wreg free
  1250   000726  0012               	return		;funcret
  1251   000728                     __end_of_lcd_init:
  1252                           	callstack 0
  1253                           
  1254 ;; *************** function _lcd_move_cursor *****************
  1255 ;; Defined at:
  1256 ;;		line 263 in file "main.c"
  1257 ;; Parameters:    Size  Location     Type
  1258 ;;  line            1    wreg     unsigned char 
  1259 ;;  position        1   48[COMRAM] unsigned char 
  1260 ;; Auto vars:     Size  Location     Type
  1261 ;;  line            1   49[COMRAM] unsigned char 
  1262 ;; Return value:  Size  Location     Type
  1263 ;;                  1    wreg      void 
  1264 ;; Registers used:
  1265 ;;		wreg, status,2, status,0, cstack
  1266 ;; Tracked objects:
  1267 ;;		On entry : 0/0
  1268 ;;		On exit  : 0/0
  1269 ;;		Unchanged: 0/0
  1270 ;; Data sizes:     COMRAM   BANK0   BANK1
  1271 ;;      Params:         1       0       0
  1272 ;;      Locals:         1       0       0
  1273 ;;      Temps:          0       0       0
  1274 ;;      Totals:         2       0       0
  1275 ;;Total ram usage:        2 bytes
  1276 ;; Hardware stack levels used: 1
  1277 ;; Hardware stack levels required when called: 5
  1278 ;; This function calls:
  1279 ;;		_lcd_command
  1280 ;; This function is called by:
  1281 ;;		_main
  1282 ;;		_lcd_init
  1283 ;; This function uses a non-reentrant model
  1284 ;;
  1285                           
  1286                           	psect	text7
  1287   000932                     __ptext7:
  1288                           	callstack 0
  1289   000932                     _lcd_move_cursor:
  1290                           	callstack 25
  1291                           
  1292                           ;incstack = 0
  1293                           ;lcd_move_cursor@line stored from wreg
  1294   000932  6E32               	movwf	lcd_move_cursor@line^0,c
  1295                           
  1296                           ;main.c: 263: void lcd_move_cursor(char line, char position);main.c: 264: {;main.c: 265:
      +                               if(!line)
  1297   000934  5032               	movf	lcd_move_cursor@line^0,w,c
  1298   000936  A4D8               	btfss	status,2,c
  1299   000938  D00B               	goto	l1405
  1300                           
  1301                           ;main.c: 266:     {;main.c: 267:         lcd_command(0x80 | position, 1, 0, 0);
  1302   00093A  0E01               	movlw	1
  1303   00093C  6E2A               	movwf	lcd_command@lt^0,c
  1304   00093E  0E00               	movlw	0
  1305   000940  6E2B               	movwf	lcd_command@rw^0,c
  1306   000942  0E00               	movlw	0
  1307   000944  6E2C               	movwf	lcd_command@rs^0,c
  1308   000946  5031               	movf	lcd_move_cursor@position^0,w,c
  1309   000948  0980               	iorlw	128
  1310   00094A  ECD1  F002         	call	_lcd_command
  1311                           
  1312                           ;main.c: 268:     }
  1313   00094E  0012               	return	
  1314   000950                     l1405:
  1315                           
  1316                           ;main.c: 270:     {;main.c: 271:         lcd_command(0xC0 | position, 1, 0, 0);
  1317   000950  0E01               	movlw	1
  1318   000952  6E2A               	movwf	lcd_command@lt^0,c
  1319   000954  0E00               	movlw	0
  1320   000956  6E2B               	movwf	lcd_command@rw^0,c
  1321   000958  0E00               	movlw	0
  1322   00095A  6E2C               	movwf	lcd_command@rs^0,c
  1323   00095C  5031               	movf	lcd_move_cursor@position^0,w,c
  1324   00095E  09C0               	iorlw	192
  1325   000960  ECD1  F002         	call	_lcd_command
  1326   000964  0012               	return		;funcret
  1327   000966                     __end_of_lcd_move_cursor:
  1328                           	callstack 0
  1329                           
  1330 ;; *************** function _lcd_clear *****************
  1331 ;; Defined at:
  1332 ;;		line 316 in file "main.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2, status,0, cstack
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1
  1346 ;;      Params:         0       0       0
  1347 ;;      Locals:         0       0       0
  1348 ;;      Temps:          0       0       0
  1349 ;;      Totals:         0       0       0
  1350 ;;Total ram usage:        0 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 4
  1353 ;; This function calls:
  1354 ;;		_delay
  1355 ;;		_i2c_data_tx
  1356 ;;		_i2c_start_and_addr
  1357 ;;		_i2c_stop
  1358 ;; This function is called by:
  1359 ;;		_main
  1360 ;;		_lcd_init
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364                           	psect	text8
  1365   000728                     __ptext8:
  1366                           	callstack 0
  1367   000728                     _lcd_clear:
  1368                           	callstack 25
  1369                           
  1370                           ;main.c: 318:     i2c_start_and_addr(0x4E);
  1371                           
  1372                           ;incstack = 0
  1373   000728  0E4E               	movlw	78
  1374   00072A  EC04  F005         	call	_i2c_start_and_addr
  1375                           
  1376                           ;main.c: 321:     i2c_data_tx(0b00001100);
  1377   00072E  0E0C               	movlw	12
  1378   000730  EC11  F005         	call	_i2c_data_tx
  1379                           
  1380                           ;main.c: 322:     delay(1);
  1381   000734  0E01               	movlw	1
  1382   000736  6E1E               	movwf	delay@milliseconds^0,c
  1383   000738  0E00               	movlw	0
  1384   00073A  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1385   00073C  0E00               	movlw	0
  1386   00073E  6E20               	movwf	(delay@milliseconds+2)^0,c
  1387   000740  0E00               	movlw	0
  1388   000742  6E21               	movwf	(delay@milliseconds+3)^0,c
  1389   000744  EC6B  F002         	call	_delay	;wreg free
  1390                           
  1391                           ;main.c: 323:     i2c_data_tx(0b00001000);
  1392   000748  0E08               	movlw	8
  1393   00074A  EC11  F005         	call	_i2c_data_tx
  1394                           
  1395                           ;main.c: 326:     i2c_data_tx(0b00011100);
  1396   00074E  0E1C               	movlw	28
  1397   000750  EC11  F005         	call	_i2c_data_tx
  1398                           
  1399                           ;main.c: 327:     delay(1);
  1400   000754  0E01               	movlw	1
  1401   000756  6E1E               	movwf	delay@milliseconds^0,c
  1402   000758  0E00               	movlw	0
  1403   00075A  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1404   00075C  0E00               	movlw	0
  1405   00075E  6E20               	movwf	(delay@milliseconds+2)^0,c
  1406   000760  0E00               	movlw	0
  1407   000762  6E21               	movwf	(delay@milliseconds+3)^0,c
  1408   000764  EC6B  F002         	call	_delay	;wreg free
  1409                           
  1410                           ;main.c: 328:     i2c_data_tx(0b00011000);
  1411   000768  0E18               	movlw	24
  1412   00076A  EC11  F005         	call	_i2c_data_tx
  1413                           
  1414                           ;main.c: 329:     delay(1);
  1415   00076E  0E01               	movlw	1
  1416   000770  6E1E               	movwf	delay@milliseconds^0,c
  1417   000772  0E00               	movlw	0
  1418   000774  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1419   000776  0E00               	movlw	0
  1420   000778  6E20               	movwf	(delay@milliseconds+2)^0,c
  1421   00077A  0E00               	movlw	0
  1422   00077C  6E21               	movwf	(delay@milliseconds+3)^0,c
  1423   00077E  EC6B  F002         	call	_delay	;wreg free
  1424                           
  1425                           ;main.c: 331:     i2c_stop();
  1426   000782  EC1A  F005         	call	_i2c_stop	;wreg free
  1427   000786  0012               	return		;funcret
  1428   000788                     __end_of_lcd_clear:
  1429                           	callstack 0
  1430                           
  1431 ;; *************** function _lcd_backspace *****************
  1432 ;; Defined at:
  1433 ;;		line 256 in file "main.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1
  1447 ;;      Params:         0       0       0
  1448 ;;      Locals:         0       0       0
  1449 ;;      Temps:          0       0       0
  1450 ;;      Totals:         0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 6
  1454 ;; This function calls:
  1455 ;;		_lcd_command
  1456 ;;		_lcd_message
  1457 ;; This function is called by:
  1458 ;;		_main
  1459 ;; This function uses a non-reentrant model
  1460 ;;
  1461                           
  1462                           	psect	text9
  1463   0008FC                     __ptext9:
  1464                           	callstack 0
  1465   0008FC                     _lcd_backspace:
  1466                           	callstack 24
  1467                           
  1468                           ;main.c: 258:     lcd_command(0x10, 1, 0, 0);
  1469                           
  1470                           ;incstack = 0
  1471   0008FC  0E01               	movlw	1
  1472   0008FE  6E2A               	movwf	lcd_command@lt^0,c
  1473   000900  0E00               	movlw	0
  1474   000902  6E2B               	movwf	lcd_command@rw^0,c
  1475   000904  0E00               	movlw	0
  1476   000906  6E2C               	movwf	lcd_command@rs^0,c
  1477   000908  0E10               	movlw	16
  1478   00090A  ECD1  F002         	call	_lcd_command
  1479                           
  1480                           ;main.c: 259:     lcd_message(" ");
  1481   00090E  0E29               	movlw	low STR_4
  1482   000910  6E2C               	movwf	lcd_message@message^0,c
  1483   000912  502C               	movf	lcd_message@message^0,w,c
  1484   000914  A4D8               	btfss	status,2,c
  1485   000916  0E02               	movlw	high __smallconst
  1486   000918  6E2D               	movwf	(lcd_message@message+1)^0,c
  1487   00091A  ECC4  F003         	call	_lcd_message	;wreg free
  1488                           
  1489                           ;main.c: 260:     lcd_command(0x10, 1, 0, 0);
  1490   00091E  0E01               	movlw	1
  1491   000920  6E2A               	movwf	lcd_command@lt^0,c
  1492   000922  0E00               	movlw	0
  1493   000924  6E2B               	movwf	lcd_command@rw^0,c
  1494   000926  0E00               	movlw	0
  1495   000928  6E2C               	movwf	lcd_command@rs^0,c
  1496   00092A  0E10               	movlw	16
  1497   00092C  ECD1  F002         	call	_lcd_command
  1498   000930  0012               	return		;funcret
  1499   000932                     __end_of_lcd_backspace:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _lcd_message *****************
  1503 ;; Defined at:
  1504 ;;		line 293 in file "main.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  message         2   43[COMRAM] PTR unsigned char 
  1507 ;;		 -> STR_4(2), STR_3(9), STR_2(7), STR_1(8), 
  1508 ;;		 -> keys(11), 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;		None
  1511 ;; Return value:  Size  Location     Type
  1512 ;;                  1    wreg      void 
  1513 ;; Registers used:
  1514 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1
  1520 ;;      Params:         2       0       0
  1521 ;;      Locals:         0       0       0
  1522 ;;      Temps:          0       0       0
  1523 ;;      Totals:         2       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used: 1
  1526 ;; Hardware stack levels required when called: 5
  1527 ;; This function calls:
  1528 ;;		_i2c_start_and_addr
  1529 ;;		_i2c_stop
  1530 ;;		_lcd_char
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;;		_lcd_init
  1534 ;;		_lcd_backspace
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text10
  1539   000788                     __ptext10:
  1540                           	callstack 0
  1541   000788                     _lcd_message:
  1542                           	callstack 25
  1543                           
  1544                           ;main.c: 293: void lcd_message(char* message);main.c: 294: {;main.c: 295:     i2c_start_
      +                          and_addr(0x4E);
  1545                           
  1546                           ;incstack = 0
  1547   000788  0E4E               	movlw	78
  1548   00078A  EC04  F005         	call	_i2c_start_and_addr
  1549                           
  1550                           ;main.c: 296:     while(*message != 0)
  1551   00078E  D014               	goto	l1383
  1552   000790                     l1379:
  1553                           
  1554                           ;main.c: 297:     {;main.c: 298:         lcd_char(*message);
  1555   000790  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1556   000794  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1557   000798  6AF8               	clrf	tblptru,c
  1558   00079A  0E01               	movlw	(high __ramtop+-1)
  1559   00079C  64F7               	cpfsgt	tblptrh,c
  1560   00079E  D003               	bra	u637
  1561   0007A0  0008               	tblrd		*
  1562   0007A2  50F5               	movf	tablat,w,c
  1563   0007A4  D005               	bra	u630
  1564   0007A6                     u637:
  1565   0007A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  1566   0007AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  1567   0007AE  50EF               	movf	indf0,w,c
  1568   0007B0                     u630:
  1569   0007B0  EC1D  F004         	call	_lcd_char
  1570                           
  1571                           ;main.c: 299:         message++;
  1572   0007B4  4A2C               	infsnz	lcd_message@message^0,f,c
  1573   0007B6  2A2D               	incf	(lcd_message@message+1)^0,f,c
  1574   0007B8                     l1383:
  1575                           
  1576                           ;main.c: 296:     while(*message != 0)
  1577   0007B8  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1578   0007BC  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1579   0007C0  6AF8               	clrf	tblptru,c
  1580   0007C2  0E01               	movlw	(high __ramtop+-1)
  1581   0007C4  64F7               	cpfsgt	tblptrh,c
  1582   0007C6  D003               	bra	u647
  1583   0007C8  0008               	tblrd		*
  1584   0007CA  50F5               	movf	tablat,w,c
  1585   0007CC  D005               	bra	u640
  1586   0007CE                     u647:
  1587   0007CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  1588   0007D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  1589   0007D6  50EF               	movf	indf0,w,c
  1590   0007D8                     u640:
  1591   0007D8  0900               	iorlw	0
  1592   0007DA  A4D8               	btfss	status,2,c
  1593   0007DC  D7D9               	goto	l1379
  1594                           
  1595                           ;main.c: 301:     i2c_stop();
  1596   0007DE  EC1A  F005         	call	_i2c_stop	;wreg free
  1597   0007E2  0012               	return		;funcret
  1598   0007E4                     __end_of_lcd_message:
  1599                           	callstack 0
  1600                           
  1601 ;; *************** function _lcd_char *****************
  1602 ;; Defined at:
  1603 ;;		line 304 in file "main.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  letter          1    wreg     unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  letter          1   42[COMRAM] unsigned char 
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      void 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMRAM   BANK0   BANK1
  1617 ;;      Params:         0       0       0
  1618 ;;      Locals:         1       0       0
  1619 ;;      Temps:          1       0       0
  1620 ;;      Totals:         2       0       0
  1621 ;;Total ram usage:        2 bytes
  1622 ;; Hardware stack levels used: 1
  1623 ;; Hardware stack levels required when called: 4
  1624 ;; This function calls:
  1625 ;;		_delay
  1626 ;;		_i2c_data_tx
  1627 ;; This function is called by:
  1628 ;;		_lcd_message
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text11
  1633   00083A                     __ptext11:
  1634                           	callstack 0
  1635   00083A                     _lcd_char:
  1636                           	callstack 25
  1637                           
  1638                           ;incstack = 0
  1639                           ;lcd_char@letter stored from wreg
  1640   00083A  6E2B               	movwf	lcd_char@letter^0,c
  1641                           
  1642                           ;main.c: 304: void lcd_char(char letter);main.c: 305: {;main.c: 306:     i2c_data_tx((le
      +                          tter & 0xF0) | 0b1101);
  1643   00083C  502B               	movf	lcd_char@letter^0,w,c
  1644   00083E  0BF0               	andlw	240
  1645   000840  090D               	iorlw	13
  1646   000842  EC11  F005         	call	_i2c_data_tx
  1647                           
  1648                           ;main.c: 307:     i2c_data_tx((letter & 0xF0) | 8);
  1649   000846  502B               	movf	lcd_char@letter^0,w,c
  1650   000848  0BF0               	andlw	240
  1651   00084A  0908               	iorlw	8
  1652   00084C  EC11  F005         	call	_i2c_data_tx
  1653                           
  1654                           ;main.c: 311:     i2c_data_tx(((letter & 0x0F) << 4) | 0b1101);
  1655   000850  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1656   000854  0E0F               	movlw	15
  1657   000856  162A               	andwf	??_lcd_char^0,f,c
  1658   000858  382A               	swapf	??_lcd_char^0,w,c
  1659   00085A  0BF0               	andlw	240
  1660   00085C  090D               	iorlw	13
  1661   00085E  EC11  F005         	call	_i2c_data_tx
  1662                           
  1663                           ;main.c: 312:     i2c_data_tx(((letter & 0x0F) << 4) | 8);
  1664   000862  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1665   000866  0E0F               	movlw	15
  1666   000868  162A               	andwf	??_lcd_char^0,f,c
  1667   00086A  382A               	swapf	??_lcd_char^0,w,c
  1668   00086C  0BF0               	andlw	240
  1669   00086E  0908               	iorlw	8
  1670   000870  EC11  F005         	call	_i2c_data_tx
  1671                           
  1672                           ;main.c: 313:     delay(1);
  1673   000874  0E01               	movlw	1
  1674   000876  6E1E               	movwf	delay@milliseconds^0,c
  1675   000878  0E00               	movlw	0
  1676   00087A  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1677   00087C  0E00               	movlw	0
  1678   00087E  6E20               	movwf	(delay@milliseconds+2)^0,c
  1679   000880  0E00               	movlw	0
  1680   000882  6E21               	movwf	(delay@milliseconds+3)^0,c
  1681   000884  EC6B  F002         	call	_delay	;wreg free
  1682   000888  0012               	return		;funcret
  1683   00088A                     __end_of_lcd_char:
  1684                           	callstack 0
  1685                           
  1686 ;; *************** function _lcd_command *****************
  1687 ;; Defined at:
  1688 ;;		line 277 in file "main.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  data            1    wreg     unsigned char 
  1691 ;;  lt              1   41[COMRAM] unsigned char 
  1692 ;;  rw              1   42[COMRAM] unsigned char 
  1693 ;;  rs              1   43[COMRAM] unsigned char 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  data            1   47[COMRAM] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, status,2, status,0, cstack
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMRAM   BANK0   BANK1
  1705 ;;      Params:         3       0       0
  1706 ;;      Locals:         1       0       0
  1707 ;;      Temps:          3       0       0
  1708 ;;      Totals:         7       0       0
  1709 ;;Total ram usage:        7 bytes
  1710 ;; Hardware stack levels used: 1
  1711 ;; Hardware stack levels required when called: 4
  1712 ;; This function calls:
  1713 ;;		_delay
  1714 ;;		_i2c_data_tx
  1715 ;;		_i2c_start_and_addr
  1716 ;;		_i2c_stop
  1717 ;; This function is called by:
  1718 ;;		_lcd_init
  1719 ;;		_lcd_backspace
  1720 ;;		_lcd_move_cursor
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text12
  1725   0005A2                     __ptext12:
  1726                           	callstack 0
  1727   0005A2                     _lcd_command:
  1728                           	callstack 25
  1729                           
  1730                           ;incstack = 0
  1731                           ;lcd_command@data stored from wreg
  1732   0005A2  6E30               	movwf	lcd_command@data^0,c
  1733                           
  1734                           ;main.c: 277: void lcd_command(char data, char lt, char rw, char rs);main.c: 278: {;main
      +                          .c: 279:     i2c_start_and_addr(0x4E);
  1735   0005A4  0E4E               	movlw	78
  1736   0005A6  EC04  F005         	call	_i2c_start_and_addr
  1737                           
  1738                           ;main.c: 281:     i2c_data_tx((data & 0xF0) | (lt << 3) | 4 | (rw <<1) | rs);
  1739   0005AA  90D8               	bcf	status,0,c
  1740   0005AC  342B               	rlcf	lcd_command@rw^0,w,c
  1741   0005AE  6E2D               	movwf	??_lcd_command^0,c
  1742   0005B0  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1743   0005B4  90D8               	bcf	status,0,c
  1744   0005B6  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1745   0005B8  90D8               	bcf	status,0,c
  1746   0005BA  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1747   0005BC  90D8               	bcf	status,0,c
  1748   0005BE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1749   0005C0  5030               	movf	lcd_command@data^0,w,c
  1750   0005C2  0BF0               	andlw	240
  1751   0005C4  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1752   0005C6  102D               	iorwf	??_lcd_command^0,w,c
  1753   0005C8  102C               	iorwf	lcd_command@rs^0,w,c
  1754   0005CA  0904               	iorlw	4
  1755   0005CC  EC11  F005         	call	_i2c_data_tx
  1756                           
  1757                           ;main.c: 282:     delay(1);
  1758   0005D0  0E01               	movlw	1
  1759   0005D2  6E1E               	movwf	delay@milliseconds^0,c
  1760   0005D4  0E00               	movlw	0
  1761   0005D6  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1762   0005D8  0E00               	movlw	0
  1763   0005DA  6E20               	movwf	(delay@milliseconds+2)^0,c
  1764   0005DC  0E00               	movlw	0
  1765   0005DE  6E21               	movwf	(delay@milliseconds+3)^0,c
  1766   0005E0  EC6B  F002         	call	_delay	;wreg free
  1767                           
  1768                           ;main.c: 283:     i2c_data_tx(lt<<3);
  1769   0005E4  382A               	swapf	lcd_command@lt^0,w,c
  1770   0005E6  42E8               	rrncf	wreg,f,c
  1771   0005E8  0BF8               	andlw	248
  1772   0005EA  EC11  F005         	call	_i2c_data_tx
  1773                           
  1774                           ;main.c: 286:     i2c_data_tx(((data & 0x0F) <<4) | (lt << 3) | 4 | (rw <<1) | rs);
  1775   0005EE  90D8               	bcf	status,0,c
  1776   0005F0  342B               	rlcf	lcd_command@rw^0,w,c
  1777   0005F2  6E2D               	movwf	??_lcd_command^0,c
  1778   0005F4  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1779   0005F8  90D8               	bcf	status,0,c
  1780   0005FA  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1781   0005FC  90D8               	bcf	status,0,c
  1782   0005FE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1783   000600  90D8               	bcf	status,0,c
  1784   000602  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1785   000604  C030  F02F         	movff	lcd_command@data,??_lcd_command+2
  1786   000608  0E0F               	movlw	15
  1787   00060A  162F               	andwf	(??_lcd_command+2)^0,f,c
  1788   00060C  382F               	swapf	(??_lcd_command+2)^0,w,c
  1789   00060E  0BF0               	andlw	240
  1790   000610  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1791   000612  102D               	iorwf	??_lcd_command^0,w,c
  1792   000614  102C               	iorwf	lcd_command@rs^0,w,c
  1793   000616  0904               	iorlw	4
  1794   000618  EC11  F005         	call	_i2c_data_tx
  1795                           
  1796                           ;main.c: 287:     delay(1);
  1797   00061C  0E01               	movlw	1
  1798   00061E  6E1E               	movwf	delay@milliseconds^0,c
  1799   000620  0E00               	movlw	0
  1800   000622  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1801   000624  0E00               	movlw	0
  1802   000626  6E20               	movwf	(delay@milliseconds+2)^0,c
  1803   000628  0E00               	movlw	0
  1804   00062A  6E21               	movwf	(delay@milliseconds+3)^0,c
  1805   00062C  EC6B  F002         	call	_delay	;wreg free
  1806                           
  1807                           ;main.c: 288:     i2c_data_tx(lt<<3);
  1808   000630  382A               	swapf	lcd_command@lt^0,w,c
  1809   000632  42E8               	rrncf	wreg,f,c
  1810   000634  0BF8               	andlw	248
  1811   000636  EC11  F005         	call	_i2c_data_tx
  1812                           
  1813                           ;main.c: 290:     i2c_stop();
  1814   00063A  EC1A  F005         	call	_i2c_stop	;wreg free
  1815   00063E  0012               	return		;funcret
  1816   000640                     __end_of_lcd_command:
  1817                           	callstack 0
  1818                           
  1819 ;; *************** function _i2c_stop *****************
  1820 ;; Defined at:
  1821 ;;		line 345 in file "main.c"
  1822 ;; Parameters:    Size  Location     Type
  1823 ;;		None
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;		None
  1826 ;; Return value:  Size  Location     Type
  1827 ;;                  1    wreg      void 
  1828 ;; Registers used:
  1829 ;;		None
  1830 ;; Tracked objects:
  1831 ;;		On entry : 0/0
  1832 ;;		On exit  : 0/0
  1833 ;;		Unchanged: 0/0
  1834 ;; Data sizes:     COMRAM   BANK0   BANK1
  1835 ;;      Params:         0       0       0
  1836 ;;      Locals:         0       0       0
  1837 ;;      Temps:          0       0       0
  1838 ;;      Totals:         0       0       0
  1839 ;;Total ram usage:        0 bytes
  1840 ;; Hardware stack levels used: 1
  1841 ;; Hardware stack levels required when called: 2
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_lcd_command
  1846 ;;		_lcd_message
  1847 ;;		_lcd_clear
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text13
  1852   000A34                     __ptext13:
  1853                           	callstack 0
  1854   000A34                     _i2c_stop:
  1855                           	callstack 26
  1856                           
  1857                           ;main.c: 348:     SSPCON2bits.PEN = 1;
  1858                           
  1859                           ;incstack = 0
  1860   000A34  84C5               	bsf	197,2,c	;volatile
  1861   000A36                     l219:
  1862   000A36  A69E               	btfss	158,3,c	;volatile
  1863   000A38  D7FE               	goto	l219
  1864                           
  1865                           ;main.c: 350:     PIR1bits.SSPIF = 0;
  1866   000A3A  969E               	bcf	158,3,c	;volatile
  1867   000A3C  0012               	return		;funcret
  1868   000A3E                     __end_of_i2c_stop:
  1869                           	callstack 0
  1870                           
  1871 ;; *************** function _i2c_start_and_addr *****************
  1872 ;; Defined at:
  1873 ;;		line 353 in file "main.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  address         1    wreg     unsigned char 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  address         1   17[COMRAM] unsigned char 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1
  1887 ;;      Params:         0       0       0
  1888 ;;      Locals:         1       0       0
  1889 ;;      Temps:          0       0       0
  1890 ;;      Totals:         1       0       0
  1891 ;;Total ram usage:        1 bytes
  1892 ;; Hardware stack levels used: 1
  1893 ;; Hardware stack levels required when called: 2
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_lcd_command
  1898 ;;		_lcd_message
  1899 ;;		_lcd_clear
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text14
  1904   000A08                     __ptext14:
  1905                           	callstack 0
  1906   000A08                     _i2c_start_and_addr:
  1907                           	callstack 26
  1908                           
  1909                           ;incstack = 0
  1910                           ;i2c_start_and_addr@address stored from wreg
  1911   000A08  6E12               	movwf	i2c_start_and_addr@address^0,c
  1912                           
  1913                           ;main.c: 353: void i2c_start_and_addr(unsigned char address);main.c: 354: {;main.c: 356:
      +                               SSPCON2bits.SEN = 1;
  1914   000A0A  80C5               	bsf	197,0,c	;volatile
  1915   000A0C                     l225:
  1916   000A0C  A69E               	btfss	158,3,c	;volatile
  1917   000A0E  D7FE               	goto	l225
  1918                           
  1919                           ;main.c: 358:     PIR1bits.SSPIF = 0;
  1920   000A10  969E               	bcf	158,3,c	;volatile
  1921   000A12                     l967:
  1922                           
  1923                           ;main.c: 360:     {;main.c: 361:         SSPBUF = address;
  1924   000A12  C012  FFC9         	movff	i2c_start_and_addr@address,4041	;volatile
  1925   000A16                     l229:
  1926   000A16  A69E               	btfss	158,3,c	;volatile
  1927   000A18  D7FE               	goto	l229
  1928                           
  1929                           ;main.c: 363:         PIR1bits.SSPIF = 0;
  1930   000A1A  969E               	bcf	158,3,c	;volatile
  1931                           
  1932                           ;main.c: 364:     }while(SSPCON2bits.ACKSTAT);
  1933   000A1C  ACC5               	btfss	197,6,c	;volatile
  1934   000A1E  0012               	return	
  1935   000A20  D7F8               	goto	l967
  1936   000A22                     __end_of_i2c_start_and_addr:
  1937                           	callstack 0
  1938                           
  1939 ;; *************** function _i2c_data_tx *****************
  1940 ;; Defined at:
  1941 ;;		line 334 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  data            1    wreg     unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  data            1   17[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1
  1955 ;;      Params:         0       0       0
  1956 ;;      Locals:         1       0       0
  1957 ;;      Temps:          0       0       0
  1958 ;;      Totals:         1       0       0
  1959 ;;Total ram usage:        1 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 2
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_lcd_command
  1966 ;;		_lcd_char
  1967 ;;		_lcd_clear
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text15
  1972   000A22                     __ptext15:
  1973                           	callstack 0
  1974   000A22                     _i2c_data_tx:
  1975                           	callstack 26
  1976                           
  1977                           ;incstack = 0
  1978                           ;i2c_data_tx@data stored from wreg
  1979   000A22  6E12               	movwf	i2c_data_tx@data^0,c
  1980   000A24                     l211:
  1981                           
  1982                           ;main.c: 337:     {;main.c: 338:         SSPBUF = data;
  1983   000A24  C012  FFC9         	movff	i2c_data_tx@data,4041	;volatile
  1984   000A28                     l212:
  1985   000A28  A69E               	btfss	158,3,c	;volatile
  1986   000A2A  D7FE               	goto	l212
  1987                           
  1988                           ;main.c: 340:         PIR1bits.SSPIF = 0;
  1989   000A2C  969E               	bcf	158,3,c	;volatile
  1990                           
  1991                           ;main.c: 342:     }while(SSPCON2bits.ACKSTAT);
  1992   000A2E  ACC5               	btfss	197,6,c	;volatile
  1993   000A30  0012               	return	
  1994   000A32  D7F8               	goto	l211
  1995   000A34                     __end_of_i2c_data_tx:
  1996                           	callstack 0
  1997                           
  1998 ;; *************** function _delay *****************
  1999 ;; Defined at:
  2000 ;;		line 152 in file "main.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  milliseconds    4   29[COMRAM] unsigned long 
  2003 ;; Auto vars:     Size  Location     Type
  2004 ;;  timer_value     8   33[COMRAM] unsigned long long 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMRAM   BANK0   BANK1
  2014 ;;      Params:         4       0       0
  2015 ;;      Locals:         8       0       0
  2016 ;;      Temps:          0       0       0
  2017 ;;      Totals:        12       0       0
  2018 ;;Total ram usage:       12 bytes
  2019 ;; Hardware stack levels used: 1
  2020 ;; Hardware stack levels required when called: 3
  2021 ;; This function calls:
  2022 ;;		___lmul
  2023 ;; This function is called by:
  2024 ;;		_send
  2025 ;;		_lcd_command
  2026 ;;		_lcd_char
  2027 ;;		_lcd_clear
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031                           	psect	text16
  2032   0004D6                     __ptext16:
  2033                           	callstack 0
  2034   0004D6                     _delay:
  2035                           	callstack 25
  2036                           
  2037                           ;main.c: 152: void delay(unsigned long milliseconds);main.c: 153: {;main.c: 154:     T1C
      +                          ON = 0b10110000;
  2038                           
  2039                           ;incstack = 0
  2040   0004D6  0EB0               	movlw	176
  2041   0004D8  6ECD               	movwf	205,c	;volatile
  2042                           
  2043                           ;main.c: 155:     PIE1bits.TMR1IE = 0;
  2044   0004DA  909D               	bcf	157,0,c	;volatile
  2045                           
  2046                           ;main.c: 156:     unsigned long long timer_value = (milliseconds) * 1000 ;
  2047   0004DC  C01E  F012         	movff	delay@milliseconds,___lmul@multiplier
  2048   0004E0  C01F  F013         	movff	delay@milliseconds+1,___lmul@multiplier+1
  2049   0004E4  C020  F014         	movff	delay@milliseconds+2,___lmul@multiplier+2
  2050   0004E8  C021  F015         	movff	delay@milliseconds+3,___lmul@multiplier+3
  2051   0004EC  0EE8               	movlw	232
  2052   0004EE  6E16               	movwf	___lmul@multiplicand^0,c
  2053   0004F0  0E03               	movlw	3
  2054   0004F2  6E17               	movwf	(___lmul@multiplicand+1)^0,c
  2055   0004F4  0E00               	movlw	0
  2056   0004F6  6E18               	movwf	(___lmul@multiplicand+2)^0,c
  2057   0004F8  0E00               	movlw	0
  2058   0004FA  6E19               	movwf	(___lmul@multiplicand+3)^0,c
  2059   0004FC  ECF2  F003         	call	___lmul	;wreg free
  2060   000500  5012               	movf	?___lmul^0,w,c
  2061   000502  6E22               	movwf	delay@timer_value^0,c
  2062   000504  5013               	movf	(?___lmul+1)^0,w,c
  2063   000506  6E23               	movwf	(delay@timer_value+1)^0,c
  2064   000508  5014               	movf	(?___lmul+2)^0,w,c
  2065   00050A  6E24               	movwf	(delay@timer_value+2)^0,c
  2066   00050C  5015               	movf	(?___lmul+3)^0,w,c
  2067   00050E  6E25               	movwf	(delay@timer_value+3)^0,c
  2068   000510  6A26               	clrf	(delay@timer_value+4)^0,c
  2069   000512  6A27               	clrf	(delay@timer_value+5)^0,c
  2070   000514  6A28               	clrf	(delay@timer_value+6)^0,c
  2071   000516  6A29               	clrf	(delay@timer_value+7)^0,c
  2072                           
  2073                           ;main.c: 157:     while(timer_value > 65535)
  2074   000518  D019               	goto	l1339
  2075   00051A                     l1331:
  2076                           
  2077                           ;main.c: 158:     {;main.c: 159:         timer_value -= 65535;
  2078   00051A  0EFF               	movlw	255
  2079   00051C  5E22               	subwf	delay@timer_value^0,f,c
  2080   00051E  0EFF               	movlw	255
  2081   000520  5A23               	subwfb	(delay@timer_value+1)^0,f,c
  2082   000522  0E00               	movlw	0
  2083   000524  5A24               	subwfb	(delay@timer_value+2)^0,f,c
  2084   000526  0E00               	movlw	0
  2085   000528  5A25               	subwfb	(delay@timer_value+3)^0,f,c
  2086   00052A  0E00               	movlw	0
  2087   00052C  5A26               	subwfb	(delay@timer_value+4)^0,f,c
  2088   00052E  0E00               	movlw	0
  2089   000530  5A27               	subwfb	(delay@timer_value+5)^0,f,c
  2090   000532  0E00               	movlw	0
  2091   000534  5A28               	subwfb	(delay@timer_value+6)^0,f,c
  2092   000536  0E00               	movlw	0
  2093   000538  5A29               	subwfb	(delay@timer_value+7)^0,f,c
  2094                           
  2095                           ;main.c: 160:         TMR1H = 0;
  2096   00053A  0E00               	movlw	0
  2097   00053C  6ECF               	movwf	207,c	;volatile
  2098                           
  2099                           ;main.c: 161:         TMR1L = 0;
  2100   00053E  0E00               	movlw	0
  2101   000540  6ECE               	movwf	206,c	;volatile
  2102                           
  2103                           ;main.c: 162:         T1CONbits.TMR1ON = 1;
  2104   000542  80CD               	bsf	205,0,c	;volatile
  2105   000544                     l154:
  2106   000544  A09E               	btfss	158,0,c	;volatile
  2107   000546  D7FE               	goto	l154
  2108                           
  2109                           ;main.c: 164:         T1CONbits.TMR1ON = 0;
  2110   000548  90CD               	bcf	205,0,c	;volatile
  2111                           
  2112                           ;main.c: 165:         PIR1bits.TMR1IF = 0;
  2113   00054A  909E               	bcf	158,0,c	;volatile
  2114   00054C                     l1339:
  2115                           
  2116                           ;main.c: 157:     while(timer_value > 65535)
  2117   00054C  5029               	movf	(delay@timer_value+7)^0,w,c
  2118   00054E  1028               	iorwf	(delay@timer_value+6)^0,w,c
  2119   000550  1027               	iorwf	(delay@timer_value+5)^0,w,c
  2120   000552  1026               	iorwf	(delay@timer_value+4)^0,w,c
  2121   000554  1025               	iorwf	(delay@timer_value+3)^0,w,c
  2122   000556  E1E1               	bnz	l1331
  2123   000558  0424               	decf	(delay@timer_value+2)^0,w,c
  2124   00055A  B0D8               	btfsc	status,0,c
  2125   00055C  D7DE               	goto	l1331
  2126                           
  2127                           ;main.c: 167:     timer_value = 65535 - timer_value + 1;
  2128   00055E  5022               	movf	delay@timer_value^0,w,c
  2129   000560  0800               	sublw	0
  2130   000562  6E22               	movwf	delay@timer_value^0,c
  2131   000564  0E00               	movlw	0
  2132   000566  5423               	subfwb	(delay@timer_value+1)^0,w,c
  2133   000568  6E23               	movwf	(delay@timer_value+1)^0,c
  2134   00056A  0E01               	movlw	1
  2135   00056C  5424               	subfwb	(delay@timer_value+2)^0,w,c
  2136   00056E  6E24               	movwf	(delay@timer_value+2)^0,c
  2137   000570  0E00               	movlw	0
  2138   000572  5425               	subfwb	(delay@timer_value+3)^0,w,c
  2139   000574  6E25               	movwf	(delay@timer_value+3)^0,c
  2140   000576  0E00               	movlw	0
  2141   000578  5426               	subfwb	(delay@timer_value+4)^0,w,c
  2142   00057A  6E26               	movwf	(delay@timer_value+4)^0,c
  2143   00057C  0E00               	movlw	0
  2144   00057E  5427               	subfwb	(delay@timer_value+5)^0,w,c
  2145   000580  6E27               	movwf	(delay@timer_value+5)^0,c
  2146   000582  0E00               	movlw	0
  2147   000584  5428               	subfwb	(delay@timer_value+6)^0,w,c
  2148   000586  6E28               	movwf	(delay@timer_value+6)^0,c
  2149   000588  0E00               	movlw	0
  2150   00058A  5429               	subfwb	(delay@timer_value+7)^0,w,c
  2151   00058C  6E29               	movwf	(delay@timer_value+7)^0,c
  2152                           
  2153                           ;main.c: 168:     TMR1H = (unsigned char)(0xFF00 & timer_value);
  2154   00058E  0E00               	movlw	0
  2155   000590  6ECF               	movwf	207,c	;volatile
  2156                           
  2157                           ;main.c: 169:     TMR1L = (unsigned char)(0xFF & timer_value);
  2158   000592  C022  FFCE         	movff	delay@timer_value,4046	;volatile
  2159                           
  2160                           ;main.c: 170:     T1CONbits.TMR1ON = 1;
  2161   000596  80CD               	bsf	205,0,c	;volatile
  2162   000598                     l158:
  2163   000598  A09E               	btfss	158,0,c	;volatile
  2164   00059A  D7FE               	goto	l158
  2165                           
  2166                           ;main.c: 172:     T1CONbits.TMR1ON = 0;
  2167   00059C  90CD               	bcf	205,0,c	;volatile
  2168                           
  2169                           ;main.c: 173:     PIR1bits.TMR1IF = 0;
  2170   00059E  909E               	bcf	158,0,c	;volatile
  2171   0005A0  0012               	return		;funcret
  2172   0005A2                     __end_of_delay:
  2173                           	callstack 0
  2174                           
  2175 ;; *************** function ___lmul *****************
  2176 ;; Defined at:
  2177 ;;		line 15 in file "F:\Program Files\MicroChip\XC8\v2.45\pic\sources\c99\common\Umul32.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  multiplier      4   17[COMRAM] unsigned long 
  2180 ;;  multiplicand    4   21[COMRAM] unsigned long 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  product         4   25[COMRAM] unsigned long 
  2183 ;; Return value:  Size  Location     Type
  2184 ;;                  4   17[COMRAM] unsigned long 
  2185 ;; Registers used:
  2186 ;;		wreg, status,2, status,0
  2187 ;; Tracked objects:
  2188 ;;		On entry : 0/0
  2189 ;;		On exit  : 0/0
  2190 ;;		Unchanged: 0/0
  2191 ;; Data sizes:     COMRAM   BANK0   BANK1
  2192 ;;      Params:         8       0       0
  2193 ;;      Locals:         4       0       0
  2194 ;;      Temps:          0       0       0
  2195 ;;      Totals:        12       0       0
  2196 ;;Total ram usage:       12 bytes
  2197 ;; Hardware stack levels used: 1
  2198 ;; Hardware stack levels required when called: 2
  2199 ;; This function calls:
  2200 ;;		Nothing
  2201 ;; This function is called by:
  2202 ;;		_delay
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text17
  2207   0007E4                     __ptext17:
  2208                           	callstack 0
  2209   0007E4                     ___lmul:
  2210                           	callstack 25
  2211                           
  2212                           ;incstack = 0
  2213   0007E4  0E00               	movlw	0
  2214   0007E6  6E1A               	movwf	___lmul@product^0,c
  2215   0007E8  0E00               	movlw	0
  2216   0007EA  6E1B               	movwf	(___lmul@product+1)^0,c
  2217   0007EC  0E00               	movlw	0
  2218   0007EE  6E1C               	movwf	(___lmul@product+2)^0,c
  2219   0007F0  0E00               	movlw	0
  2220   0007F2  6E1D               	movwf	(___lmul@product+3)^0,c
  2221   0007F4                     l1317:
  2222   0007F4  A012               	btfss	___lmul@multiplier^0,0,c
  2223   0007F6  D008               	goto	l1321
  2224   0007F8  5016               	movf	___lmul@multiplicand^0,w,c
  2225   0007FA  261A               	addwf	___lmul@product^0,f,c
  2226   0007FC  5017               	movf	(___lmul@multiplicand+1)^0,w,c
  2227   0007FE  221B               	addwfc	(___lmul@product+1)^0,f,c
  2228   000800  5018               	movf	(___lmul@multiplicand+2)^0,w,c
  2229   000802  221C               	addwfc	(___lmul@product+2)^0,f,c
  2230   000804  5019               	movf	(___lmul@multiplicand+3)^0,w,c
  2231   000806  221D               	addwfc	(___lmul@product+3)^0,f,c
  2232   000808                     l1321:
  2233   000808  90D8               	bcf	status,0,c
  2234   00080A  3616               	rlcf	___lmul@multiplicand^0,f,c
  2235   00080C  3617               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2236   00080E  3618               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2237   000810  3619               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2238   000812  90D8               	bcf	status,0,c
  2239   000814  3215               	rrcf	(___lmul@multiplier+3)^0,f,c
  2240   000816  3214               	rrcf	(___lmul@multiplier+2)^0,f,c
  2241   000818  3213               	rrcf	(___lmul@multiplier+1)^0,f,c
  2242   00081A  3212               	rrcf	___lmul@multiplier^0,f,c
  2243   00081C  5012               	movf	___lmul@multiplier^0,w,c
  2244   00081E  1013               	iorwf	(___lmul@multiplier+1)^0,w,c
  2245   000820  1014               	iorwf	(___lmul@multiplier+2)^0,w,c
  2246   000822  1015               	iorwf	(___lmul@multiplier+3)^0,w,c
  2247   000824  A4D8               	btfss	status,2,c
  2248   000826  D7E6               	goto	l1317
  2249   000828  C01A  F012         	movff	___lmul@product,?___lmul
  2250   00082C  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  2251   000830  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  2252   000834  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  2253   000838  0012               	return		;funcret
  2254   00083A                     __end_of___lmul:
  2255                           	callstack 0
  2256                           
  2257 ;; *************** function _keypad_init *****************
  2258 ;; Defined at:
  2259 ;;		line 444 in file "main.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1
  2273 ;;      Params:         0       0       0
  2274 ;;      Locals:         0       0       0
  2275 ;;      Temps:          0       0       0
  2276 ;;      Totals:         0       0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used: 1
  2279 ;; Hardware stack levels required when called: 2
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_main
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text18
  2288   000966                     __ptext18:
  2289                           	callstack 0
  2290   000966                     _keypad_init:
  2291                           	callstack 28
  2292                           
  2293                           ;main.c: 446:     ADCON1bits.PCFG = 15;
  2294                           
  2295                           ;incstack = 0
  2296   000966  0E0F               	movlw	15
  2297   000968  12C1               	iorwf	193,f,c	;volatile
  2298                           
  2299                           ;main.c: 447:     TRISA = TRISA & 0xF0;
  2300   00096A  5092               	movf	146,w,c	;volatile
  2301   00096C  0BF0               	andlw	240
  2302   00096E  6E92               	movwf	146,c	;volatile
  2303                           
  2304                           ;main.c: 448:     TRISB = (TRISB & 0xFF) | 0xF0;
  2305   000970  5093               	movf	147,w,c	;volatile
  2306   000972  09F0               	iorlw	240
  2307   000974  6E93               	movwf	147,c	;volatile
  2308                           
  2309                           ;main.c: 450:     LATA = LATA & 0b11110000;
  2310   000976  5089               	movf	137,w,c	;volatile
  2311   000978  0BF0               	andlw	240
  2312   00097A  6E89               	movwf	137,c	;volatile
  2313                           
  2314                           ;main.c: 451:     PORTB = PORTB & 0b00001111;
  2315   00097C  5081               	movf	129,w,c	;volatile
  2316   00097E  0B0F               	andlw	15
  2317   000980  6E81               	movwf	129,c	;volatile
  2318                           
  2319                           ;main.c: 454:     T0CON = 0b00000100;
  2320   000982  0E04               	movlw	4
  2321   000984  6ED5               	movwf	213,c	;volatile
  2322                           
  2323                           ;main.c: 455:     INTCONbits.TMR0IF = 0;
  2324   000986  94F2               	bcf	242,2,c	;volatile
  2325                           
  2326                           ;main.c: 456:     TMR0H = 0x0B;
  2327   000988  0E0B               	movlw	11
  2328   00098A  6ED7               	movwf	215,c	;volatile
  2329                           
  2330                           ;main.c: 457:     TMR0L = 0xDD;
  2331   00098C  0EDD               	movlw	221
  2332   00098E  6ED6               	movwf	214,c	;volatile
  2333                           
  2334                           ;main.c: 458:     INTCONbits.TMR0IE = 1;
  2335   000990  8AF2               	bsf	242,5,c	;volatile
  2336                           
  2337                           ;main.c: 459:     T0CONbits.TMR0ON = 1;
  2338   000992  8ED5               	bsf	213,7,c	;volatile
  2339   000994  0012               	return		;funcret
  2340   000996                     __end_of_keypad_init:
  2341                           	callstack 0
  2342                           
  2343 ;; *************** function _ISR *****************
  2344 ;; Defined at:
  2345 ;;		line 123 in file "main.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;		None
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;  is_key_press    1   16[COMRAM] unsigned char 
  2350 ;;  current_row     1   15[COMRAM] unsigned char 
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1
  2360 ;;      Params:         0       0       0
  2361 ;;      Locals:         2       0       0
  2362 ;;      Temps:          9       0       0
  2363 ;;      Totals:        11       0       0
  2364 ;;Total ram usage:       11 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 1
  2367 ;; This function calls:
  2368 ;;		_keypress
  2369 ;; This function is called by:
  2370 ;;		Interrupt level 2
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	intcode
  2375   000008                     __pintcode:
  2376                           	callstack 0
  2377   000008                     _ISR:
  2378                           	callstack 24
  2379                           
  2380                           ;incstack = 0
  2381   000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2382   00000A  CFD9 F008          	movff	fsr2l,??_ISR+1
  2383   00000E  CFDA F009          	movff	fsr2h,??_ISR+2
  2384   000012  CFF3 F00A          	movff	prodl,??_ISR+3
  2385   000016  CFF4 F00B          	movff	prodh,??_ISR+4
  2386   00001A  CFF6 F00C          	movff	tblptrl,??_ISR+5
  2387   00001E  CFF7 F00D          	movff	tblptrh,??_ISR+6
  2388   000022  CFF8 F00E          	movff	tblptru,??_ISR+7
  2389   000026  CFF5 F00F          	movff	tablat,??_ISR+8
  2390                           
  2391                           ;main.c: 125:     if(INTCONbits.TMR0IF == 1)
  2392   00002A  A4F2               	btfss	242,2,c	;volatile
  2393   00002C  D043               	goto	i2l149
  2394                           
  2395                           ;main.c: 126:     {;main.c: 128:         INTCONbits.TMR0IF = 0;
  2396   00002E  94F2               	bcf	242,2,c	;volatile
  2397                           
  2398                           ;main.c: 129:         TMR0H = 0x0B;
  2399   000030  0E0B               	movlw	11
  2400   000032  6ED7               	movwf	215,c	;volatile
  2401                           
  2402                           ;main.c: 130:         TMR0L = 0xDD;
  2403   000034  0EDD               	movlw	221
  2404   000036  6ED6               	movwf	214,c	;volatile
  2405                           
  2406                           ;main.c: 131:         char is_key_pressed = 0;
  2407   000038  0E00               	movlw	0
  2408   00003A  6E11               	movwf	ISR@is_key_pressed^0,c
  2409                           
  2410                           ;main.c: 132:         char current_row = 0;
  2411   00003C  0E00               	movlw	0
  2412   00003E  6E10               	movwf	ISR@current_row^0,c
  2413                           
  2414                           ;main.c: 135:         while(!is_key_pressed && current_row < 4)
  2415   000040  D005               	goto	i2l1289
  2416   000042                     i2l1285:
  2417                           
  2418                           ;main.c: 136:         {;main.c: 137:             is_key_pressed = keypress(current_row);
  2419   000042  5010               	movf	ISR@current_row^0,w,c
  2420   000044  ECFD  F001         	call	_keypress
  2421   000048  6E11               	movwf	ISR@is_key_pressed^0,c
  2422                           
  2423                           ;main.c: 138:             current_row++;
  2424   00004A  2A10               	incf	ISR@current_row^0,f,c
  2425   00004C                     i2l1289:
  2426                           
  2427                           ;main.c: 135:         while(!is_key_pressed && current_row < 4)
  2428   00004C  5011               	movf	ISR@is_key_pressed^0,w,c
  2429   00004E  A4D8               	btfss	status,2,c
  2430   000050  D003               	goto	i2u50_40
  2431   000052  0E03               	movlw	3
  2432   000054  6410               	cpfsgt	ISR@current_row^0,c
  2433   000056  D7F5               	goto	i2l1285
  2434   000058                     i2u50_40:
  2435                           
  2436                           ;main.c: 140:         if(is_key_pressed && message_length < (10) || (is_key_pressed && c
      +                          urrent_row == 4 && (is_key_pressed == 1 || is_key_pressed == 3 || is_key_pressed == 4)))
  2437   000058  5011               	movf	ISR@is_key_pressed^0,w,c
  2438   00005A  B4D8               	btfsc	status,2,c
  2439   00005C  D003               	goto	i2u52_40
  2440   00005E  0E09               	movlw	9
  2441   000060  643D               	cpfsgt	_message_length^0,c
  2442   000062  D012               	goto	i2u57_40
  2443   000064                     i2u52_40:
  2444   000064  5011               	movf	ISR@is_key_pressed^0,w,c
  2445   000066  B4D8               	btfsc	status,2,c
  2446   000068  D025               	goto	i2l149
  2447   00006A  0E04               	movlw	4
  2448   00006C  1810               	xorwf	ISR@current_row^0,w,c
  2449   00006E  A4D8               	btfss	status,2,c
  2450   000070  D021               	goto	i2l149
  2451   000072  0411               	decf	ISR@is_key_pressed^0,w,c
  2452   000074  B4D8               	btfsc	status,2,c
  2453   000076  D008               	goto	i2u57_40
  2454   000078  0E03               	movlw	3
  2455   00007A  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2456   00007C  B4D8               	btfsc	status,2,c
  2457   00007E  D004               	goto	i2u57_40
  2458   000080  0E04               	movlw	4
  2459   000082  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2460   000084  A4D8               	btfss	status,2,c
  2461   000086  D016               	goto	i2l149
  2462   000088                     i2u57_40:
  2463                           
  2464                           ;main.c: 141:         {;main.c: 142:             keys[message_length] = keypad_array[--c
      +                          urrent_row][--is_key_pressed];
  2465   000088  0611               	decf	ISR@is_key_pressed^0,f,c
  2466   00008A  0610               	decf	ISR@current_row^0,f,c
  2467   00008C  5010               	movf	ISR@current_row^0,w,c
  2468   00008E  0D04               	mullw	4
  2469   000090  50F3               	movf	243,w,c
  2470   000092  0F01               	addlw	low _keypad_array
  2471   000094  2411               	addwf	ISR@is_key_pressed^0,w,c
  2472   000096  6E07               	movwf	??_ISR^0,c
  2473   000098  C007  FFF6         	movff	??_ISR,tblptrl
  2474   00009C                     	if	1	;There is more than 1 active tblptr byte
  2475   00009C  0E02               	movlw	high __smallconst
  2476   00009E  6EF7               	movwf	tblptrh,c
  2477   0000A0                     	endif
  2478   0000A0                     	if	0	;tblptru may be non-zero
  2479   0000A0                     	endif
  2480   0000A0                     	if	0	;tblptru may be non-zero
  2481   0000A0                     	endif
  2482   0000A0  503D               	movf	_message_length^0,w,c
  2483   0000A2  0F3E               	addlw	low _keys
  2484   0000A4  6ED9               	movwf	fsr2l,c
  2485   0000A6  6ADA               	clrf	fsr2h,c
  2486   0000A8  0008               	tblrd		*
  2487   0000AA  CFF5 FFDF          	movff	tablat,indf2
  2488                           
  2489                           ;main.c: 143:             key_pressed = 1;
  2490   0000AE  0E01               	movlw	1
  2491   0000B0  6E3C               	movwf	_key_pressed^0,c
  2492                           
  2493                           ;main.c: 144:             message_length++;
  2494   0000B2  2A3D               	incf	_message_length^0,f,c
  2495   0000B4                     i2l149:
  2496   0000B4  C00F  FFF5         	movff	??_ISR+8,tablat
  2497   0000B8  C00E  FFF8         	movff	??_ISR+7,tblptru
  2498   0000BC  C00D  FFF7         	movff	??_ISR+6,tblptrh
  2499   0000C0  C00C  FFF6         	movff	??_ISR+5,tblptrl
  2500   0000C4  C00B  FFF4         	movff	??_ISR+4,prodh
  2501   0000C8  C00A  FFF3         	movff	??_ISR+3,prodl
  2502   0000CC  C009  FFDA         	movff	??_ISR+2,fsr2h
  2503   0000D0  C008  FFD9         	movff	??_ISR+1,fsr2l
  2504   0000D4  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2505   0000D6  0011               	retfie		f
  2506   0000D8                     __end_of_ISR:
  2507                           	callstack 0
  2508                           
  2509 ;; *************** function _keypress *****************
  2510 ;; Defined at:
  2511 ;;		line 369 in file "main.c"
  2512 ;; Parameters:    Size  Location     Type
  2513 ;;  current_row     1    wreg     unsigned char 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  current_row     1    3[COMRAM] unsigned char 
  2516 ;;  col_num         1    5[COMRAM] unsigned char 
  2517 ;;  col_key_pres    1    4[COMRAM] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      unsigned char 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1
  2527 ;;      Params:         0       0       0
  2528 ;;      Locals:         3       0       0
  2529 ;;      Temps:          3       0       0
  2530 ;;      Totals:         6       0       0
  2531 ;;Total ram usage:        6 bytes
  2532 ;; Hardware stack levels used: 1
  2533 ;; This function calls:
  2534 ;;		Nothing
  2535 ;; This function is called by:
  2536 ;;		_ISR
  2537 ;; This function uses a non-reentrant model
  2538 ;;
  2539                           
  2540                           	psect	text20
  2541   0003FA                     __ptext20:
  2542                           	callstack 0
  2543   0003FA                     _keypress:
  2544                           	callstack 24
  2545                           
  2546                           ;incstack = 0
  2547                           ;keypress@current_row stored from wreg
  2548   0003FA  6E04               	movwf	keypress@current_row^0,c
  2549                           
  2550                           ;main.c: 369: char keypress(char current_row);main.c: 370: {;main.c: 372:     LATA = (un
      +                          signed char)(1 << current_row) | LATA;
  2551   0003FC  C004  F001         	movff	keypress@current_row,??_keypress
  2552   000400  0E01               	movlw	1
  2553   000402  6E02               	movwf	(??_keypress+1)^0,c
  2554   000404  2A01               	incf	??_keypress^0,f,c
  2555   000406  D002               	goto	i2u20_44
  2556   000408                     i2u20_45:
  2557   000408  90D8               	bcf	status,0,c
  2558   00040A  3602               	rlcf	(??_keypress+1)^0,f,c
  2559   00040C                     i2u20_44:
  2560   00040C  2E01               	decfsz	??_keypress^0,f,c
  2561   00040E  D7FC               	goto	i2u20_45
  2562   000410  5002               	movf	(??_keypress+1)^0,w,c
  2563   000412  1089               	iorwf	137,w,c	;volatile
  2564   000414  6E89               	movwf	137,c	;volatile
  2565                           
  2566                           ;main.c: 373:     char col_key_press = 0;
  2567   000416  0E00               	movlw	0
  2568   000418  6E05               	movwf	keypress@col_key_press^0,c
  2569                           
  2570                           ;main.c: 374:     char col_num = 0;
  2571   00041A  0E00               	movlw	0
  2572   00041C  6E06               	movwf	keypress@col_num^0,c
  2573                           
  2574                           ;main.c: 376:     while(col_num < 4 && !col_key_press)
  2575   00041E  D046               	goto	i2l1173
  2576   000420                     i2l1153:
  2577                           
  2578                           ;main.c: 377:     {;main.c: 378:         if((128 >> col_num) & PORTB)
  2579   000420  C006  F001         	movff	keypress@col_num,??_keypress
  2580   000424  0E80               	movlw	128
  2581   000426  6E02               	movwf	(??_keypress+1)^0,c
  2582   000428  0E00               	movlw	0
  2583   00042A  6E03               	movwf	(??_keypress+2)^0,c
  2584   00042C  2A01               	incf	??_keypress^0,f,c
  2585   00042E  D003               	goto	i2u21_44
  2586   000430                     i2u21_45:
  2587   000430  3403               	rlcf	(??_keypress+2)^0,w,c
  2588   000432  3203               	rrcf	(??_keypress+2)^0,f,c
  2589   000434  3202               	rrcf	(??_keypress+1)^0,f,c
  2590   000436                     i2u21_44:
  2591   000436  2E01               	decfsz	??_keypress^0,f,c
  2592   000438  D7FB               	goto	i2u21_45
  2593   00043A  5002               	movf	(??_keypress+1)^0,w,c
  2594   00043C  1481               	andwf	129,w,c	;volatile
  2595   00043E  0900               	iorlw	0
  2596   000440  B4D8               	btfsc	status,2,c
  2597   000442  D033               	goto	i2l1171
  2598                           
  2599                           ;main.c: 379:         {;main.c: 380:             T3CON = 0b10010000;
  2600   000444  0E90               	movlw	144
  2601   000446  6EB1               	movwf	177,c	;volatile
  2602                           
  2603                           ;main.c: 381:             PIE2bits.TMR3IE = 0;
  2604   000448  92A0               	bcf	160,1,c	;volatile
  2605                           
  2606                           ;main.c: 382:             TMR3H = 0x63;
  2607   00044A  0E63               	movlw	99
  2608   00044C  6EB3               	movwf	179,c	;volatile
  2609                           
  2610                           ;main.c: 383:             TMR3L = 0xC1;
  2611   00044E  0EC1               	movlw	193
  2612   000450  6EB2               	movwf	178,c	;volatile
  2613                           
  2614                           ;main.c: 384:             PIR2bits.TMR3IF = 0;
  2615   000452  92A1               	bcf	161,1,c	;volatile
  2616                           
  2617                           ;main.c: 386:             T3CONbits.TMR3ON = 1;
  2618   000454  80B1               	bsf	177,0,c	;volatile
  2619   000456                     i2l239:
  2620   000456  A2A1               	btfss	161,1,c	;volatile
  2621   000458  D7FE               	goto	i2l239
  2622                           
  2623                           ;main.c: 389:             T3CONbits.TMR3ON = 0;
  2624   00045A  90B1               	bcf	177,0,c	;volatile
  2625                           
  2626                           ;main.c: 390:             PIR2bits.TMR3IF = 0;
  2627   00045C  92A1               	bcf	161,1,c	;volatile
  2628                           
  2629                           ;main.c: 392:             if((128 >> col_num) & PORTB)
  2630   00045E  C006  F001         	movff	keypress@col_num,??_keypress
  2631   000462  0E80               	movlw	128
  2632   000464  6E02               	movwf	(??_keypress+1)^0,c
  2633   000466  0E00               	movlw	0
  2634   000468  6E03               	movwf	(??_keypress+2)^0,c
  2635   00046A  2A01               	incf	??_keypress^0,f,c
  2636   00046C  D003               	goto	i2u24_44
  2637   00046E                     i2u24_45:
  2638   00046E  3403               	rlcf	(??_keypress+2)^0,w,c
  2639   000470  3203               	rrcf	(??_keypress+2)^0,f,c
  2640   000472  3202               	rrcf	(??_keypress+1)^0,f,c
  2641   000474                     i2u24_44:
  2642   000474  2E01               	decfsz	??_keypress^0,f,c
  2643   000476  D7FB               	goto	i2u24_45
  2644   000478  5002               	movf	(??_keypress+1)^0,w,c
  2645   00047A  1481               	andwf	129,w,c	;volatile
  2646   00047C  0900               	iorlw	0
  2647   00047E  B4D8               	btfsc	status,2,c
  2648   000480  D014               	goto	i2l1171
  2649   000482                     i2u25_40:
  2650   000482  C006  F001         	movff	keypress@col_num,??_keypress
  2651   000486  0E80               	movlw	128
  2652   000488  6E02               	movwf	(??_keypress+1)^0,c
  2653   00048A  0E00               	movlw	0
  2654   00048C  6E03               	movwf	(??_keypress+2)^0,c
  2655   00048E  2A01               	incf	??_keypress^0,f,c
  2656   000490  D003               	goto	i2u26_44
  2657   000492                     i2u26_45:
  2658   000492  3403               	rlcf	(??_keypress+2)^0,w,c
  2659   000494  3203               	rrcf	(??_keypress+2)^0,f,c
  2660   000496  3202               	rrcf	(??_keypress+1)^0,f,c
  2661   000498                     i2u26_44:
  2662   000498  2E01               	decfsz	??_keypress^0,f,c
  2663   00049A  D7FB               	goto	i2u26_45
  2664   00049C  5002               	movf	(??_keypress+1)^0,w,c
  2665   00049E  1481               	andwf	129,w,c	;volatile
  2666   0004A0  0900               	iorlw	0
  2667   0004A2  A4D8               	btfss	status,2,c
  2668   0004A4  D7EE               	goto	i2u25_40
  2669                           
  2670                           ;main.c: 395:                 col_key_press = col_num + 1;
  2671   0004A6  2806               	incf	keypress@col_num^0,w,c
  2672   0004A8  6E05               	movwf	keypress@col_key_press^0,c
  2673   0004AA                     i2l1171:
  2674                           
  2675                           ;main.c: 398:         col_num++;
  2676   0004AA  2A06               	incf	keypress@col_num^0,f,c
  2677   0004AC                     i2l1173:
  2678                           
  2679                           ;main.c: 376:     while(col_num < 4 && !col_key_press)
  2680   0004AC  0E04               	movlw	4
  2681   0004AE  6006               	cpfslt	keypress@col_num^0,c
  2682   0004B0  D003               	goto	i2u29_40
  2683   0004B2  5005               	movf	keypress@col_key_press^0,w,c
  2684   0004B4  B4D8               	btfsc	status,2,c
  2685   0004B6  D7B4               	goto	i2l1153
  2686   0004B8                     i2u29_40:
  2687                           
  2688                           ;main.c: 402:     LATA = (unsigned char)(1 << current_row) ^ LATA;
  2689   0004B8  C004  F001         	movff	keypress@current_row,??_keypress
  2690   0004BC  0E01               	movlw	1
  2691   0004BE  6E02               	movwf	(??_keypress+1)^0,c
  2692   0004C0  2A01               	incf	??_keypress^0,f,c
  2693   0004C2  D002               	goto	i2u30_44
  2694   0004C4                     i2u30_45:
  2695   0004C4  90D8               	bcf	status,0,c
  2696   0004C6  3602               	rlcf	(??_keypress+1)^0,f,c
  2697   0004C8                     i2u30_44:
  2698   0004C8  2E01               	decfsz	??_keypress^0,f,c
  2699   0004CA  D7FC               	goto	i2u30_45
  2700   0004CC  5002               	movf	(??_keypress+1)^0,w,c
  2701   0004CE  1889               	xorwf	137,w,c	;volatile
  2702   0004D0  6E89               	movwf	137,c	;volatile
  2703                           
  2704                           ;main.c: 403:     return col_key_press;
  2705   0004D2  5005               	movf	keypress@col_key_press^0,w,c
  2706   0004D4  0012               	return		;funcret
  2707   0004D6                     __end_of_keypress:
  2708                           	callstack 0
  2709                           
  2710                           	psect	rparam
  2711   000000                     
  2712                           	psect	temp
  2713   000049                     btemp:
  2714                           	callstack 0
  2715   000049                     	ds	1
  2716   000000                     int$flags	set	btemp
  2717   000000                     wtemp8	set	btemp+1
  2718   000000                     ttemp5	set	btemp+1
  2719   000000                     ttemp6	set	btemp+4
  2720   000000                     ttemp7	set	btemp+8
  2721                           
  2722                           	psect	config
  2723                           
  2724                           ; Padding undefined space
  2725   300000                     	org	3145728
  2726   300000  FF                 	db	255
  2727                           
  2728                           ;Config register CONFIG1H @ 0x300001
  2729                           ;	Oscillator
  2730                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2731                           ;	Fail-Safe Clock Monitor Enable bit
  2732                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2733                           ;	Internal/External Oscillator Switchover bit
  2734                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2735   300001                     	org	3145729
  2736   300001  08                 	db	8
  2737                           
  2738                           ;Config register CONFIG2L @ 0x300002
  2739                           ;	Power-up Timer Enable bit
  2740                           ;	PWRT = OFF, PWRT disabled
  2741                           ;	Brown-out Reset Enable bits
  2742                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2743                           ;	Brown-out Reset Voltage bits
  2744                           ;	BORV = 3, Minimum Setting
  2745   300002                     	org	3145730
  2746   300002  1F                 	db	31
  2747                           
  2748                           ;Config register CONFIG2H @ 0x300003
  2749                           ;	Watchdog Timer Enable bit
  2750                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2751                           ;	Watchdog Timer Postscale Select bits
  2752                           ;	WDTPS = 32768, 1:32768
  2753   300003                     	org	3145731
  2754   300003  1E                 	db	30
  2755                           
  2756                           ; Padding undefined space
  2757   300004                     	org	3145732
  2758   300004  FF                 	db	255
  2759                           
  2760                           ;Config register CONFIG3H @ 0x300005
  2761                           ;	CCP2 MUX bit
  2762                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2763                           ;	PORTB A/D Enable bit
  2764                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2765                           ;	Low-Power Timer1 Oscillator Enable bit
  2766                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2767                           ;	MCLR Pin Enable bit
  2768                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2769   300005                     	org	3145733
  2770   300005  83                 	db	131
  2771                           
  2772                           ;Config register CONFIG4L @ 0x300006
  2773                           ;	Stack Full/Underflow Reset Enable bit
  2774                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2775                           ;	Single-Supply ICSP Enable bit
  2776                           ;	LVP = OFF, Single-Supply ICSP disabled
  2777                           ;	Boot Block Size Select bits
  2778                           ;	BBSIZ = BB256, 256 Word
  2779                           ;	Extended Instruction Set Enable bit
  2780                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2781                           ;	Background Debugger Enable bit
  2782                           ;	DEBUG = 0x1, unprogrammed default
  2783   300006                     	org	3145734
  2784   300006  81                 	db	129
  2785                           
  2786                           ; Padding undefined space
  2787   300007                     	org	3145735
  2788   300007  FF                 	db	255
  2789                           
  2790                           ;Config register CONFIG5L @ 0x300008
  2791                           ;	Code Protection bit
  2792                           ;	CP0 = OFF, Block 0 not code-protected
  2793                           ;	Code Protection bit
  2794                           ;	CP1 = OFF, Block 1 not code-protected
  2795   300008                     	org	3145736
  2796   300008  03                 	db	3
  2797                           
  2798                           ;Config register CONFIG5H @ 0x300009
  2799                           ;	Boot Block Code Protection bitProtect Boot
  2800                           ;	CPB = OFF, Boot block not code-protected
  2801                           ;	Data EEPROM Code Protection bit
  2802                           ;	CPD = OFF, Data EEPROM not code-protected
  2803   300009                     	org	3145737
  2804   300009  C0                 	db	192
  2805                           
  2806                           ;Config register CONFIG6L @ 0x30000A
  2807                           ;	Write Protection bit
  2808                           ;	WRT0 = OFF, Block 0 not write-protected
  2809                           ;	Write Protection bit
  2810                           ;	WRT1 = OFF, Block 1 not write-protected
  2811   30000A                     	org	3145738
  2812   30000A  03                 	db	3
  2813                           
  2814                           ;Config register CONFIG6H @ 0x30000B
  2815                           ;	Configuration Register Write Protection bit
  2816                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2817                           ;	Boot Block Write Protection bit
  2818                           ;	WRTB = OFF, Boot block not write-protected
  2819                           ;	Data EEPROM Write Protection bit
  2820                           ;	WRTD = OFF, Data EEPROM not write-protected
  2821   30000B                     	org	3145739
  2822   30000B  E0                 	db	224
  2823                           
  2824                           ;Config register CONFIG7L @ 0x30000C
  2825                           ;	Table Read Protection bit
  2826                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2827                           ;	Table Read Protection bit
  2828                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2829   30000C                     	org	3145740
  2830   30000C  03                 	db	3
  2831                           
  2832                           ;Config register CONFIG7H @ 0x30000D
  2833                           ;	Boot Block Table Read Protection bit
  2834                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2835   30000D                     	org	3145741
  2836   30000D  40                 	db	64
  2837                           tosu	equ	0xFFF
  2838                           tosh	equ	0xFFE
  2839                           tosl	equ	0xFFD
  2840                           stkptr	equ	0xFFC
  2841                           pclatu	equ	0xFFB
  2842                           pclath	equ	0xFFA
  2843                           pcl	equ	0xFF9
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           indf0	equ	0xFEF
  2851                           postinc0	equ	0xFEE
  2852                           postdec0	equ	0xFED
  2853                           preinc0	equ	0xFEC
  2854                           plusw0	equ	0xFEB
  2855                           fsr0h	equ	0xFEA
  2856                           fsr0l	equ	0xFE9
  2857                           wreg	equ	0xFE8
  2858                           indf1	equ	0xFE7
  2859                           postinc1	equ	0xFE6
  2860                           postdec1	equ	0xFE5
  2861                           preinc1	equ	0xFE4
  2862                           plusw1	equ	0xFE3
  2863                           fsr1h	equ	0xFE2
  2864                           fsr1l	equ	0xFE1
  2865                           bsr	equ	0xFE0
  2866                           indf2	equ	0xFDF
  2867                           postinc2	equ	0xFDE
  2868                           postdec2	equ	0xFDD
  2869                           preinc2	equ	0xFDC
  2870                           plusw2	equ	0xFDB
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    16
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      72
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    lcd_message@message	PTR unsigned char  size(2) Largest target is 11
		 -> keys(COMRAM[11]), STR_1(CODE[8]), STR_2(CODE[7]), STR_3(CODE[9]), 
		 -> STR_4(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_lcd_move_cursor
    _send_message->_packet_interim_amble
    _send_message->_packet_pre_post_amble
    _packet_pre_post_amble->_send
    _packet_interim_amble->_send
    _send->_delay
    _lcd_init->_lcd_move_cursor
    _lcd_move_cursor->_lcd_command
    _lcd_clear->_delay
    _lcd_backspace->_lcd_command
    _lcd_message->_lcd_char
    _lcd_char->_delay
    _lcd_command->_delay
    _delay->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_keypress

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   23173
                                             50 COMRAM     9     9      0
                        _keypad_init
                      _lcd_backspace
                          _lcd_clear
                           _lcd_init
                        _lcd_message
                    _lcd_move_cursor
                       _send_message
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_message                                         7     7      0    3481
                                             44 COMRAM     5     5      0
               _packet_interim_amble
              _packet_pre_post_amble
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_pre_post_amble                                2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_interim_amble                                 2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _send                                                 1     1      0    1091
                                             41 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    8911
                          _lcd_clear
                        _lcd_command
                        _lcd_message
                    _lcd_move_cursor
 ---------------------------------------------------------------------------------
 (1) _lcd_move_cursor                                      2     1      1    3209
                                             48 COMRAM     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0    1099
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _lcd_backspace                                        0     0      0    4603
                        _lcd_command
                        _lcd_message
 ---------------------------------------------------------------------------------
 (1) _lcd_message                                          2     0      2    1688
                                             43 COMRAM     2     0      2
                 _i2c_start_and_addr
                           _i2c_stop
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0    1172
                                             41 COMRAM     2     2      0
                              _delay
                        _i2c_data_tx
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          7     4      3    2915
                                             41 COMRAM     7     4      3
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_start_and_addr                                   1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_data_tx                                          1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                               12     8      4    1069
                                             29 COMRAM    12     8      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 11    11      0     300
                                              6 COMRAM    11    11      0
                           _keypress
 ---------------------------------------------------------------------------------
 (7) _keypress                                             6     6      0     135
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_init
   _lcd_backspace
     _lcd_command
       _delay
         ___lmul
       _i2c_data_tx
       _i2c_start_and_addr
       _i2c_stop
     _lcd_message
       _i2c_start_and_addr
       _i2c_stop
       _lcd_char
         _delay
         _i2c_data_tx
   _lcd_clear
     _delay
     _i2c_data_tx
     _i2c_start_and_addr
     _i2c_stop
   _lcd_init
     _lcd_clear
     _lcd_command
     _lcd_message
     _lcd_move_cursor
       _lcd_command
   _lcd_message
   _lcd_move_cursor
   _send_message
     _packet_interim_amble
       _send
         _delay
     _packet_pre_post_amble
       _send
     _send
   _system_init

 _ISR (ROOT)
   _keypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      48       1       57.1%
BITBIGSFRlh         19      0       0       9        0.0%
BITBIGSFRlllhll      F      0       0      15        0.0%
BITBIGSFRlllhll      D      0       0      14        0.0%
BITBIGSFRh           D      0       0       8        0.0%
BITBIGSFRlllllh      7      0       0      20        0.0%
BITBIGSFRllllhl      6      0       0      18        0.0%
BITBIGSFRllllhl      6      0       0      19        0.0%
BITBIGSFRlllhll      3      0       0      13        0.0%
BITBIGSFRlllhh       3      0       0      12        0.0%
BITBIGSFRllhhl       2      0       0      11        0.0%
BITBIGSFRllllhh      1      0       0      17        0.0%
BITBIGSFRllhhh       1      0       0      10        0.0%
BITBIGSFRlllhll      1      0       0      16        0.0%
BITBIGSFRllllll      1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      22        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Mar 25 22:19:34 2024

                  _SSPSTATbits 0FC7            __end_of_system_init 08C4                            l211 0A24  
                          l212 0A28                            l125 03F6                            l118 0322  
                          l225 0A0C                            l154 0544                            l219 0A36  
                          l229 0A16                            l158 0598                            l967 0A12  
                          u700 06AE                            _ISR 0008                            u630 07B0  
                          u640 07D8                            u637 07A6                            u670 09C0  
                          u647 07CE                            u680 09EC                            u840 0362  
                          wreg 0FE8                 lcd_char@letter 002B                           ?_ISR 0001  
                         l1321 0808                           l1331 051A                           l1317 07F4  
                         l1405 0950                           l1413 099E                           l1425 09CA  
                         l1339 054C                           l1531 0340                           l1515 02F2  
                         l1507 02CE                           l1383 07B8                           l1455 0656  
                         l1543 037A                           l1519 0300                           l1379 0790  
                         l1459 0680                           l1563 03D4                           l1491 0292  
                         l1477 0238                           l1559 03C6                           STR_1 021A  
                         STR_2 0222                           STR_3 0211                           STR_4 0229  
                         _LATA 0F89                           _LATB 0F8A                  ??_i2c_data_tx 0012  
                         _main 022C                           _keys 003E                           _send 08C4  
                         fsr0h 0FEA                ??_lcd_backspace 0031                           indf0 0FEF  
                         fsr2h 0FDA                           fsr0l 0FE9                           indf2 0FDF  
                         fsr2l 0FD9                           btemp 0049                           prodh 0FF4  
                         prodl 0FF3                           start 00D8      i2c_start_and_addr@address 0012  
             ?_lcd_move_cursor 0031                   ___param_bank 0000                          ??_ISR 0007  
                lcd_command@lt 002A                  lcd_command@rs 002C                  lcd_command@rw 002B  
                        ?_main 0001                          ?_send 0001                          _T0CON 0FD5  
                        _T1CON 0FCD                          _T3CON 0FB1                          i2l149 00B4  
                        i2l239 0456                          _TMR0H 0FD7                          _TMR1H 0FCF  
                        _TMR0L 0FD6                          _TMR1L 0FCE                          _TMR3H 0FB3  
                        _TMR3L 0FB2                          _PORTB 0F81                          _TRISA 0F92  
                        _TRISB 0F93            ___lmul@multiplicand 0016                          _delay 04D6  
                 ?_keypad_init 0001                i2c_data_tx@data 0012                          main@i 0036  
                        tablat 0FF5                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          status 0FD8                          wtemp8 004A  
          __end_of_i2c_data_tx 0A34                __initialization 09EE                    _system_init 088A  
                 __end_of_main 03FA                   __end_of_send 08FC          packet_interim_amble@i 002B  
             __end_of_i2c_stop 0A3E          _packet_pre_post_amble 0996                         ??_main 0033  
                       ??_send 002A                  __activetblptr 0002             _i2c_start_and_addr 0A08  
                       ?_delay 001E            ?_i2c_start_and_addr 0001                         i2l1153 0420  
                       i2l1171 04AA                         i2l1173 04AC                         i2l1285 0042  
                       i2l1289 004C                         _SSPADD 0FC8                         _SSPBUF 0FC9  
             __end_of_lcd_char 088A               __end_of_lcd_init 0728                         ___lmul 07E4  
         ??_i2c_start_and_addr 0012                         clear_0 09F4                         isa$std 0001  
             __end_of_keypress 04D6                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8        lcd_move_cursor@position 0031  
                   __accesstop 0080        __end_of__initialization 09FA                    _i2c_data_tx 0A22  
                ___rparam_used 0001                 __pcstackCOMRAM 0001                  __end_of_delay 05A2  
       ?_packet_pre_post_amble 0001                        ??_delay 0022                      ?_i2c_stop 0001  
              lcd_command@data 0030                        ?___lmul 0012                 ISR@current_row 0010  
               ___lmul@product 001A                  ?_send_message 0001                        i2u20_44 040C  
                      i2u20_45 0408                        i2u21_44 0436                        i2u21_45 0430  
                      i2u30_44 04C8                        i2u30_45 04C4                        i2u24_44 0474  
                      i2u24_45 046E                        i2u25_40 0482                        i2u50_40 0058  
                      i2u26_44 0498                        i2u26_45 0492                        i2u52_40 0064  
                      i2u29_40 04B8                        i2u57_40 0088                      ?_lcd_char 0001  
                    ?_lcd_init 0001                     ??_i2c_stop 0012            lcd_move_cursor@line 0032  
                    ?_keypress 0001          __end_of_lcd_backspace 0932                        __Hparam 0000  
                      __Lparam 0000              __end_of_lcd_clear 0788                   ?_system_init 0001  
                 __psmallconst 0200                 ??_send_message 002D                        __pcinit 09EE  
                      __ramtop 0200                        __ptext0 022C                        __ptext1 088A  
                      __ptext2 0640                        __ptext3 0996                        __ptext4 09C2  
                      __ptext5 08C4                        __ptext6 06B4                        __ptext7 0932  
                      __ptext8 0728                        __ptext9 08FC                      _T0CONbits 0FD5  
                    _T1CONbits 0FCD                      _T3CONbits 0FB1                     ??_lcd_char 002A  
                   ??_lcd_init 0033           end_of_initialization 09FA           __end_of_keypad_array 0211  
                __Lmediumconst 0000                     ??_keypress 0001                        postinc0 0FEE  
                      postinc2 0FDE                      _TRISCbits 0F94             lcd_message@message 002C  
                 ?_i2c_data_tx 0001                  ??_lcd_command 002D                  ??_lcd_message 002E  
      ??_packet_pre_post_amble 002B                  send_message@i 0030                  send_message@j 002E  
               __end_of___lmul 083A               delay@timer_value 0022            start_initialization 09EE  
                  __end_of_ISR 00D8              ??_lcd_move_cursor 0032   __end_of_packet_interim_amble 09EE  
         __end_of_send_message 06B4                       ??___lmul 001A            __end_of_lcd_command 0640  
          __end_of_lcd_message 07E4                    __pbssCOMRAM 003C                  ??_keypad_init 0012  
              keypress@col_num 0006                      __pintcode 0008              ISR@is_key_pressed 0011  
                 _keypad_array 0201                      _lcd_clear 0728                    __smallconst 0200  
                     _LATCbits 0F8B            __end_of_keypad_init 0996                       _PIE1bits 0F9D  
                     _PIE2bits 0FA0                    _lcd_command 05A2                       _PIR1bits 0F9E  
                     _PIR2bits 0FA1                    _lcd_message 0788          keypress@col_key_press 0005  
                     _RCONbits 0FD0                     ?_lcd_clear 0001           _packet_interim_amble 09C2  
                   _ADCON1bits 0FC1                      main@i_896 003A                      main@i_898 0038  
            ___lmul@multiplier 0012                    _INTCON2bits 0FF1                       _i2c_stop 0A34  
                     __Hrparam 0000            keypress@current_row 0004                       __Lrparam 0000  
__end_of_packet_pre_post_amble 09C2          ?_packet_interim_amble 0001                _lcd_move_cursor 0932  
                 _send_message 0640                    _key_pressed 003C                       __ptext10 0788  
                     __ptext11 083A                       __ptext20 03FA                       __ptext12 05A2  
                     __ptext13 0A34                       __ptext14 0A08                       __ptext15 0A22  
                     __ptext16 04D6                       __ptext17 07E4                       __ptext18 0966  
                     _lcd_char 083A                    _keypad_init 0966                       _lcd_init 06B4  
               _message_length 003D                       _keypress 03FA                  _lcd_backspace 08FC  
   __end_of_i2c_start_and_addr 0A22                       isa$xinst 0000                       int$flags 0049  
            delay@milliseconds 001E         packet_pre_post_amble@i 002B                    ??_lcd_clear 002A  
                  _OSCTUNEbits 0F9B                     _INTCONbits 0FF2                       intlevel2 0000  
                     send@data 002A                 ?_lcd_backspace 0001                     _OSCCONbits 0FD3  
      __end_of_lcd_move_cursor 0966                  ??_system_init 0012         ??_packet_interim_amble 002B  
                  _SSPCON1bits 0FC6                    _SSPCON2bits 0FC5                   ?_lcd_command 002A  
                 ?_lcd_message 002C  
