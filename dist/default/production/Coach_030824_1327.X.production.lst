

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Mar 22 16:46:32 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	18F2221
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    34   000000                     
    35                           ; Generated 09/02/2023 GMT
    36                           ; 
    37                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution. Publication is not required when
    51                           ;        this file is used in an embedded application.
    52                           ; 
    53                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    54                           ;        software without specific prior written permission.
    55                           ; 
    56                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    57                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    58                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    59                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    60                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    61                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    62                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    63                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    64                           ; 
    65                           ; 
    66                           ; Code-generator required, PIC18F2221 Definitions
    67                           ; 
    68                           ; SFR Addresses
    69   000000                     
    70                           	psect	smallconst
    71   000200                     __psmallconst:
    72                           	callstack 0
    73   000200  00                 	db	0
    74   000201                     _keypad_array:
    75                           	callstack 0
    76   000201  31                 	db	49
    77   000202  32                 	db	50
    78   000203  33                 	db	51
    79   000204  41                 	db	65
    80   000205  34                 	db	52
    81   000206  35                 	db	53
    82   000207  36                 	db	54
    83   000208  42                 	db	66
    84   000209  37                 	db	55
    85   00020A  38                 	db	56
    86   00020B  39                 	db	57
    87   00020C  43                 	db	67
    88   00020D  2A                 	db	42
    89   00020E  30                 	db	48
    90   00020F  23                 	db	35
    91   000210  44                 	db	68
    92   000211                     __end_of_keypad_array:
    93                           	callstack 0
    94   000000                     _SSPCON1bits	set	4038
    95   000000                     _SSPADD	set	4040
    96   000000                     _SSPSTATbits	set	4039
    97   000000                     _TMR3L	set	4018
    98   000000                     _TMR3H	set	4019
    99   000000                     _TMR1L	set	4046
   100   000000                     _TMR1H	set	4047
   101   000000                     _T0CONbits	set	4053
   102   000000                     _T3CONbits	set	4017
   103   000000                     _T1CONbits	set	4045
   104   000000                     _PORTB	set	3969
   105   000000                     _LATA	set	3977
   106   000000                     _LATB	set	3978
   107   000000                     _PIE1bits	set	3997
   108   000000                     _T1CON	set	4045
   109   000000                     _TMR0L	set	4054
   110   000000                     _TMR0H	set	4055
   111   000000                     _INTCONbits	set	4082
   112   000000                     _INTCON2bits	set	4081
   113   000000                     _PIE2bits	set	4000
   114   000000                     _T3CON	set	4017
   115   000000                     _SSPCON2bits	set	4037
   116   000000                     _SSPBUF	set	4041
   117   000000                     _PIR1bits	set	3998
   118   000000                     _RCONbits	set	4048
   119   000000                     _OSCCONbits	set	4051
   120   000000                     _TRISA	set	3986
   121   000000                     _TRISB	set	3987
   122   000000                     _TRISCbits	set	3988
   123   000000                     _OSCTUNEbits	set	3995
   124   000000                     _LATCbits	set	3979
   125   000000                     _PIR2bits	set	4001
   126   000000                     _ADCON1bits	set	4033
   127   000000                     _T0CON	set	4053
   128   000211                     STR_3:
   129   000211  43                 	db	67	;'C'
   130   000212  61                 	db	97	;'a'
   131   000213  70                 	db	112	;'p'
   132   000214  73                 	db	115	;'s'
   133   000215  74                 	db	116	;'t'
   134   000216  6F                 	db	111	;'o'
   135   000217  6E                 	db	110	;'n'
   136   000218  65                 	db	101	;'e'
   137   000219  00                 	db	0
   138   00021A                     STR_1:
   139   00021A  53                 	db	83	;'S'
   140   00021B  65                 	db	101	;'e'
   141   00021C  6E                 	db	110	;'n'
   142   00021D  64                 	db	100	;'d'
   143   00021E  69                 	db	105	;'i'
   144   00021F  6E                 	db	110	;'n'
   145   000220  67                 	db	103	;'g'
   146   000221  00                 	db	0
   147   000222                     STR_2:
   148   000222  53                 	db	83	;'S'
   149   000223  65                 	db	101	;'e'
   150   000224  6E                 	db	110	;'n'
   151   000225  69                 	db	105	;'i'
   152   000226  6F                 	db	111	;'o'
   153   000227  72                 	db	114	;'r'
   154   000228  00                 	db	0
   155   000229                     STR_4:
   156   000229  20                 	db	32
   157   00022A  00                 	db	0
   158   00022B  00                 	db	0	; dummy byte at the end
   159   000000                     
   160                           ; #config settings
   161                           
   162                           	psect	cinit
   163   0009E4                     __pcinit:
   164                           	callstack 0
   165   0009E4                     start_initialization:
   166                           	callstack 0
   167   0009E4                     __initialization:
   168                           	callstack 0
   169                           
   170                           ; Clear objects allocated to COMRAM (13 bytes)
   171   0009E4  EE00  F03C         	lfsr	0,__pbssCOMRAM
   172   0009E8  0E0D               	movlw	13
   173   0009EA                     clear_0:
   174   0009EA  6AEE               	clrf	postinc0,c
   175   0009EC  06E8               	decf	wreg,f,c
   176   0009EE  E1FD               	bnz	clear_0
   177   0009F0                     end_of_initialization:
   178                           	callstack 0
   179   0009F0                     __end_of__initialization:
   180                           	callstack 0
   181   0009F0  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   182   0009F2  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   183   0009F4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184   0009F6  6EF8               	movwf	tblptru,c
   185   0009F8  0100               	movlb	0
   186   0009FA  EF16  F001         	goto	_main	;jump to C main() function
   187                           
   188                           	psect	bssCOMRAM
   189   00003C                     __pbssCOMRAM:
   190                           	callstack 0
   191   00003C                     _key_pressed:
   192                           	callstack 0
   193   00003C                     	ds	1
   194   00003D                     _message_length:
   195                           	callstack 0
   196   00003D                     	ds	1
   197   00003E                     _keys:
   198                           	callstack 0
   199   00003E                     	ds	11
   200                           
   201                           	psect	cstackCOMRAM
   202   000001                     __pcstackCOMRAM:
   203                           	callstack 0
   204   000001                     ??_keypress:
   205   000001                     
   206                           ; 1 bytes @ 0x0
   207   000001                     	ds	3
   208   000004                     keypress@current_row:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x3
   212   000004                     	ds	1
   213   000005                     keypress@col_key_press:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x4
   217   000005                     	ds	1
   218   000006                     keypress@col_num:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0x5
   222   000006                     	ds	1
   223   000007                     ??_ISR:
   224                           
   225                           ; 1 bytes @ 0x6
   226   000007                     	ds	9
   227   000010                     ISR@current_row:
   228                           	callstack 0
   229                           
   230                           ; 1 bytes @ 0xF
   231   000010                     	ds	1
   232   000011                     ISR@is_key_pressed:
   233                           	callstack 0
   234                           
   235                           ; 1 bytes @ 0x10
   236   000011                     	ds	1
   237   000012                     ?___lmul:
   238                           	callstack 0
   239   000012                     i2c_data_tx@data:
   240                           	callstack 0
   241   000012                     i2c_start_and_addr@address:
   242                           	callstack 0
   243   000012                     ___lmul@multiplier:
   244                           	callstack 0
   245                           
   246                           ; 4 bytes @ 0x11
   247   000012                     	ds	4
   248   000016                     ___lmul@multiplicand:
   249                           	callstack 0
   250                           
   251                           ; 4 bytes @ 0x15
   252   000016                     	ds	4
   253   00001A                     ___lmul@product:
   254                           	callstack 0
   255                           
   256                           ; 4 bytes @ 0x19
   257   00001A                     	ds	4
   258   00001E                     delay@milliseconds:
   259                           	callstack 0
   260                           
   261                           ; 4 bytes @ 0x1D
   262   00001E                     	ds	4
   263   000022                     delay@timer_value:
   264                           	callstack 0
   265                           
   266                           ; 8 bytes @ 0x21
   267   000022                     	ds	8
   268   00002A                     ??_lcd_char:
   269   00002A                     send@data:
   270                           	callstack 0
   271   00002A                     lcd_command@lt:
   272                           	callstack 0
   273                           
   274                           ; 1 bytes @ 0x29
   275   00002A                     	ds	1
   276   00002B                     lcd_command@rw:
   277                           	callstack 0
   278   00002B                     lcd_char@letter:
   279                           	callstack 0
   280   00002B                     packet_pre_post_amble@i:
   281                           	callstack 0
   282   00002B                     packet_interim_amble@i:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x2A
   286   00002B                     	ds	1
   287   00002C                     lcd_command@rs:
   288                           	callstack 0
   289   00002C                     lcd_message@message:
   290                           	callstack 0
   291                           
   292                           ; 2 bytes @ 0x2B
   293   00002C                     	ds	1
   294   00002D                     ??_send_message:
   295   00002D                     ??_lcd_command:
   296                           
   297                           ; 1 bytes @ 0x2C
   298   00002D                     	ds	1
   299   00002E                     send_message@j:
   300                           	callstack 0
   301                           
   302                           ; 2 bytes @ 0x2D
   303   00002E                     	ds	2
   304   000030                     lcd_command@data:
   305                           	callstack 0
   306   000030                     send_message@i:
   307                           	callstack 0
   308                           
   309                           ; 2 bytes @ 0x2F
   310   000030                     	ds	1
   311   000031                     lcd_move_cursor@position:
   312                           	callstack 0
   313                           
   314                           ; 1 bytes @ 0x30
   315   000031                     	ds	1
   316   000032                     lcd_move_cursor@line:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x31
   320   000032                     	ds	1
   321   000033                     ??_main:
   322                           
   323                           ; 1 bytes @ 0x32
   324   000033                     	ds	3
   325   000036                     main@i:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0x35
   329   000036                     	ds	2
   330   000038                     main@i_898:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0x37
   334   000038                     	ds	2
   335   00003A                     main@i_896:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x39
   339   00003A                     	ds	2
   340                           
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 46 in file "main.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  i               2   55[COMRAM] int 
   351 ;;  i               2   57[COMRAM] int 
   352 ;;  i               2   53[COMRAM] int 
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1
   362 ;;      Params:         0       0       0
   363 ;;      Locals:         6       0       0
   364 ;;      Temps:          3       0       0
   365 ;;      Totals:         9       0       0
   366 ;;Total ram usage:        9 bytes
   367 ;; Hardware stack levels required when called: 7
   368 ;; This function calls:
   369 ;;		_keypad_init
   370 ;;		_lcd_backspace
   371 ;;		_lcd_clear
   372 ;;		_lcd_init
   373 ;;		_lcd_message
   374 ;;		_lcd_move_cursor
   375 ;;		_send_message
   376 ;;		_system_init
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382                           	psect	text0
   383   00022C                     __ptext0:
   384                           	callstack 0
   385   00022C                     _main:
   386                           	callstack 24
   387                           
   388                           ;main.c: 49:     system_init();
   389                           
   390                           ;incstack = 0
   391   00022C  EC42  F004         	call	_system_init	;wreg free
   392                           
   393                           ;main.c: 51:     lcd_init();
   394   000230  EC22  F003         	call	_lcd_init	;wreg free
   395                           
   396                           ;main.c: 52:     keypad_init();
   397   000234  ECB0  F004         	call	_keypad_init	;wreg free
   398   000238                     l1471:
   399                           
   400                           ;main.c: 56:     {;main.c: 58:         if(key_pressed && keys[message_length-1] != '*' &
      +                          & keys[message_length-1] != 'D' && keys[message_length-1] != '#' && keys[message_length-
      +                          1] != 'A')
   401   000238  503C               	movf	_key_pressed^0,w,c
   402   00023A  B4D8               	btfsc	status,2,c
   403   00023C  D02A               	goto	l1485
   404   00023E  503D               	movf	_message_length^0,w,c
   405   000240  0F3D               	addlw	low (_keys+255)
   406   000242  6ED9               	movwf	fsr2l,c
   407   000244  6ADA               	clrf	fsr2h,c
   408   000246  0E2A               	movlw	42
   409   000248  18DE               	xorwf	postinc2,w,c
   410   00024A  B4D8               	btfsc	status,2,c
   411   00024C  D022               	goto	l1485
   412   00024E  503D               	movf	_message_length^0,w,c
   413   000250  0F3D               	addlw	low (_keys+255)
   414   000252  6ED9               	movwf	fsr2l,c
   415   000254  6ADA               	clrf	fsr2h,c
   416   000256  0E44               	movlw	68
   417   000258  18DE               	xorwf	postinc2,w,c
   418   00025A  B4D8               	btfsc	status,2,c
   419   00025C  D01A               	goto	l1485
   420   00025E  503D               	movf	_message_length^0,w,c
   421   000260  0F3D               	addlw	low (_keys+255)
   422   000262  6ED9               	movwf	fsr2l,c
   423   000264  6ADA               	clrf	fsr2h,c
   424   000266  0E23               	movlw	35
   425   000268  18DE               	xorwf	postinc2,w,c
   426   00026A  B4D8               	btfsc	status,2,c
   427   00026C  D012               	goto	l1485
   428   00026E  503D               	movf	_message_length^0,w,c
   429   000270  0F3D               	addlw	low (_keys+255)
   430   000272  6ED9               	movwf	fsr2l,c
   431   000274  6ADA               	clrf	fsr2h,c
   432   000276  0E41               	movlw	65
   433   000278  18DE               	xorwf	postinc2,w,c
   434   00027A  B4D8               	btfsc	status,2,c
   435   00027C  D00A               	goto	l1485
   436                           
   437                           ;main.c: 59:         {;main.c: 60:             lcd_message(keys + message_length-1);
   438   00027E  503D               	movf	_message_length^0,w,c
   439   000280  0F3D               	addlw	low (_keys+-1)
   440   000282  6E33               	movwf	??_main^0,c
   441   000284  C033  F02C         	movff	??_main,lcd_message@message
   442   000288  6A2D               	clrf	(lcd_message@message+1)^0,c
   443   00028A  ECC1  F003         	call	_lcd_message	;wreg free
   444                           
   445                           ;main.c: 62:             key_pressed = 0;
   446   00028E  0E00               	movlw	0
   447   000290  6E3C               	movwf	_key_pressed^0,c
   448   000292                     l1485:
   449                           
   450                           ;main.c: 64:         if(key_pressed && keys[message_length-1] == '*' && message_length >
      +                           1)
   451   000292  503C               	movf	_key_pressed^0,w,c
   452   000294  B4D8               	btfsc	status,2,c
   453   000296  D01B               	goto	l1501
   454   000298  503D               	movf	_message_length^0,w,c
   455   00029A  0F3D               	addlw	low (_keys+255)
   456   00029C  6ED9               	movwf	fsr2l,c
   457   00029E  6ADA               	clrf	fsr2h,c
   458   0002A0  0E2A               	movlw	42
   459   0002A2  18DE               	xorwf	postinc2,w,c
   460   0002A4  A4D8               	btfss	status,2,c
   461   0002A6  D013               	goto	l1501
   462   0002A8  0E01               	movlw	1
   463   0002AA  643D               	cpfsgt	_message_length^0,c
   464   0002AC  D010               	goto	l1501
   465                           
   466                           ;main.c: 65:         {;main.c: 66:             lcd_backspace();
   467   0002AE  EC7B  F004         	call	_lcd_backspace	;wreg free
   468                           
   469                           ;main.c: 67:             keys[message_length - 1] = '\0';
   470   0002B2  503D               	movf	_message_length^0,w,c
   471   0002B4  0F3D               	addlw	low (_keys+255)
   472   0002B6  6ED9               	movwf	fsr2l,c
   473   0002B8  6ADA               	clrf	fsr2h,c
   474   0002BA  6ADF               	clrf	indf2,c
   475                           
   476                           ;main.c: 68:             keys[message_length - 2] = '\0';
   477   0002BC  503D               	movf	_message_length^0,w,c
   478   0002BE  0F3C               	addlw	low (_keys+254)
   479   0002C0  6ED9               	movwf	fsr2l,c
   480   0002C2  6ADA               	clrf	fsr2h,c
   481   0002C4  6ADF               	clrf	indf2,c
   482                           
   483                           ;main.c: 69:             message_length -= 2;
   484   0002C6  0E02               	movlw	2
   485   0002C8  5E3D               	subwf	_message_length^0,f,c
   486                           
   487                           ;main.c: 70:             key_pressed = 0;
   488   0002CA  0E00               	movlw	0
   489   0002CC  6E3C               	movwf	_key_pressed^0,c
   490   0002CE                     l1501:
   491                           
   492                           ;main.c: 72:         if(key_pressed && keys[message_length-1] == 'D')
   493   0002CE  503C               	movf	_key_pressed^0,w,c
   494   0002D0  B4D8               	btfsc	status,2,c
   495   0002D2  D027               	goto	l118
   496   0002D4  503D               	movf	_message_length^0,w,c
   497   0002D6  0F3D               	addlw	low (_keys+255)
   498   0002D8  6ED9               	movwf	fsr2l,c
   499   0002DA  6ADA               	clrf	fsr2h,c
   500   0002DC  0E44               	movlw	68
   501   0002DE  18DE               	xorwf	postinc2,w,c
   502   0002E0  A4D8               	btfss	status,2,c
   503   0002E2  D01F               	goto	l118
   504                           
   505                           ;main.c: 73:         {;main.c: 74:             lcd_clear();
   506   0002E4  EC91  F003         	call	_lcd_clear	;wreg free
   507                           
   508                           ;main.c: 76:             for(int i = 0; i < message_length; i++)
   509   0002E8  0E00               	movlw	0
   510   0002EA  6E37               	movwf	(main@i+1)^0,c
   511   0002EC  0E00               	movlw	0
   512   0002EE  6E36               	movwf	main@i^0,c
   513   0002F0  D007               	goto	l1513
   514   0002F2                     l1509:
   515                           
   516                           ;main.c: 77:             {;main.c: 78:                 keys[i] = '\0';
   517   0002F2  5036               	movf	main@i^0,w,c
   518   0002F4  0F3E               	addlw	low _keys
   519   0002F6  6ED9               	movwf	fsr2l,c
   520   0002F8  6ADA               	clrf	fsr2h,c
   521   0002FA  6ADF               	clrf	indf2,c
   522                           
   523                           ;main.c: 79:             }
   524   0002FC  4A36               	infsnz	main@i^0,f,c
   525   0002FE  2A37               	incf	(main@i+1)^0,f,c
   526   000300                     l1513:
   527   000300  503D               	movf	_message_length^0,w,c
   528   000302  6E33               	movwf	??_main^0,c
   529   000304  6A34               	clrf	(??_main+1)^0,c
   530   000306  5033               	movf	??_main^0,w,c
   531   000308  5C36               	subwf	main@i^0,w,c
   532   00030A  5037               	movf	(main@i+1)^0,w,c
   533   00030C  0A80               	xorlw	128
   534   00030E  6E35               	movwf	(??_main+2)^0,c
   535   000310  5034               	movf	(??_main+1)^0,w,c
   536   000312  0A80               	xorlw	128
   537   000314  5835               	subwfb	(??_main+2)^0,w,c
   538   000316  A0D8               	btfss	status,0,c
   539   000318  D7EC               	goto	l1509
   540                           
   541                           ;main.c: 81:             message_length = 0;
   542   00031A  0E00               	movlw	0
   543   00031C  6E3D               	movwf	_message_length^0,c
   544                           
   545                           ;main.c: 82:             key_pressed = 0;
   546   00031E  0E00               	movlw	0
   547   000320  6E3C               	movwf	_key_pressed^0,c
   548   000322                     l118:
   549                           
   550                           ;main.c: 85:         if(key_pressed && keys[message_length-1] == 'A')
   551   000322  503C               	movf	_key_pressed^0,w,c
   552   000324  B4D8               	btfsc	status,2,c
   553   000326  D02B               	goto	l1539
   554   000328  503D               	movf	_message_length^0,w,c
   555   00032A  0F3D               	addlw	low (_keys+255)
   556   00032C  6ED9               	movwf	fsr2l,c
   557   00032E  6ADA               	clrf	fsr2h,c
   558   000330  0E41               	movlw	65
   559   000332  18DE               	xorwf	postinc2,w,c
   560   000334  A4D8               	btfss	status,2,c
   561   000336  D023               	goto	l1539
   562                           
   563                           ;main.c: 86:         {;main.c: 87:             lcd_clear();
   564   000338  EC91  F003         	call	_lcd_clear	;wreg free
   565                           
   566                           ;main.c: 89:             for(int i = 0; i < 10; i++)
   567   00033C  0E00               	movlw	0
   568   00033E  6E3B               	movwf	(main@i_896+1)^0,c
   569   000340  0E00               	movlw	0
   570   000342  6E3A               	movwf	main@i_896^0,c
   571   000344                     l1527:
   572                           
   573                           ;main.c: 90:             {;main.c: 91:                 keys[i] = '0' + i;
   574   000344  503A               	movf	main@i_896^0,w,c
   575   000346  0F3E               	addlw	low _keys
   576   000348  6ED9               	movwf	fsr2l,c
   577   00034A  6ADA               	clrf	fsr2h,c
   578   00034C  503A               	movf	main@i_896^0,w,c
   579   00034E  0F30               	addlw	48
   580   000350  6EDF               	movwf	indf2,c
   581                           
   582                           ;main.c: 92:             }
   583   000352  4A3A               	infsnz	main@i_896^0,f,c
   584   000354  2A3B               	incf	(main@i_896+1)^0,f,c
   585   000356  BE3B               	btfsc	(main@i_896+1)^0,7,c
   586   000358  D7F5               	goto	l1527
   587   00035A  503B               	movf	(main@i_896+1)^0,w,c
   588   00035C  E104               	bnz	u840
   589   00035E  0E0A               	movlw	10
   590   000360  5C3A               	subwf	main@i_896^0,w,c
   591   000362  A0D8               	btfss	status,0,c
   592   000364  D7EF               	goto	l1527
   593   000366                     u840:
   594                           
   595                           ;main.c: 93:             lcd_message(keys + message_length-1);
   596   000366  503D               	movf	_message_length^0,w,c
   597   000368  0F3D               	addlw	low (_keys+-1)
   598   00036A  6E33               	movwf	??_main^0,c
   599   00036C  C033  F02C         	movff	??_main,lcd_message@message
   600   000370  6A2D               	clrf	(lcd_message@message+1)^0,c
   601   000372  ECC1  F003         	call	_lcd_message	;wreg free
   602                           
   603                           ;main.c: 95:             message_length = 10;
   604   000376  0E0A               	movlw	10
   605   000378  6E3D               	movwf	_message_length^0,c
   606                           
   607                           ;main.c: 96:             key_pressed = 0;
   608   00037A  0E00               	movlw	0
   609   00037C  6E3C               	movwf	_key_pressed^0,c
   610   00037E                     l1539:
   611                           
   612                           ;main.c: 99:         if(key_pressed && keys[message_length-1] == '#')
   613   00037E  503C               	movf	_key_pressed^0,w,c
   614   000380  B4D8               	btfsc	status,2,c
   615   000382  D03B               	goto	l125
   616   000384  503D               	movf	_message_length^0,w,c
   617   000386  0F3D               	addlw	low (_keys+255)
   618   000388  6ED9               	movwf	fsr2l,c
   619   00038A  6ADA               	clrf	fsr2h,c
   620   00038C  0E23               	movlw	35
   621   00038E  18DE               	xorwf	postinc2,w,c
   622   000390  A4D8               	btfss	status,2,c
   623   000392  D033               	goto	l125
   624                           
   625                           ;main.c: 100:         {;main.c: 101:             lcd_move_cursor(1,0);
   626   000394  0E00               	movlw	0
   627   000396  6E31               	movwf	lcd_move_cursor@position^0,c
   628   000398  0E01               	movlw	1
   629   00039A  EC96  F004         	call	_lcd_move_cursor
   630                           
   631                           ;main.c: 102:             lcd_message("Sending");
   632   00039E  0E1A               	movlw	low STR_1
   633   0003A0  6E2C               	movwf	lcd_message@message^0,c
   634   0003A2  502C               	movf	lcd_message@message^0,w,c
   635   0003A4  A4D8               	btfss	status,2,c
   636   0003A6  0E02               	movlw	high __smallconst
   637   0003A8  6E2D               	movwf	(lcd_message@message+1)^0,c
   638   0003AA  ECC1  F003         	call	_lcd_message	;wreg free
   639                           
   640                           ;main.c: 103:             keys[message_length - 1] = '\0';
   641   0003AE  503D               	movf	_message_length^0,w,c
   642   0003B0  0F3D               	addlw	low (_keys+255)
   643   0003B2  6ED9               	movwf	fsr2l,c
   644   0003B4  6ADA               	clrf	fsr2h,c
   645   0003B6  6ADF               	clrf	indf2,c
   646                           
   647                           ;main.c: 104:             send_message();
   648   0003B8  EC5C  F003         	call	_send_message	;wreg free
   649                           
   650                           ;main.c: 105:             lcd_clear();
   651   0003BC  EC91  F003         	call	_lcd_clear	;wreg free
   652                           
   653                           ;main.c: 106:             for(int i = 0; i < message_length; i++)
   654   0003C0  0E00               	movlw	0
   655   0003C2  6E39               	movwf	(main@i_898+1)^0,c
   656   0003C4  0E00               	movlw	0
   657   0003C6  6E38               	movwf	main@i_898^0,c
   658   0003C8  D007               	goto	l1559
   659   0003CA                     l1555:
   660                           
   661                           ;main.c: 107:             {;main.c: 108:                 keys[i] = '\0';
   662   0003CA  5038               	movf	main@i_898^0,w,c
   663   0003CC  0F3E               	addlw	low _keys
   664   0003CE  6ED9               	movwf	fsr2l,c
   665   0003D0  6ADA               	clrf	fsr2h,c
   666   0003D2  6ADF               	clrf	indf2,c
   667                           
   668                           ;main.c: 109:             }
   669   0003D4  4A38               	infsnz	main@i_898^0,f,c
   670   0003D6  2A39               	incf	(main@i_898+1)^0,f,c
   671   0003D8                     l1559:
   672   0003D8  503D               	movf	_message_length^0,w,c
   673   0003DA  6E33               	movwf	??_main^0,c
   674   0003DC  6A34               	clrf	(??_main+1)^0,c
   675   0003DE  5033               	movf	??_main^0,w,c
   676   0003E0  5C38               	subwf	main@i_898^0,w,c
   677   0003E2  5039               	movf	(main@i_898+1)^0,w,c
   678   0003E4  0A80               	xorlw	128
   679   0003E6  6E35               	movwf	(??_main+2)^0,c
   680   0003E8  5034               	movf	(??_main+1)^0,w,c
   681   0003EA  0A80               	xorlw	128
   682   0003EC  5835               	subwfb	(??_main+2)^0,w,c
   683   0003EE  A0D8               	btfss	status,0,c
   684   0003F0  D7EC               	goto	l1555
   685                           
   686                           ;main.c: 110:             key_pressed = 0;
   687   0003F2  0E00               	movlw	0
   688   0003F4  6E3C               	movwf	_key_pressed^0,c
   689                           
   690                           ;main.c: 111:             message_length = 0;
   691   0003F6  0E00               	movlw	0
   692   0003F8  6E3D               	movwf	_message_length^0,c
   693   0003FA                     l125:
   694   0003FA  0003               	sleep		;# 
   695   0003FC  D71D               	goto	l1471
   696   0003FE                     __end_of_main:
   697                           	callstack 0
   698                           
   699 ;; *************** function _system_init *****************
   700 ;; Defined at:
   701 ;;		line 405 in file "main.c"
   702 ;; Parameters:    Size  Location     Type
   703 ;;		None
   704 ;; Auto vars:     Size  Location     Type
   705 ;;		None
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, status,2, status,0
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1
   715 ;;      Params:         0       0       0
   716 ;;      Locals:         0       0       0
   717 ;;      Temps:          0       0       0
   718 ;;      Totals:         0       0       0
   719 ;;Total ram usage:        0 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; Hardware stack levels required when called: 2
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text1
   730   000884                     __ptext1:
   731                           	callstack 0
   732   000884                     _system_init:
   733                           	callstack 28
   734                           
   735                           ;main.c: 408:     OSCCONbits.SCS = 0;
   736                           
   737                           ;incstack = 0
   738   000884  0EFC               	movlw	-4
   739   000886  16D3               	andwf	211,f,c	;volatile
   740                           
   741                           ;main.c: 409:     OSCCONbits.IDLEN = 1;
   742   000888  8ED3               	bsf	211,7,c	;volatile
   743                           
   744                           ;main.c: 410:     OSCCONbits.IRCF = 7;
   745   00088A  0E70               	movlw	112
   746   00088C  12D3               	iorwf	211,f,c	;volatile
   747                           
   748                           ;main.c: 411:     OSCTUNEbits.PLLEN = 1;
   749   00088E  8C9B               	bsf	155,6,c	;volatile
   750                           
   751                           ;main.c: 414:     INTCONbits.GIE = 1;
   752   000890  8EF2               	bsf	242,7,c	;volatile
   753                           
   754                           ;main.c: 415:     INTCONbits.PEIE = 1;
   755   000892  8CF2               	bsf	242,6,c	;volatile
   756                           
   757                           ;main.c: 417:     INTCON2bits.RBPU = 0;
   758   000894  9EF1               	bcf	241,7,c	;volatile
   759                           
   760                           ;main.c: 421:     RCONbits.IPEN = 0;
   761   000896  9ED0               	bcf	208,7,c	;volatile
   762                           
   763                           ;main.c: 424:     LATCbits.LC7 = 1;
   764   000898  8E8B               	bsf	139,7,c	;volatile
   765                           
   766                           ;main.c: 425:     TRISCbits.RC7 = 0;
   767   00089A  9E94               	bcf	148,7,c	;volatile
   768                           
   769                           ;main.c: 426:     TRISB = TRISB & 0xF0;
   770   00089C  5093               	movf	147,w,c	;volatile
   771   00089E  0BF0               	andlw	240
   772   0008A0  6E93               	movwf	147,c	;volatile
   773                           
   774                           ;main.c: 429:     SSPSTATbits.SMP = 1;
   775   0008A2  8EC7               	bsf	199,7,c	;volatile
   776                           
   777                           ;main.c: 430:     SSPSTATbits.CKE = 0;
   778   0008A4  9CC7               	bcf	199,6,c	;volatile
   779                           
   780                           ;main.c: 431:     SSPADD = 0x50;
   781   0008A6  0E50               	movlw	80
   782   0008A8  6EC8               	movwf	200,c	;volatile
   783                           
   784                           ;main.c: 432:     SSPCON1bits.SSPEN = 1;
   785   0008AA  8AC6               	bsf	198,5,c	;volatile
   786                           
   787                           ;main.c: 433:     SSPCON1bits.SSPM = 0b1000;
   788   0008AC  50C6               	movf	198,w,c	;volatile
   789   0008AE  0BF0               	andlw	-16
   790   0008B0  0908               	iorlw	8
   791   0008B2  6EC6               	movwf	198,c	;volatile
   792                           
   793                           ;main.c: 434:     TRISCbits.RC3 = 1;
   794   0008B4  8694               	bsf	148,3,c	;volatile
   795                           
   796                           ;main.c: 435:     TRISCbits.RC4 = 1;
   797   0008B6  8894               	bsf	148,4,c	;volatile
   798                           
   799                           ;main.c: 438:     keys[10] = '\0';
   800   0008B8  0E00               	movlw	0
   801   0008BA  6E48               	movwf	(_keys+10)^0,c
   802   0008BC  0012               	return		;funcret
   803   0008BE                     __end_of_system_init:
   804                           	callstack 0
   805                           
   806 ;; *************** function _send_message *****************
   807 ;; Defined at:
   808 ;;		line 175 in file "main.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  j               2   45[COMRAM] int 
   813 ;;  i               2   47[COMRAM] int 
   814 ;;  send_cnt        2    0        int 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1
   824 ;;      Params:         0       0       0
   825 ;;      Locals:         4       0       0
   826 ;;      Temps:          1       0       0
   827 ;;      Totals:         5       0       0
   828 ;;Total ram usage:        5 bytes
   829 ;; Hardware stack levels used: 1
   830 ;; Hardware stack levels required when called: 6
   831 ;; This function calls:
   832 ;;		_packet_interim_amble
   833 ;;		_packet_pre_post_amble
   834 ;;		_send
   835 ;; This function is called by:
   836 ;;		_main
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text2
   841   0006B8                     __ptext2:
   842                           	callstack 0
   843   0006B8                     _send_message:
   844                           	callstack 24
   845                           
   846                           ;main.c: 177:     int i = 0;
   847                           
   848                           ;incstack = 0
   849   0006B8  0E00               	movlw	0
   850   0006BA  6E31               	movwf	(send_message@i+1)^0,c
   851   0006BC  0E00               	movlw	0
   852   0006BE  6E30               	movwf	send_message@i^0,c
   853                           
   854                           ;main.c: 179:     packet_pre_post_amble();
   855   0006C0  ECC8  F004         	call	_packet_pre_post_amble	;wreg free
   856                           
   857                           ;main.c: 181:     for(int j = 0; j < 5; j++)
   858   0006C4  0E00               	movlw	0
   859   0006C6  6E2F               	movwf	(send_message@j+1)^0,c
   860   0006C8  0E00               	movlw	0
   861   0006CA  6E2E               	movwf	send_message@j^0,c
   862   0006CC  D015               	goto	l1457
   863   0006CE                     l1453:
   864                           
   865                           ;main.c: 184:         {;main.c: 185:             send(keys[i] & 0x0F);
   866   0006CE  5030               	movf	send_message@i^0,w,c
   867   0006D0  0F3E               	addlw	low _keys
   868   0006D2  6ED9               	movwf	fsr2l,c
   869   0006D4  6ADA               	clrf	fsr2h,c
   870   0006D6  50DF               	movf	indf2,w,c
   871   0006D8  0B0F               	andlw	15
   872   0006DA  EC5F  F004         	call	_send
   873                           
   874                           ;main.c: 186:             send((keys[i] & 0xF0)>> 4);
   875   0006DE  5030               	movf	send_message@i^0,w,c
   876   0006E0  0F3E               	addlw	low _keys
   877   0006E2  6ED9               	movwf	fsr2l,c
   878   0006E4  6ADA               	clrf	fsr2h,c
   879   0006E6  50DF               	movf	indf2,w,c
   880   0006E8  6E2D               	movwf	??_send_message^0,c
   881   0006EA  382D               	swapf	??_send_message^0,w,c
   882   0006EC  0B0F               	andlw	15
   883   0006EE  0B0F               	andlw	15
   884   0006F0  EC5F  F004         	call	_send
   885                           
   886                           ;main.c: 187:             i++;
   887   0006F4  4A30               	infsnz	send_message@i^0,f,c
   888   0006F6  2A31               	incf	(send_message@i+1)^0,f,c
   889   0006F8                     l1457:
   890                           
   891                           ;main.c: 183:         while(keys[i] != '\0')
   892   0006F8  5030               	movf	send_message@i^0,w,c
   893   0006FA  0F3E               	addlw	low _keys
   894   0006FC  6ED9               	movwf	fsr2l,c
   895   0006FE  6ADA               	clrf	fsr2h,c
   896   000700  50DF               	movf	indf2,w,c
   897   000702  A4D8               	btfss	status,2,c
   898   000704  D7E4               	goto	l1453
   899                           
   900                           ;main.c: 189:         packet_interim_amble();
   901   000706  ECDD  F004         	call	_packet_interim_amble	;wreg free
   902                           
   903                           ;main.c: 190:     }
   904   00070A  4A2E               	infsnz	send_message@j^0,f,c
   905   00070C  2A2F               	incf	(send_message@j+1)^0,f,c
   906   00070E  BE2F               	btfsc	(send_message@j+1)^0,7,c
   907   000710  D7F3               	goto	l1457
   908   000712  502F               	movf	(send_message@j+1)^0,w,c
   909   000714  E105               	bnz	u700
   910   000716  0E05               	movlw	5
   911   000718  5C2E               	subwf	send_message@j^0,w,c
   912   00071A  B0D8               	btfsc	status,0,c
   913   00071C  0012               	return	
   914   00071E  D7EC               	goto	l1457
   915   000720                     u700:
   916   000720  0012               	return		;funcret
   917   000722                     __end_of_send_message:
   918                           	callstack 0
   919                           
   920 ;; *************** function _packet_pre_post_amble *****************
   921 ;; Defined at:
   922 ;;		line 193 in file "main.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  i               2   42[COMRAM] int 
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, status,2, status,0, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1
   936 ;;      Params:         0       0       0
   937 ;;      Locals:         2       0       0
   938 ;;      Temps:          0       0       0
   939 ;;      Totals:         2       0       0
   940 ;;Total ram usage:        2 bytes
   941 ;; Hardware stack levels used: 1
   942 ;; Hardware stack levels required when called: 5
   943 ;; This function calls:
   944 ;;		_send
   945 ;; This function is called by:
   946 ;;		_send_message
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text3
   951   000990                     __ptext3:
   952                           	callstack 0
   953   000990                     _packet_pre_post_amble:
   954                           	callstack 24
   955                           
   956                           ;main.c: 195:     for(int i = 0; i < 1; i++)
   957                           
   958                           ;incstack = 0
   959   000990  0E00               	movlw	0
   960   000992  6E2C               	movwf	(packet_pre_post_amble@i+1)^0,c
   961   000994  0E00               	movlw	0
   962   000996  6E2B               	movwf	packet_pre_post_amble@i^0,c
   963   000998                     l1411:
   964                           
   965                           ;main.c: 196:     {;main.c: 197:         send(0xA);
   966   000998  0E0A               	movlw	10
   967   00099A  EC5F  F004         	call	_send
   968                           
   969                           ;main.c: 198:         send(0xA);
   970   00099E  0E0A               	movlw	10
   971   0009A0  EC5F  F004         	call	_send
   972                           
   973                           ;main.c: 199:     }
   974   0009A4  4A2B               	infsnz	packet_pre_post_amble@i^0,f,c
   975   0009A6  2A2C               	incf	(packet_pre_post_amble@i+1)^0,f,c
   976   0009A8  BE2C               	btfsc	(packet_pre_post_amble@i+1)^0,7,c
   977   0009AA  D7F6               	goto	l1411
   978   0009AC  502C               	movf	(packet_pre_post_amble@i+1)^0,w,c
   979   0009AE  E104               	bnz	u670
   980   0009B0  042B               	decf	packet_pre_post_amble@i^0,w,c
   981   0009B2  B0D8               	btfsc	status,0,c
   982   0009B4  0012               	return	
   983   0009B6  D7F0               	goto	l1411
   984   0009B8                     u670:
   985   0009B8  0012               	return		;funcret
   986   0009BA                     __end_of_packet_pre_post_amble:
   987                           	callstack 0
   988                           
   989 ;; *************** function _packet_interim_amble *****************
   990 ;; Defined at:
   991 ;;		line 201 in file "main.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;		None
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  i               2   42[COMRAM] int 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1
  1005 ;;      Params:         0       0       0
  1006 ;;      Locals:         2       0       0
  1007 ;;      Temps:          0       0       0
  1008 ;;      Totals:         2       0       0
  1009 ;;Total ram usage:        2 bytes
  1010 ;; Hardware stack levels used: 1
  1011 ;; Hardware stack levels required when called: 5
  1012 ;; This function calls:
  1013 ;;		_send
  1014 ;; This function is called by:
  1015 ;;		_send_message
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text4
  1020   0009BA                     __ptext4:
  1021                           	callstack 0
  1022   0009BA                     _packet_interim_amble:
  1023                           	callstack 24
  1024                           
  1025                           ;main.c: 203:     for(int i = 0; i < 1; i++)
  1026                           
  1027                           ;incstack = 0
  1028   0009BA  0E00               	movlw	0
  1029   0009BC  6E2C               	movwf	(packet_interim_amble@i+1)^0,c
  1030   0009BE  0E00               	movlw	0
  1031   0009C0  6E2B               	movwf	packet_interim_amble@i^0,c
  1032   0009C2                     l1423:
  1033                           
  1034                           ;main.c: 204:     {;main.c: 205:         send(0xB);
  1035   0009C2  0E0B               	movlw	11
  1036   0009C4  EC5F  F004         	call	_send
  1037                           
  1038                           ;main.c: 206:         send(0xB);
  1039   0009C8  0E0B               	movlw	11
  1040   0009CA  EC5F  F004         	call	_send
  1041                           
  1042                           ;main.c: 207:     }
  1043   0009CE  4A2B               	infsnz	packet_interim_amble@i^0,f,c
  1044   0009D0  2A2C               	incf	(packet_interim_amble@i+1)^0,f,c
  1045   0009D2  BE2C               	btfsc	(packet_interim_amble@i+1)^0,7,c
  1046   0009D4  D7F6               	goto	l1423
  1047   0009D6  502C               	movf	(packet_interim_amble@i+1)^0,w,c
  1048   0009D8  E104               	bnz	u680
  1049   0009DA  042B               	decf	packet_interim_amble@i^0,w,c
  1050   0009DC  B0D8               	btfsc	status,0,c
  1051   0009DE  0012               	return	
  1052   0009E0  D7F0               	goto	l1423
  1053   0009E2                     u680:
  1054   0009E2  0012               	return		;funcret
  1055   0009E4                     __end_of_packet_interim_amble:
  1056                           	callstack 0
  1057                           
  1058 ;; *************** function _send *****************
  1059 ;; Defined at:
  1060 ;;		line 210 in file "main.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  data            1    wreg     unsigned char 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  data            1   41[COMRAM] unsigned char 
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1
  1074 ;;      Params:         0       0       0
  1075 ;;      Locals:         1       0       0
  1076 ;;      Temps:          0       0       0
  1077 ;;      Totals:         1       0       0
  1078 ;;Total ram usage:        1 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 4
  1081 ;; This function calls:
  1082 ;;		_delay
  1083 ;; This function is called by:
  1084 ;;		_send_message
  1085 ;;		_packet_pre_post_amble
  1086 ;;		_packet_interim_amble
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text5
  1091   0008BE                     __ptext5:
  1092                           	callstack 0
  1093   0008BE                     _send:
  1094                           	callstack 25
  1095                           
  1096                           ;incstack = 0
  1097                           ;send@data stored from wreg
  1098   0008BE  6E2A               	movwf	send@data^0,c
  1099                           
  1100                           ;main.c: 210: void send(char data);main.c: 211: {;main.c: 212:     LATB = (LATB & 0xF0) 
      +                          | data;
  1101   0008C0  508A               	movf	138,w,c	;volatile
  1102   0008C2  0BF0               	andlw	240
  1103   0008C4  102A               	iorwf	send@data^0,w,c
  1104   0008C6  6E8A               	movwf	138,c	;volatile
  1105                           
  1106                           ;main.c: 213:     LATCbits.LC7 = 0;
  1107   0008C8  9E8B               	bcf	139,7,c	;volatile
  1108                           
  1109                           ;main.c: 214:     delay(75);
  1110   0008CA  0E4B               	movlw	75
  1111   0008CC  6E1E               	movwf	delay@milliseconds^0,c
  1112   0008CE  0E00               	movlw	0
  1113   0008D0  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1114   0008D2  0E00               	movlw	0
  1115   0008D4  6E20               	movwf	(delay@milliseconds+2)^0,c
  1116   0008D6  0E00               	movlw	0
  1117   0008D8  6E21               	movwf	(delay@milliseconds+3)^0,c
  1118   0008DA  EC6D  F002         	call	_delay	;wreg free
  1119                           
  1120                           ;main.c: 215:     LATCbits.LC7 = 1;
  1121   0008DE  8E8B               	bsf	139,7,c	;volatile
  1122                           
  1123                           ;main.c: 216:     delay(10);
  1124   0008E0  0E0A               	movlw	10
  1125   0008E2  6E1E               	movwf	delay@milliseconds^0,c
  1126   0008E4  0E00               	movlw	0
  1127   0008E6  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1128   0008E8  0E00               	movlw	0
  1129   0008EA  6E20               	movwf	(delay@milliseconds+2)^0,c
  1130   0008EC  0E00               	movlw	0
  1131   0008EE  6E21               	movwf	(delay@milliseconds+3)^0,c
  1132   0008F0  EC6D  F002         	call	_delay	;wreg free
  1133   0008F4  0012               	return		;funcret
  1134   0008F6                     __end_of_send:
  1135                           	callstack 0
  1136                           
  1137 ;; *************** function _lcd_init *****************
  1138 ;; Defined at:
  1139 ;;		line 219 in file "main.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;		None
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1
  1153 ;;      Params:         0       0       0
  1154 ;;      Locals:         0       0       0
  1155 ;;      Temps:          0       0       0
  1156 ;;      Totals:         0       0       0
  1157 ;;Total ram usage:        0 bytes
  1158 ;; Hardware stack levels used: 1
  1159 ;; Hardware stack levels required when called: 6
  1160 ;; This function calls:
  1161 ;;		_lcd_clear
  1162 ;;		_lcd_command
  1163 ;;		_lcd_message
  1164 ;;		_lcd_move_cursor
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	text6
  1171   000644                     __ptext6:
  1172                           	callstack 0
  1173   000644                     _lcd_init:
  1174                           	callstack 24
  1175                           
  1176                           ;main.c: 226:     lcd_command(0x02, 1, 0, 0);
  1177                           
  1178                           ;incstack = 0
  1179   000644  0E01               	movlw	1
  1180   000646  6E2A               	movwf	lcd_command@lt^0,c
  1181   000648  0E00               	movlw	0
  1182   00064A  6E2B               	movwf	lcd_command@rw^0,c
  1183   00064C  0E00               	movlw	0
  1184   00064E  6E2C               	movwf	lcd_command@rs^0,c
  1185   000650  0E02               	movlw	2
  1186   000652  ECD3  F002         	call	_lcd_command
  1187                           
  1188                           ;main.c: 227:     lcd_command(0x28, 1, 0, 0);
  1189   000656  0E01               	movlw	1
  1190   000658  6E2A               	movwf	lcd_command@lt^0,c
  1191   00065A  0E00               	movlw	0
  1192   00065C  6E2B               	movwf	lcd_command@rw^0,c
  1193   00065E  0E00               	movlw	0
  1194   000660  6E2C               	movwf	lcd_command@rs^0,c
  1195   000662  0E28               	movlw	40
  1196   000664  ECD3  F002         	call	_lcd_command
  1197                           
  1198                           ;main.c: 229:     lcd_clear();
  1199   000668  EC91  F003         	call	_lcd_clear	;wreg free
  1200                           
  1201                           ;main.c: 232:     lcd_command(0x0F, 1, 0, 0);
  1202   00066C  0E01               	movlw	1
  1203   00066E  6E2A               	movwf	lcd_command@lt^0,c
  1204   000670  0E00               	movlw	0
  1205   000672  6E2B               	movwf	lcd_command@rw^0,c
  1206   000674  0E00               	movlw	0
  1207   000676  6E2C               	movwf	lcd_command@rs^0,c
  1208   000678  0E0F               	movlw	15
  1209   00067A  ECD3  F002         	call	_lcd_command
  1210                           
  1211                           ;main.c: 237:     lcd_move_cursor(0, 5);
  1212   00067E  0E05               	movlw	5
  1213   000680  6E31               	movwf	lcd_move_cursor@position^0,c
  1214   000682  0E00               	movlw	0
  1215   000684  EC96  F004         	call	_lcd_move_cursor
  1216                           
  1217                           ;main.c: 238:     lcd_message("Senior");
  1218   000688  0E22               	movlw	low STR_2
  1219   00068A  6E2C               	movwf	lcd_message@message^0,c
  1220   00068C  502C               	movf	lcd_message@message^0,w,c
  1221   00068E  A4D8               	btfss	status,2,c
  1222   000690  0E02               	movlw	high __smallconst
  1223   000692  6E2D               	movwf	(lcd_message@message+1)^0,c
  1224   000694  ECC1  F003         	call	_lcd_message	;wreg free
  1225                           
  1226                           ;main.c: 239:     lcd_move_cursor(1, 4);
  1227   000698  0E04               	movlw	4
  1228   00069A  6E31               	movwf	lcd_move_cursor@position^0,c
  1229   00069C  0E01               	movlw	1
  1230   00069E  EC96  F004         	call	_lcd_move_cursor
  1231                           
  1232                           ;main.c: 240:     lcd_message("Capstone");
  1233   0006A2  0E11               	movlw	low STR_3
  1234   0006A4  6E2C               	movwf	lcd_message@message^0,c
  1235   0006A6  502C               	movf	lcd_message@message^0,w,c
  1236   0006A8  A4D8               	btfss	status,2,c
  1237   0006AA  0E02               	movlw	high __smallconst
  1238   0006AC  6E2D               	movwf	(lcd_message@message+1)^0,c
  1239   0006AE  ECC1  F003         	call	_lcd_message	;wreg free
  1240                           
  1241                           ;main.c: 242:     lcd_clear();
  1242   0006B2  EC91  F003         	call	_lcd_clear	;wreg free
  1243   0006B6  0012               	return		;funcret
  1244   0006B8                     __end_of_lcd_init:
  1245                           	callstack 0
  1246                           
  1247 ;; *************** function _lcd_move_cursor *****************
  1248 ;; Defined at:
  1249 ;;		line 260 in file "main.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;  line            1    wreg     unsigned char 
  1252 ;;  position        1   48[COMRAM] unsigned char 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  line            1   49[COMRAM] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, status,2, status,0, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1
  1264 ;;      Params:         1       0       0
  1265 ;;      Locals:         1       0       0
  1266 ;;      Temps:          0       0       0
  1267 ;;      Totals:         2       0       0
  1268 ;;Total ram usage:        2 bytes
  1269 ;; Hardware stack levels used: 1
  1270 ;; Hardware stack levels required when called: 5
  1271 ;; This function calls:
  1272 ;;		_lcd_command
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;;		_lcd_init
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text7
  1280   00092C                     __ptext7:
  1281                           	callstack 0
  1282   00092C                     _lcd_move_cursor:
  1283                           	callstack 25
  1284                           
  1285                           ;incstack = 0
  1286                           ;lcd_move_cursor@line stored from wreg
  1287   00092C  6E32               	movwf	lcd_move_cursor@line^0,c
  1288                           
  1289                           ;main.c: 260: void lcd_move_cursor(char line, char position);main.c: 261: {;main.c: 262:
      +                               if(!line)
  1290   00092E  5032               	movf	lcd_move_cursor@line^0,w,c
  1291   000930  A4D8               	btfss	status,2,c
  1292   000932  D00B               	goto	l1403
  1293                           
  1294                           ;main.c: 263:     {;main.c: 264:         lcd_command(0x80 | position, 1, 0, 0);
  1295   000934  0E01               	movlw	1
  1296   000936  6E2A               	movwf	lcd_command@lt^0,c
  1297   000938  0E00               	movlw	0
  1298   00093A  6E2B               	movwf	lcd_command@rw^0,c
  1299   00093C  0E00               	movlw	0
  1300   00093E  6E2C               	movwf	lcd_command@rs^0,c
  1301   000940  5031               	movf	lcd_move_cursor@position^0,w,c
  1302   000942  0980               	iorlw	128
  1303   000944  ECD3  F002         	call	_lcd_command
  1304                           
  1305                           ;main.c: 265:     }
  1306   000948  0012               	return	
  1307   00094A                     l1403:
  1308                           
  1309                           ;main.c: 267:     {;main.c: 268:         lcd_command(0xC0 | position, 1, 0, 0);
  1310   00094A  0E01               	movlw	1
  1311   00094C  6E2A               	movwf	lcd_command@lt^0,c
  1312   00094E  0E00               	movlw	0
  1313   000950  6E2B               	movwf	lcd_command@rw^0,c
  1314   000952  0E00               	movlw	0
  1315   000954  6E2C               	movwf	lcd_command@rs^0,c
  1316   000956  5031               	movf	lcd_move_cursor@position^0,w,c
  1317   000958  09C0               	iorlw	192
  1318   00095A  ECD3  F002         	call	_lcd_command
  1319   00095E  0012               	return		;funcret
  1320   000960                     __end_of_lcd_move_cursor:
  1321                           	callstack 0
  1322                           
  1323 ;; *************** function _lcd_clear *****************
  1324 ;; Defined at:
  1325 ;;		line 313 in file "main.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;		None
  1328 ;; Auto vars:     Size  Location     Type
  1329 ;;		None
  1330 ;; Return value:  Size  Location     Type
  1331 ;;                  1    wreg      void 
  1332 ;; Registers used:
  1333 ;;		wreg, status,2, status,0, cstack
  1334 ;; Tracked objects:
  1335 ;;		On entry : 0/0
  1336 ;;		On exit  : 0/0
  1337 ;;		Unchanged: 0/0
  1338 ;; Data sizes:     COMRAM   BANK0   BANK1
  1339 ;;      Params:         0       0       0
  1340 ;;      Locals:         0       0       0
  1341 ;;      Temps:          0       0       0
  1342 ;;      Totals:         0       0       0
  1343 ;;Total ram usage:        0 bytes
  1344 ;; Hardware stack levels used: 1
  1345 ;; Hardware stack levels required when called: 4
  1346 ;; This function calls:
  1347 ;;		_delay
  1348 ;;		_i2c_data_tx
  1349 ;;		_i2c_start_and_addr
  1350 ;;		_i2c_stop
  1351 ;; This function is called by:
  1352 ;;		_main
  1353 ;;		_lcd_init
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           	psect	text8
  1358   000722                     __ptext8:
  1359                           	callstack 0
  1360   000722                     _lcd_clear:
  1361                           	callstack 25
  1362                           
  1363                           ;main.c: 315:     i2c_start_and_addr(0x4E);
  1364                           
  1365                           ;incstack = 0
  1366   000722  0E4E               	movlw	78
  1367   000724  ECFF  F004         	call	_i2c_start_and_addr
  1368                           
  1369                           ;main.c: 318:     i2c_data_tx(0b00001100);
  1370   000728  0E0C               	movlw	12
  1371   00072A  EC0C  F005         	call	_i2c_data_tx
  1372                           
  1373                           ;main.c: 319:     delay(1);
  1374   00072E  0E01               	movlw	1
  1375   000730  6E1E               	movwf	delay@milliseconds^0,c
  1376   000732  0E00               	movlw	0
  1377   000734  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1378   000736  0E00               	movlw	0
  1379   000738  6E20               	movwf	(delay@milliseconds+2)^0,c
  1380   00073A  0E00               	movlw	0
  1381   00073C  6E21               	movwf	(delay@milliseconds+3)^0,c
  1382   00073E  EC6D  F002         	call	_delay	;wreg free
  1383                           
  1384                           ;main.c: 320:     i2c_data_tx(0b00001000);
  1385   000742  0E08               	movlw	8
  1386   000744  EC0C  F005         	call	_i2c_data_tx
  1387                           
  1388                           ;main.c: 323:     i2c_data_tx(0b00011100);
  1389   000748  0E1C               	movlw	28
  1390   00074A  EC0C  F005         	call	_i2c_data_tx
  1391                           
  1392                           ;main.c: 324:     delay(1);
  1393   00074E  0E01               	movlw	1
  1394   000750  6E1E               	movwf	delay@milliseconds^0,c
  1395   000752  0E00               	movlw	0
  1396   000754  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1397   000756  0E00               	movlw	0
  1398   000758  6E20               	movwf	(delay@milliseconds+2)^0,c
  1399   00075A  0E00               	movlw	0
  1400   00075C  6E21               	movwf	(delay@milliseconds+3)^0,c
  1401   00075E  EC6D  F002         	call	_delay	;wreg free
  1402                           
  1403                           ;main.c: 325:     i2c_data_tx(0b00011000);
  1404   000762  0E18               	movlw	24
  1405   000764  EC0C  F005         	call	_i2c_data_tx
  1406                           
  1407                           ;main.c: 326:     delay(1);
  1408   000768  0E01               	movlw	1
  1409   00076A  6E1E               	movwf	delay@milliseconds^0,c
  1410   00076C  0E00               	movlw	0
  1411   00076E  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1412   000770  0E00               	movlw	0
  1413   000772  6E20               	movwf	(delay@milliseconds+2)^0,c
  1414   000774  0E00               	movlw	0
  1415   000776  6E21               	movwf	(delay@milliseconds+3)^0,c
  1416   000778  EC6D  F002         	call	_delay	;wreg free
  1417                           
  1418                           ;main.c: 328:     i2c_stop();
  1419   00077C  EC15  F005         	call	_i2c_stop	;wreg free
  1420   000780  0012               	return		;funcret
  1421   000782                     __end_of_lcd_clear:
  1422                           	callstack 0
  1423                           
  1424 ;; *************** function _lcd_backspace *****************
  1425 ;; Defined at:
  1426 ;;		line 253 in file "main.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;                  1    wreg      void 
  1433 ;; Registers used:
  1434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1
  1440 ;;      Params:         0       0       0
  1441 ;;      Locals:         0       0       0
  1442 ;;      Temps:          0       0       0
  1443 ;;      Totals:         0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used: 1
  1446 ;; Hardware stack levels required when called: 6
  1447 ;; This function calls:
  1448 ;;		_lcd_command
  1449 ;;		_lcd_message
  1450 ;; This function is called by:
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           	psect	text9
  1456   0008F6                     __ptext9:
  1457                           	callstack 0
  1458   0008F6                     _lcd_backspace:
  1459                           	callstack 24
  1460                           
  1461                           ;main.c: 255:     lcd_command(0x10, 1, 0, 0);
  1462                           
  1463                           ;incstack = 0
  1464   0008F6  0E01               	movlw	1
  1465   0008F8  6E2A               	movwf	lcd_command@lt^0,c
  1466   0008FA  0E00               	movlw	0
  1467   0008FC  6E2B               	movwf	lcd_command@rw^0,c
  1468   0008FE  0E00               	movlw	0
  1469   000900  6E2C               	movwf	lcd_command@rs^0,c
  1470   000902  0E10               	movlw	16
  1471   000904  ECD3  F002         	call	_lcd_command
  1472                           
  1473                           ;main.c: 256:     lcd_message(" ");
  1474   000908  0E29               	movlw	low STR_4
  1475   00090A  6E2C               	movwf	lcd_message@message^0,c
  1476   00090C  502C               	movf	lcd_message@message^0,w,c
  1477   00090E  A4D8               	btfss	status,2,c
  1478   000910  0E02               	movlw	high __smallconst
  1479   000912  6E2D               	movwf	(lcd_message@message+1)^0,c
  1480   000914  ECC1  F003         	call	_lcd_message	;wreg free
  1481                           
  1482                           ;main.c: 257:     lcd_command(0x10, 1, 0, 0);
  1483   000918  0E01               	movlw	1
  1484   00091A  6E2A               	movwf	lcd_command@lt^0,c
  1485   00091C  0E00               	movlw	0
  1486   00091E  6E2B               	movwf	lcd_command@rw^0,c
  1487   000920  0E00               	movlw	0
  1488   000922  6E2C               	movwf	lcd_command@rs^0,c
  1489   000924  0E10               	movlw	16
  1490   000926  ECD3  F002         	call	_lcd_command
  1491   00092A  0012               	return		;funcret
  1492   00092C                     __end_of_lcd_backspace:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _lcd_message *****************
  1496 ;; Defined at:
  1497 ;;		line 290 in file "main.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;  message         2   43[COMRAM] PTR unsigned char 
  1500 ;;		 -> STR_4(2), STR_3(9), STR_2(7), STR_1(8), 
  1501 ;;		 -> keys(11), 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;		None
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1
  1513 ;;      Params:         2       0       0
  1514 ;;      Locals:         0       0       0
  1515 ;;      Temps:          0       0       0
  1516 ;;      Totals:         2       0       0
  1517 ;;Total ram usage:        2 bytes
  1518 ;; Hardware stack levels used: 1
  1519 ;; Hardware stack levels required when called: 5
  1520 ;; This function calls:
  1521 ;;		_i2c_start_and_addr
  1522 ;;		_i2c_stop
  1523 ;;		_lcd_char
  1524 ;; This function is called by:
  1525 ;;		_main
  1526 ;;		_lcd_init
  1527 ;;		_lcd_backspace
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           	psect	text10
  1532   000782                     __ptext10:
  1533                           	callstack 0
  1534   000782                     _lcd_message:
  1535                           	callstack 25
  1536                           
  1537                           ;main.c: 290: void lcd_message(char* message);main.c: 291: {;main.c: 292:     i2c_start_
      +                          and_addr(0x4E);
  1538                           
  1539                           ;incstack = 0
  1540   000782  0E4E               	movlw	78
  1541   000784  ECFF  F004         	call	_i2c_start_and_addr
  1542                           
  1543                           ;main.c: 293:     while(*message != 0)
  1544   000788  D014               	goto	l1381
  1545   00078A                     l1377:
  1546                           
  1547                           ;main.c: 294:     {;main.c: 295:         lcd_char(*message);
  1548   00078A  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1549   00078E  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1550   000792  6AF8               	clrf	tblptru,c
  1551   000794  0E01               	movlw	(high __ramtop+-1)
  1552   000796  64F7               	cpfsgt	tblptrh,c
  1553   000798  D003               	bra	u637
  1554   00079A  0008               	tblrd		*
  1555   00079C  50F5               	movf	tablat,w,c
  1556   00079E  D005               	bra	u630
  1557   0007A0                     u637:
  1558   0007A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  1559   0007A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  1560   0007A8  50EF               	movf	indf0,w,c
  1561   0007AA                     u630:
  1562   0007AA  EC1A  F004         	call	_lcd_char
  1563                           
  1564                           ;main.c: 296:         message++;
  1565   0007AE  4A2C               	infsnz	lcd_message@message^0,f,c
  1566   0007B0  2A2D               	incf	(lcd_message@message+1)^0,f,c
  1567   0007B2                     l1381:
  1568                           
  1569                           ;main.c: 293:     while(*message != 0)
  1570   0007B2  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1571   0007B6  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1572   0007BA  6AF8               	clrf	tblptru,c
  1573   0007BC  0E01               	movlw	(high __ramtop+-1)
  1574   0007BE  64F7               	cpfsgt	tblptrh,c
  1575   0007C0  D003               	bra	u647
  1576   0007C2  0008               	tblrd		*
  1577   0007C4  50F5               	movf	tablat,w,c
  1578   0007C6  D005               	bra	u640
  1579   0007C8                     u647:
  1580   0007C8  CFF6 FFE9          	movff	tblptrl,fsr0l
  1581   0007CC  CFF7 FFEA          	movff	tblptrh,fsr0h
  1582   0007D0  50EF               	movf	indf0,w,c
  1583   0007D2                     u640:
  1584   0007D2  0900               	iorlw	0
  1585   0007D4  A4D8               	btfss	status,2,c
  1586   0007D6  D7D9               	goto	l1377
  1587                           
  1588                           ;main.c: 298:     i2c_stop();
  1589   0007D8  EC15  F005         	call	_i2c_stop	;wreg free
  1590   0007DC  0012               	return		;funcret
  1591   0007DE                     __end_of_lcd_message:
  1592                           	callstack 0
  1593                           
  1594 ;; *************** function _lcd_char *****************
  1595 ;; Defined at:
  1596 ;;		line 301 in file "main.c"
  1597 ;; Parameters:    Size  Location     Type
  1598 ;;  letter          1    wreg     unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  letter          1   42[COMRAM] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1
  1610 ;;      Params:         0       0       0
  1611 ;;      Locals:         1       0       0
  1612 ;;      Temps:          1       0       0
  1613 ;;      Totals:         2       0       0
  1614 ;;Total ram usage:        2 bytes
  1615 ;; Hardware stack levels used: 1
  1616 ;; Hardware stack levels required when called: 4
  1617 ;; This function calls:
  1618 ;;		_delay
  1619 ;;		_i2c_data_tx
  1620 ;; This function is called by:
  1621 ;;		_lcd_message
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text11
  1626   000834                     __ptext11:
  1627                           	callstack 0
  1628   000834                     _lcd_char:
  1629                           	callstack 25
  1630                           
  1631                           ;incstack = 0
  1632                           ;lcd_char@letter stored from wreg
  1633   000834  6E2B               	movwf	lcd_char@letter^0,c
  1634                           
  1635                           ;main.c: 301: void lcd_char(char letter);main.c: 302: {;main.c: 303:     i2c_data_tx((le
      +                          tter & 0xF0) | 0b1101);
  1636   000836  502B               	movf	lcd_char@letter^0,w,c
  1637   000838  0BF0               	andlw	240
  1638   00083A  090D               	iorlw	13
  1639   00083C  EC0C  F005         	call	_i2c_data_tx
  1640                           
  1641                           ;main.c: 304:     i2c_data_tx((letter & 0xF0) | 8);
  1642   000840  502B               	movf	lcd_char@letter^0,w,c
  1643   000842  0BF0               	andlw	240
  1644   000844  0908               	iorlw	8
  1645   000846  EC0C  F005         	call	_i2c_data_tx
  1646                           
  1647                           ;main.c: 308:     i2c_data_tx(((letter & 0x0F) << 4) | 0b1101);
  1648   00084A  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1649   00084E  0E0F               	movlw	15
  1650   000850  162A               	andwf	??_lcd_char^0,f,c
  1651   000852  382A               	swapf	??_lcd_char^0,w,c
  1652   000854  0BF0               	andlw	240
  1653   000856  090D               	iorlw	13
  1654   000858  EC0C  F005         	call	_i2c_data_tx
  1655                           
  1656                           ;main.c: 309:     i2c_data_tx(((letter & 0x0F) << 4) | 8);
  1657   00085C  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1658   000860  0E0F               	movlw	15
  1659   000862  162A               	andwf	??_lcd_char^0,f,c
  1660   000864  382A               	swapf	??_lcd_char^0,w,c
  1661   000866  0BF0               	andlw	240
  1662   000868  0908               	iorlw	8
  1663   00086A  EC0C  F005         	call	_i2c_data_tx
  1664                           
  1665                           ;main.c: 310:     delay(1);
  1666   00086E  0E01               	movlw	1
  1667   000870  6E1E               	movwf	delay@milliseconds^0,c
  1668   000872  0E00               	movlw	0
  1669   000874  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1670   000876  0E00               	movlw	0
  1671   000878  6E20               	movwf	(delay@milliseconds+2)^0,c
  1672   00087A  0E00               	movlw	0
  1673   00087C  6E21               	movwf	(delay@milliseconds+3)^0,c
  1674   00087E  EC6D  F002         	call	_delay	;wreg free
  1675   000882  0012               	return		;funcret
  1676   000884                     __end_of_lcd_char:
  1677                           	callstack 0
  1678                           
  1679 ;; *************** function _lcd_command *****************
  1680 ;; Defined at:
  1681 ;;		line 274 in file "main.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  data            1    wreg     unsigned char 
  1684 ;;  lt              1   41[COMRAM] unsigned char 
  1685 ;;  rw              1   42[COMRAM] unsigned char 
  1686 ;;  rs              1   43[COMRAM] unsigned char 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  data            1   47[COMRAM] unsigned char 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2, status,0, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1
  1698 ;;      Params:         3       0       0
  1699 ;;      Locals:         1       0       0
  1700 ;;      Temps:          3       0       0
  1701 ;;      Totals:         7       0       0
  1702 ;;Total ram usage:        7 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 4
  1705 ;; This function calls:
  1706 ;;		_delay
  1707 ;;		_i2c_data_tx
  1708 ;;		_i2c_start_and_addr
  1709 ;;		_i2c_stop
  1710 ;; This function is called by:
  1711 ;;		_lcd_init
  1712 ;;		_lcd_backspace
  1713 ;;		_lcd_move_cursor
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text12
  1718   0005A6                     __ptext12:
  1719                           	callstack 0
  1720   0005A6                     _lcd_command:
  1721                           	callstack 25
  1722                           
  1723                           ;incstack = 0
  1724                           ;lcd_command@data stored from wreg
  1725   0005A6  6E30               	movwf	lcd_command@data^0,c
  1726                           
  1727                           ;main.c: 274: void lcd_command(char data, char lt, char rw, char rs);main.c: 275: {;main
      +                          .c: 276:     i2c_start_and_addr(0x4E);
  1728   0005A8  0E4E               	movlw	78
  1729   0005AA  ECFF  F004         	call	_i2c_start_and_addr
  1730                           
  1731                           ;main.c: 278:     i2c_data_tx((data & 0xF0) | (lt << 3) | 4 | (rw <<1) | rs);
  1732   0005AE  90D8               	bcf	status,0,c
  1733   0005B0  342B               	rlcf	lcd_command@rw^0,w,c
  1734   0005B2  6E2D               	movwf	??_lcd_command^0,c
  1735   0005B4  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1736   0005B8  90D8               	bcf	status,0,c
  1737   0005BA  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1738   0005BC  90D8               	bcf	status,0,c
  1739   0005BE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1740   0005C0  90D8               	bcf	status,0,c
  1741   0005C2  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1742   0005C4  5030               	movf	lcd_command@data^0,w,c
  1743   0005C6  0BF0               	andlw	240
  1744   0005C8  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1745   0005CA  102D               	iorwf	??_lcd_command^0,w,c
  1746   0005CC  102C               	iorwf	lcd_command@rs^0,w,c
  1747   0005CE  0904               	iorlw	4
  1748   0005D0  EC0C  F005         	call	_i2c_data_tx
  1749                           
  1750                           ;main.c: 279:     delay(1);
  1751   0005D4  0E01               	movlw	1
  1752   0005D6  6E1E               	movwf	delay@milliseconds^0,c
  1753   0005D8  0E00               	movlw	0
  1754   0005DA  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1755   0005DC  0E00               	movlw	0
  1756   0005DE  6E20               	movwf	(delay@milliseconds+2)^0,c
  1757   0005E0  0E00               	movlw	0
  1758   0005E2  6E21               	movwf	(delay@milliseconds+3)^0,c
  1759   0005E4  EC6D  F002         	call	_delay	;wreg free
  1760                           
  1761                           ;main.c: 280:     i2c_data_tx(lt<<3);
  1762   0005E8  382A               	swapf	lcd_command@lt^0,w,c
  1763   0005EA  42E8               	rrncf	wreg,f,c
  1764   0005EC  0BF8               	andlw	248
  1765   0005EE  EC0C  F005         	call	_i2c_data_tx
  1766                           
  1767                           ;main.c: 283:     i2c_data_tx(((data & 0x0F) <<4) | (lt << 3) | 4 | (rw <<1) | rs);
  1768   0005F2  90D8               	bcf	status,0,c
  1769   0005F4  342B               	rlcf	lcd_command@rw^0,w,c
  1770   0005F6  6E2D               	movwf	??_lcd_command^0,c
  1771   0005F8  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1772   0005FC  90D8               	bcf	status,0,c
  1773   0005FE  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1774   000600  90D8               	bcf	status,0,c
  1775   000602  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1776   000604  90D8               	bcf	status,0,c
  1777   000606  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1778   000608  C030  F02F         	movff	lcd_command@data,??_lcd_command+2
  1779   00060C  0E0F               	movlw	15
  1780   00060E  162F               	andwf	(??_lcd_command+2)^0,f,c
  1781   000610  382F               	swapf	(??_lcd_command+2)^0,w,c
  1782   000612  0BF0               	andlw	240
  1783   000614  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1784   000616  102D               	iorwf	??_lcd_command^0,w,c
  1785   000618  102C               	iorwf	lcd_command@rs^0,w,c
  1786   00061A  0904               	iorlw	4
  1787   00061C  EC0C  F005         	call	_i2c_data_tx
  1788                           
  1789                           ;main.c: 284:     delay(1);
  1790   000620  0E01               	movlw	1
  1791   000622  6E1E               	movwf	delay@milliseconds^0,c
  1792   000624  0E00               	movlw	0
  1793   000626  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1794   000628  0E00               	movlw	0
  1795   00062A  6E20               	movwf	(delay@milliseconds+2)^0,c
  1796   00062C  0E00               	movlw	0
  1797   00062E  6E21               	movwf	(delay@milliseconds+3)^0,c
  1798   000630  EC6D  F002         	call	_delay	;wreg free
  1799                           
  1800                           ;main.c: 285:     i2c_data_tx(lt<<3);
  1801   000634  382A               	swapf	lcd_command@lt^0,w,c
  1802   000636  42E8               	rrncf	wreg,f,c
  1803   000638  0BF8               	andlw	248
  1804   00063A  EC0C  F005         	call	_i2c_data_tx
  1805                           
  1806                           ;main.c: 287:     i2c_stop();
  1807   00063E  EC15  F005         	call	_i2c_stop	;wreg free
  1808   000642  0012               	return		;funcret
  1809   000644                     __end_of_lcd_command:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _i2c_stop *****************
  1813 ;; Defined at:
  1814 ;;		line 342 in file "main.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		None
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1
  1828 ;;      Params:         0       0       0
  1829 ;;      Locals:         0       0       0
  1830 ;;      Temps:          0       0       0
  1831 ;;      Totals:         0       0       0
  1832 ;;Total ram usage:        0 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; Hardware stack levels required when called: 2
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_lcd_command
  1839 ;;		_lcd_message
  1840 ;;		_lcd_clear
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843                           
  1844                           	psect	text13
  1845   000A2A                     __ptext13:
  1846                           	callstack 0
  1847   000A2A                     _i2c_stop:
  1848                           	callstack 26
  1849                           
  1850                           ;main.c: 345:     SSPCON2bits.PEN = 1;
  1851                           
  1852                           ;incstack = 0
  1853   000A2A  84C5               	bsf	197,2,c	;volatile
  1854   000A2C                     l219:
  1855   000A2C  A69E               	btfss	158,3,c	;volatile
  1856   000A2E  D7FE               	goto	l219
  1857                           
  1858                           ;main.c: 347:     PIR1bits.SSPIF = 0;
  1859   000A30  969E               	bcf	158,3,c	;volatile
  1860   000A32  0012               	return		;funcret
  1861   000A34                     __end_of_i2c_stop:
  1862                           	callstack 0
  1863                           
  1864 ;; *************** function _i2c_start_and_addr *****************
  1865 ;; Defined at:
  1866 ;;		line 350 in file "main.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  address         1    wreg     unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  address         1   17[COMRAM] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1
  1880 ;;      Params:         0       0       0
  1881 ;;      Locals:         1       0       0
  1882 ;;      Temps:          0       0       0
  1883 ;;      Totals:         1       0       0
  1884 ;;Total ram usage:        1 bytes
  1885 ;; Hardware stack levels used: 1
  1886 ;; Hardware stack levels required when called: 2
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_lcd_command
  1891 ;;		_lcd_message
  1892 ;;		_lcd_clear
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text14
  1897   0009FE                     __ptext14:
  1898                           	callstack 0
  1899   0009FE                     _i2c_start_and_addr:
  1900                           	callstack 26
  1901                           
  1902                           ;incstack = 0
  1903                           ;i2c_start_and_addr@address stored from wreg
  1904   0009FE  6E12               	movwf	i2c_start_and_addr@address^0,c
  1905                           
  1906                           ;main.c: 350: void i2c_start_and_addr(unsigned char address);main.c: 351: {;main.c: 353:
      +                               SSPCON2bits.SEN = 1;
  1907   000A00  80C5               	bsf	197,0,c	;volatile
  1908   000A02                     l225:
  1909   000A02  A69E               	btfss	158,3,c	;volatile
  1910   000A04  D7FE               	goto	l225
  1911                           
  1912                           ;main.c: 355:     PIR1bits.SSPIF = 0;
  1913   000A06  969E               	bcf	158,3,c	;volatile
  1914   000A08                     l967:
  1915                           
  1916                           ;main.c: 357:     {;main.c: 358:         SSPBUF = address;
  1917   000A08  C012  FFC9         	movff	i2c_start_and_addr@address,4041	;volatile
  1918   000A0C                     l229:
  1919   000A0C  A69E               	btfss	158,3,c	;volatile
  1920   000A0E  D7FE               	goto	l229
  1921                           
  1922                           ;main.c: 360:         PIR1bits.SSPIF = 0;
  1923   000A10  969E               	bcf	158,3,c	;volatile
  1924                           
  1925                           ;main.c: 361:     }while(SSPCON2bits.ACKSTAT);
  1926   000A12  ACC5               	btfss	197,6,c	;volatile
  1927   000A14  0012               	return	
  1928   000A16  D7F8               	goto	l967
  1929   000A18                     __end_of_i2c_start_and_addr:
  1930                           	callstack 0
  1931                           
  1932 ;; *************** function _i2c_data_tx *****************
  1933 ;; Defined at:
  1934 ;;		line 331 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  data            1    wreg     unsigned char 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;  data            1   17[COMRAM] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1
  1948 ;;      Params:         0       0       0
  1949 ;;      Locals:         1       0       0
  1950 ;;      Temps:          0       0       0
  1951 ;;      Totals:         1       0       0
  1952 ;;Total ram usage:        1 bytes
  1953 ;; Hardware stack levels used: 1
  1954 ;; Hardware stack levels required when called: 2
  1955 ;; This function calls:
  1956 ;;		Nothing
  1957 ;; This function is called by:
  1958 ;;		_lcd_command
  1959 ;;		_lcd_char
  1960 ;;		_lcd_clear
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text15
  1965   000A18                     __ptext15:
  1966                           	callstack 0
  1967   000A18                     _i2c_data_tx:
  1968                           	callstack 26
  1969                           
  1970                           ;incstack = 0
  1971                           ;i2c_data_tx@data stored from wreg
  1972   000A18  6E12               	movwf	i2c_data_tx@data^0,c
  1973   000A1A                     l211:
  1974                           
  1975                           ;main.c: 334:     {;main.c: 335:         SSPBUF = data;
  1976   000A1A  C012  FFC9         	movff	i2c_data_tx@data,4041	;volatile
  1977   000A1E                     l212:
  1978   000A1E  A69E               	btfss	158,3,c	;volatile
  1979   000A20  D7FE               	goto	l212
  1980                           
  1981                           ;main.c: 337:         PIR1bits.SSPIF = 0;
  1982   000A22  969E               	bcf	158,3,c	;volatile
  1983                           
  1984                           ;main.c: 339:     }while(SSPCON2bits.ACKSTAT);
  1985   000A24  ACC5               	btfss	197,6,c	;volatile
  1986   000A26  0012               	return	
  1987   000A28  D7F8               	goto	l211
  1988   000A2A                     __end_of_i2c_data_tx:
  1989                           	callstack 0
  1990                           
  1991 ;; *************** function _delay *****************
  1992 ;; Defined at:
  1993 ;;		line 151 in file "main.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  milliseconds    4   29[COMRAM] unsigned long 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  timer_value     8   33[COMRAM] unsigned long long 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, status,2, status,0, cstack
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1
  2007 ;;      Params:         4       0       0
  2008 ;;      Locals:         8       0       0
  2009 ;;      Temps:          0       0       0
  2010 ;;      Totals:        12       0       0
  2011 ;;Total ram usage:       12 bytes
  2012 ;; Hardware stack levels used: 1
  2013 ;; Hardware stack levels required when called: 3
  2014 ;; This function calls:
  2015 ;;		___lmul
  2016 ;; This function is called by:
  2017 ;;		_send
  2018 ;;		_lcd_command
  2019 ;;		_lcd_char
  2020 ;;		_lcd_clear
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text16
  2025   0004DA                     __ptext16:
  2026                           	callstack 0
  2027   0004DA                     _delay:
  2028                           	callstack 25
  2029                           
  2030                           ;main.c: 151: void delay(unsigned long milliseconds);main.c: 152: {;main.c: 153:     T1C
      +                          ON = 0b10110000;
  2031                           
  2032                           ;incstack = 0
  2033   0004DA  0EB0               	movlw	176
  2034   0004DC  6ECD               	movwf	205,c	;volatile
  2035                           
  2036                           ;main.c: 154:     PIE1bits.TMR1IE = 0;
  2037   0004DE  909D               	bcf	157,0,c	;volatile
  2038                           
  2039                           ;main.c: 155:     unsigned long long timer_value = (milliseconds) * 1000 ;
  2040   0004E0  C01E  F012         	movff	delay@milliseconds,___lmul@multiplier
  2041   0004E4  C01F  F013         	movff	delay@milliseconds+1,___lmul@multiplier+1
  2042   0004E8  C020  F014         	movff	delay@milliseconds+2,___lmul@multiplier+2
  2043   0004EC  C021  F015         	movff	delay@milliseconds+3,___lmul@multiplier+3
  2044   0004F0  0EE8               	movlw	232
  2045   0004F2  6E16               	movwf	___lmul@multiplicand^0,c
  2046   0004F4  0E03               	movlw	3
  2047   0004F6  6E17               	movwf	(___lmul@multiplicand+1)^0,c
  2048   0004F8  0E00               	movlw	0
  2049   0004FA  6E18               	movwf	(___lmul@multiplicand+2)^0,c
  2050   0004FC  0E00               	movlw	0
  2051   0004FE  6E19               	movwf	(___lmul@multiplicand+3)^0,c
  2052   000500  ECEF  F003         	call	___lmul	;wreg free
  2053   000504  5012               	movf	?___lmul^0,w,c
  2054   000506  6E22               	movwf	delay@timer_value^0,c
  2055   000508  5013               	movf	(?___lmul+1)^0,w,c
  2056   00050A  6E23               	movwf	(delay@timer_value+1)^0,c
  2057   00050C  5014               	movf	(?___lmul+2)^0,w,c
  2058   00050E  6E24               	movwf	(delay@timer_value+2)^0,c
  2059   000510  5015               	movf	(?___lmul+3)^0,w,c
  2060   000512  6E25               	movwf	(delay@timer_value+3)^0,c
  2061   000514  6A26               	clrf	(delay@timer_value+4)^0,c
  2062   000516  6A27               	clrf	(delay@timer_value+5)^0,c
  2063   000518  6A28               	clrf	(delay@timer_value+6)^0,c
  2064   00051A  6A29               	clrf	(delay@timer_value+7)^0,c
  2065                           
  2066                           ;main.c: 156:     while(timer_value > 65535)
  2067   00051C  D019               	goto	l1337
  2068   00051E                     l1329:
  2069                           
  2070                           ;main.c: 157:     {;main.c: 158:         timer_value -= 65535;
  2071   00051E  0EFF               	movlw	255
  2072   000520  5E22               	subwf	delay@timer_value^0,f,c
  2073   000522  0EFF               	movlw	255
  2074   000524  5A23               	subwfb	(delay@timer_value+1)^0,f,c
  2075   000526  0E00               	movlw	0
  2076   000528  5A24               	subwfb	(delay@timer_value+2)^0,f,c
  2077   00052A  0E00               	movlw	0
  2078   00052C  5A25               	subwfb	(delay@timer_value+3)^0,f,c
  2079   00052E  0E00               	movlw	0
  2080   000530  5A26               	subwfb	(delay@timer_value+4)^0,f,c
  2081   000532  0E00               	movlw	0
  2082   000534  5A27               	subwfb	(delay@timer_value+5)^0,f,c
  2083   000536  0E00               	movlw	0
  2084   000538  5A28               	subwfb	(delay@timer_value+6)^0,f,c
  2085   00053A  0E00               	movlw	0
  2086   00053C  5A29               	subwfb	(delay@timer_value+7)^0,f,c
  2087                           
  2088                           ;main.c: 159:         TMR1H = 0;
  2089   00053E  0E00               	movlw	0
  2090   000540  6ECF               	movwf	207,c	;volatile
  2091                           
  2092                           ;main.c: 160:         TMR1L = 0;
  2093   000542  0E00               	movlw	0
  2094   000544  6ECE               	movwf	206,c	;volatile
  2095                           
  2096                           ;main.c: 161:         T1CONbits.TMR1ON = 1;
  2097   000546  80CD               	bsf	205,0,c	;volatile
  2098   000548                     l154:
  2099   000548  A09E               	btfss	158,0,c	;volatile
  2100   00054A  D7FE               	goto	l154
  2101                           
  2102                           ;main.c: 163:         T1CONbits.TMR1ON = 0;
  2103   00054C  90CD               	bcf	205,0,c	;volatile
  2104                           
  2105                           ;main.c: 164:         PIR1bits.TMR1IF = 0;
  2106   00054E  909E               	bcf	158,0,c	;volatile
  2107   000550                     l1337:
  2108                           
  2109                           ;main.c: 156:     while(timer_value > 65535)
  2110   000550  5029               	movf	(delay@timer_value+7)^0,w,c
  2111   000552  1028               	iorwf	(delay@timer_value+6)^0,w,c
  2112   000554  1027               	iorwf	(delay@timer_value+5)^0,w,c
  2113   000556  1026               	iorwf	(delay@timer_value+4)^0,w,c
  2114   000558  1025               	iorwf	(delay@timer_value+3)^0,w,c
  2115   00055A  E1E1               	bnz	l1329
  2116   00055C  0424               	decf	(delay@timer_value+2)^0,w,c
  2117   00055E  B0D8               	btfsc	status,0,c
  2118   000560  D7DE               	goto	l1329
  2119                           
  2120                           ;main.c: 166:     timer_value = 65535 - timer_value + 1;
  2121   000562  5022               	movf	delay@timer_value^0,w,c
  2122   000564  0800               	sublw	0
  2123   000566  6E22               	movwf	delay@timer_value^0,c
  2124   000568  0E00               	movlw	0
  2125   00056A  5423               	subfwb	(delay@timer_value+1)^0,w,c
  2126   00056C  6E23               	movwf	(delay@timer_value+1)^0,c
  2127   00056E  0E01               	movlw	1
  2128   000570  5424               	subfwb	(delay@timer_value+2)^0,w,c
  2129   000572  6E24               	movwf	(delay@timer_value+2)^0,c
  2130   000574  0E00               	movlw	0
  2131   000576  5425               	subfwb	(delay@timer_value+3)^0,w,c
  2132   000578  6E25               	movwf	(delay@timer_value+3)^0,c
  2133   00057A  0E00               	movlw	0
  2134   00057C  5426               	subfwb	(delay@timer_value+4)^0,w,c
  2135   00057E  6E26               	movwf	(delay@timer_value+4)^0,c
  2136   000580  0E00               	movlw	0
  2137   000582  5427               	subfwb	(delay@timer_value+5)^0,w,c
  2138   000584  6E27               	movwf	(delay@timer_value+5)^0,c
  2139   000586  0E00               	movlw	0
  2140   000588  5428               	subfwb	(delay@timer_value+6)^0,w,c
  2141   00058A  6E28               	movwf	(delay@timer_value+6)^0,c
  2142   00058C  0E00               	movlw	0
  2143   00058E  5429               	subfwb	(delay@timer_value+7)^0,w,c
  2144   000590  6E29               	movwf	(delay@timer_value+7)^0,c
  2145                           
  2146                           ;main.c: 167:     TMR1H = (unsigned char)(0xFF00 & timer_value);
  2147   000592  0E00               	movlw	0
  2148   000594  6ECF               	movwf	207,c	;volatile
  2149                           
  2150                           ;main.c: 168:     TMR1L = (unsigned char)(0xFF & timer_value);
  2151   000596  C022  FFCE         	movff	delay@timer_value,4046	;volatile
  2152                           
  2153                           ;main.c: 169:     T1CONbits.TMR1ON = 1;
  2154   00059A  80CD               	bsf	205,0,c	;volatile
  2155   00059C                     l158:
  2156   00059C  A09E               	btfss	158,0,c	;volatile
  2157   00059E  D7FE               	goto	l158
  2158                           
  2159                           ;main.c: 171:     T1CONbits.TMR1ON = 0;
  2160   0005A0  90CD               	bcf	205,0,c	;volatile
  2161                           
  2162                           ;main.c: 172:     PIR1bits.TMR1IF = 0;
  2163   0005A2  909E               	bcf	158,0,c	;volatile
  2164   0005A4  0012               	return		;funcret
  2165   0005A6                     __end_of_delay:
  2166                           	callstack 0
  2167                           
  2168 ;; *************** function ___lmul *****************
  2169 ;; Defined at:
  2170 ;;		line 15 in file "C:\Microchip\xc8\v2.41\pic\sources\c99\common\Umul32.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  multiplier      4   17[COMRAM] unsigned long 
  2173 ;;  multiplicand    4   21[COMRAM] unsigned long 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  product         4   25[COMRAM] unsigned long 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  4   17[COMRAM] unsigned long 
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1
  2185 ;;      Params:         8       0       0
  2186 ;;      Locals:         4       0       0
  2187 ;;      Temps:          0       0       0
  2188 ;;      Totals:        12       0       0
  2189 ;;Total ram usage:       12 bytes
  2190 ;; Hardware stack levels used: 1
  2191 ;; Hardware stack levels required when called: 2
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_delay
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text17
  2200   0007DE                     __ptext17:
  2201                           	callstack 0
  2202   0007DE                     ___lmul:
  2203                           	callstack 25
  2204                           
  2205                           ;incstack = 0
  2206   0007DE  0E00               	movlw	0
  2207   0007E0  6E1A               	movwf	___lmul@product^0,c
  2208   0007E2  0E00               	movlw	0
  2209   0007E4  6E1B               	movwf	(___lmul@product+1)^0,c
  2210   0007E6  0E00               	movlw	0
  2211   0007E8  6E1C               	movwf	(___lmul@product+2)^0,c
  2212   0007EA  0E00               	movlw	0
  2213   0007EC  6E1D               	movwf	(___lmul@product+3)^0,c
  2214   0007EE                     l1315:
  2215   0007EE  A012               	btfss	___lmul@multiplier^0,0,c
  2216   0007F0  D008               	goto	l1319
  2217   0007F2  5016               	movf	___lmul@multiplicand^0,w,c
  2218   0007F4  261A               	addwf	___lmul@product^0,f,c
  2219   0007F6  5017               	movf	(___lmul@multiplicand+1)^0,w,c
  2220   0007F8  221B               	addwfc	(___lmul@product+1)^0,f,c
  2221   0007FA  5018               	movf	(___lmul@multiplicand+2)^0,w,c
  2222   0007FC  221C               	addwfc	(___lmul@product+2)^0,f,c
  2223   0007FE  5019               	movf	(___lmul@multiplicand+3)^0,w,c
  2224   000800  221D               	addwfc	(___lmul@product+3)^0,f,c
  2225   000802                     l1319:
  2226   000802  90D8               	bcf	status,0,c
  2227   000804  3616               	rlcf	___lmul@multiplicand^0,f,c
  2228   000806  3617               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2229   000808  3618               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2230   00080A  3619               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2231   00080C  90D8               	bcf	status,0,c
  2232   00080E  3215               	rrcf	(___lmul@multiplier+3)^0,f,c
  2233   000810  3214               	rrcf	(___lmul@multiplier+2)^0,f,c
  2234   000812  3213               	rrcf	(___lmul@multiplier+1)^0,f,c
  2235   000814  3212               	rrcf	___lmul@multiplier^0,f,c
  2236   000816  5012               	movf	___lmul@multiplier^0,w,c
  2237   000818  1013               	iorwf	(___lmul@multiplier+1)^0,w,c
  2238   00081A  1014               	iorwf	(___lmul@multiplier+2)^0,w,c
  2239   00081C  1015               	iorwf	(___lmul@multiplier+3)^0,w,c
  2240   00081E  A4D8               	btfss	status,2,c
  2241   000820  D7E6               	goto	l1315
  2242   000822  C01A  F012         	movff	___lmul@product,?___lmul
  2243   000826  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  2244   00082A  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  2245   00082E  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  2246   000832  0012               	return		;funcret
  2247   000834                     __end_of___lmul:
  2248                           	callstack 0
  2249                           
  2250 ;; *************** function _keypad_init *****************
  2251 ;; Defined at:
  2252 ;;		line 441 in file "main.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1
  2266 ;;      Params:         0       0       0
  2267 ;;      Locals:         0       0       0
  2268 ;;      Temps:          0       0       0
  2269 ;;      Totals:         0       0       0
  2270 ;;Total ram usage:        0 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 2
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text18
  2281   000960                     __ptext18:
  2282                           	callstack 0
  2283   000960                     _keypad_init:
  2284                           	callstack 28
  2285                           
  2286                           ;main.c: 443:     ADCON1bits.PCFG = 15;
  2287                           
  2288                           ;incstack = 0
  2289   000960  0E0F               	movlw	15
  2290   000962  12C1               	iorwf	193,f,c	;volatile
  2291                           
  2292                           ;main.c: 444:     TRISA = TRISA & 0xF0;
  2293   000964  5092               	movf	146,w,c	;volatile
  2294   000966  0BF0               	andlw	240
  2295   000968  6E92               	movwf	146,c	;volatile
  2296                           
  2297                           ;main.c: 445:     TRISB = (TRISB & 0xFF) | 0xF0;
  2298   00096A  5093               	movf	147,w,c	;volatile
  2299   00096C  09F0               	iorlw	240
  2300   00096E  6E93               	movwf	147,c	;volatile
  2301                           
  2302                           ;main.c: 447:     LATA = LATA & 0b11110000;
  2303   000970  5089               	movf	137,w,c	;volatile
  2304   000972  0BF0               	andlw	240
  2305   000974  6E89               	movwf	137,c	;volatile
  2306                           
  2307                           ;main.c: 448:     PORTB = PORTB & 0b00001111;
  2308   000976  5081               	movf	129,w,c	;volatile
  2309   000978  0B0F               	andlw	15
  2310   00097A  6E81               	movwf	129,c	;volatile
  2311                           
  2312                           ;main.c: 451:     T0CON = 0b00000100;
  2313   00097C  0E04               	movlw	4
  2314   00097E  6ED5               	movwf	213,c	;volatile
  2315                           
  2316                           ;main.c: 452:     INTCONbits.TMR0IF = 0;
  2317   000980  94F2               	bcf	242,2,c	;volatile
  2318                           
  2319                           ;main.c: 453:     TMR0H = 0x0B;
  2320   000982  0E0B               	movlw	11
  2321   000984  6ED7               	movwf	215,c	;volatile
  2322                           
  2323                           ;main.c: 454:     TMR0L = 0xDD;
  2324   000986  0EDD               	movlw	221
  2325   000988  6ED6               	movwf	214,c	;volatile
  2326                           
  2327                           ;main.c: 455:     INTCONbits.TMR0IE = 1;
  2328   00098A  8AF2               	bsf	242,5,c	;volatile
  2329                           
  2330                           ;main.c: 456:     T0CONbits.TMR0ON = 1;
  2331   00098C  8ED5               	bsf	213,7,c	;volatile
  2332   00098E  0012               	return		;funcret
  2333   000990                     __end_of_keypad_init:
  2334                           	callstack 0
  2335                           
  2336 ;; *************** function _ISR *****************
  2337 ;; Defined at:
  2338 ;;		line 122 in file "main.c"
  2339 ;; Parameters:    Size  Location     Type
  2340 ;;		None
  2341 ;; Auto vars:     Size  Location     Type
  2342 ;;  is_key_press    1   16[COMRAM] unsigned char 
  2343 ;;  current_row     1   15[COMRAM] unsigned char 
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1
  2353 ;;      Params:         0       0       0
  2354 ;;      Locals:         2       0       0
  2355 ;;      Temps:          9       0       0
  2356 ;;      Totals:        11       0       0
  2357 ;;Total ram usage:       11 bytes
  2358 ;; Hardware stack levels used: 1
  2359 ;; Hardware stack levels required when called: 1
  2360 ;; This function calls:
  2361 ;;		_keypress
  2362 ;; This function is called by:
  2363 ;;		Interrupt level 2
  2364 ;; This function uses a non-reentrant model
  2365 ;;
  2366                           
  2367                           	psect	intcode
  2368   000008                     __pintcode:
  2369                           	callstack 0
  2370   000008                     _ISR:
  2371                           	callstack 24
  2372                           
  2373                           ;incstack = 0
  2374   000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2375   00000A  CFD9 F008          	movff	fsr2l,??_ISR+1
  2376   00000E  CFDA F009          	movff	fsr2h,??_ISR+2
  2377   000012  CFF3 F00A          	movff	prodl,??_ISR+3
  2378   000016  CFF4 F00B          	movff	prodh,??_ISR+4
  2379   00001A  CFF6 F00C          	movff	tblptrl,??_ISR+5
  2380   00001E  CFF7 F00D          	movff	tblptrh,??_ISR+6
  2381   000022  CFF8 F00E          	movff	tblptru,??_ISR+7
  2382   000026  CFF5 F00F          	movff	tablat,??_ISR+8
  2383                           
  2384                           ;main.c: 124:     if(INTCONbits.TMR0IF == 1)
  2385   00002A  A4F2               	btfss	242,2,c	;volatile
  2386   00002C  D043               	goto	i2l149
  2387                           
  2388                           ;main.c: 125:     {;main.c: 127:         INTCONbits.TMR0IF = 0;
  2389   00002E  94F2               	bcf	242,2,c	;volatile
  2390                           
  2391                           ;main.c: 128:         TMR0H = 0x0B;
  2392   000030  0E0B               	movlw	11
  2393   000032  6ED7               	movwf	215,c	;volatile
  2394                           
  2395                           ;main.c: 129:         TMR0L = 0xDD;
  2396   000034  0EDD               	movlw	221
  2397   000036  6ED6               	movwf	214,c	;volatile
  2398                           
  2399                           ;main.c: 130:         char is_key_pressed = 0;
  2400   000038  0E00               	movlw	0
  2401   00003A  6E11               	movwf	ISR@is_key_pressed^0,c
  2402                           
  2403                           ;main.c: 131:         char current_row = 0;
  2404   00003C  0E00               	movlw	0
  2405   00003E  6E10               	movwf	ISR@current_row^0,c
  2406                           
  2407                           ;main.c: 134:         while(!is_key_pressed && current_row < 4)
  2408   000040  D005               	goto	i2l1287
  2409   000042                     i2l1283:
  2410                           
  2411                           ;main.c: 135:         {;main.c: 136:             is_key_pressed = keypress(current_row);
  2412   000042  5010               	movf	ISR@current_row^0,w,c
  2413   000044  ECFF  F001         	call	_keypress
  2414   000048  6E11               	movwf	ISR@is_key_pressed^0,c
  2415                           
  2416                           ;main.c: 137:             current_row++;
  2417   00004A  2A10               	incf	ISR@current_row^0,f,c
  2418   00004C                     i2l1287:
  2419                           
  2420                           ;main.c: 134:         while(!is_key_pressed && current_row < 4)
  2421   00004C  5011               	movf	ISR@is_key_pressed^0,w,c
  2422   00004E  A4D8               	btfss	status,2,c
  2423   000050  D003               	goto	i2u50_40
  2424   000052  0E03               	movlw	3
  2425   000054  6410               	cpfsgt	ISR@current_row^0,c
  2426   000056  D7F5               	goto	i2l1283
  2427   000058                     i2u50_40:
  2428                           
  2429                           ;main.c: 139:         if(is_key_pressed && message_length < (10) || (is_key_pressed && c
      +                          urrent_row == 4 && (is_key_pressed == 1 || is_key_pressed == 3 || is_key_pressed == 4)))
  2430   000058  5011               	movf	ISR@is_key_pressed^0,w,c
  2431   00005A  B4D8               	btfsc	status,2,c
  2432   00005C  D003               	goto	i2u52_40
  2433   00005E  0E09               	movlw	9
  2434   000060  643D               	cpfsgt	_message_length^0,c
  2435   000062  D012               	goto	i2u57_40
  2436   000064                     i2u52_40:
  2437   000064  5011               	movf	ISR@is_key_pressed^0,w,c
  2438   000066  B4D8               	btfsc	status,2,c
  2439   000068  D025               	goto	i2l149
  2440   00006A  0E04               	movlw	4
  2441   00006C  1810               	xorwf	ISR@current_row^0,w,c
  2442   00006E  A4D8               	btfss	status,2,c
  2443   000070  D021               	goto	i2l149
  2444   000072  0411               	decf	ISR@is_key_pressed^0,w,c
  2445   000074  B4D8               	btfsc	status,2,c
  2446   000076  D008               	goto	i2u57_40
  2447   000078  0E03               	movlw	3
  2448   00007A  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2449   00007C  B4D8               	btfsc	status,2,c
  2450   00007E  D004               	goto	i2u57_40
  2451   000080  0E04               	movlw	4
  2452   000082  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2453   000084  A4D8               	btfss	status,2,c
  2454   000086  D016               	goto	i2l149
  2455   000088                     i2u57_40:
  2456                           
  2457                           ;main.c: 140:         {;main.c: 141:             keys[message_length] = keypad_array[--c
      +                          urrent_row][--is_key_pressed];
  2458   000088  0611               	decf	ISR@is_key_pressed^0,f,c
  2459   00008A  0610               	decf	ISR@current_row^0,f,c
  2460   00008C  5010               	movf	ISR@current_row^0,w,c
  2461   00008E  0D04               	mullw	4
  2462   000090  50F3               	movf	243,w,c
  2463   000092  0F01               	addlw	low _keypad_array
  2464   000094  2411               	addwf	ISR@is_key_pressed^0,w,c
  2465   000096  6E07               	movwf	??_ISR^0,c
  2466   000098  C007  FFF6         	movff	??_ISR,tblptrl
  2467   00009C                     	if	1	;There is more than 1 active tblptr byte
  2468   00009C  0E02               	movlw	high __smallconst
  2469   00009E  6EF7               	movwf	tblptrh,c
  2470   0000A0                     	endif
  2471   0000A0                     	if	0	;tblptru may be non-zero
  2472   0000A0                     	endif
  2473   0000A0                     	if	0	;tblptru may be non-zero
  2474   0000A0                     	endif
  2475   0000A0  503D               	movf	_message_length^0,w,c
  2476   0000A2  0F3E               	addlw	low _keys
  2477   0000A4  6ED9               	movwf	fsr2l,c
  2478   0000A6  6ADA               	clrf	fsr2h,c
  2479   0000A8  0008               	tblrd		*
  2480   0000AA  CFF5 FFDF          	movff	tablat,indf2
  2481                           
  2482                           ;main.c: 142:             key_pressed = 1;
  2483   0000AE  0E01               	movlw	1
  2484   0000B0  6E3C               	movwf	_key_pressed^0,c
  2485                           
  2486                           ;main.c: 143:             message_length++;
  2487   0000B2  2A3D               	incf	_message_length^0,f,c
  2488   0000B4                     i2l149:
  2489   0000B4  C00F  FFF5         	movff	??_ISR+8,tablat
  2490   0000B8  C00E  FFF8         	movff	??_ISR+7,tblptru
  2491   0000BC  C00D  FFF7         	movff	??_ISR+6,tblptrh
  2492   0000C0  C00C  FFF6         	movff	??_ISR+5,tblptrl
  2493   0000C4  C00B  FFF4         	movff	??_ISR+4,prodh
  2494   0000C8  C00A  FFF3         	movff	??_ISR+3,prodl
  2495   0000CC  C009  FFDA         	movff	??_ISR+2,fsr2h
  2496   0000D0  C008  FFD9         	movff	??_ISR+1,fsr2l
  2497   0000D4  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2498   0000D6  0011               	retfie		f
  2499   0000D8                     __end_of_ISR:
  2500                           	callstack 0
  2501                           
  2502 ;; *************** function _keypress *****************
  2503 ;; Defined at:
  2504 ;;		line 366 in file "main.c"
  2505 ;; Parameters:    Size  Location     Type
  2506 ;;  current_row     1    wreg     unsigned char 
  2507 ;; Auto vars:     Size  Location     Type
  2508 ;;  current_row     1    3[COMRAM] unsigned char 
  2509 ;;  col_num         1    5[COMRAM] unsigned char 
  2510 ;;  col_key_pres    1    4[COMRAM] unsigned char 
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      unsigned char 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1
  2520 ;;      Params:         0       0       0
  2521 ;;      Locals:         3       0       0
  2522 ;;      Temps:          3       0       0
  2523 ;;      Totals:         6       0       0
  2524 ;;Total ram usage:        6 bytes
  2525 ;; Hardware stack levels used: 1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_ISR
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text20
  2534   0003FE                     __ptext20:
  2535                           	callstack 0
  2536   0003FE                     _keypress:
  2537                           	callstack 24
  2538                           
  2539                           ;incstack = 0
  2540                           ;keypress@current_row stored from wreg
  2541   0003FE  6E04               	movwf	keypress@current_row^0,c
  2542                           
  2543                           ;main.c: 366: char keypress(char current_row);main.c: 367: {;main.c: 369:     LATA = (un
      +                          signed char)(1 << current_row) | LATA;
  2544   000400  C004  F001         	movff	keypress@current_row,??_keypress
  2545   000404  0E01               	movlw	1
  2546   000406  6E02               	movwf	(??_keypress+1)^0,c
  2547   000408  2A01               	incf	??_keypress^0,f,c
  2548   00040A  D002               	goto	i2u20_44
  2549   00040C                     i2u20_45:
  2550   00040C  90D8               	bcf	status,0,c
  2551   00040E  3602               	rlcf	(??_keypress+1)^0,f,c
  2552   000410                     i2u20_44:
  2553   000410  2E01               	decfsz	??_keypress^0,f,c
  2554   000412  D7FC               	goto	i2u20_45
  2555   000414  5002               	movf	(??_keypress+1)^0,w,c
  2556   000416  1089               	iorwf	137,w,c	;volatile
  2557   000418  6E89               	movwf	137,c	;volatile
  2558                           
  2559                           ;main.c: 370:     char col_key_press = 0;
  2560   00041A  0E00               	movlw	0
  2561   00041C  6E05               	movwf	keypress@col_key_press^0,c
  2562                           
  2563                           ;main.c: 371:     char col_num = 0;
  2564   00041E  0E00               	movlw	0
  2565   000420  6E06               	movwf	keypress@col_num^0,c
  2566                           
  2567                           ;main.c: 373:     while(col_num < 4 && !col_key_press)
  2568   000422  D046               	goto	i2l1169
  2569   000424                     i2l1149:
  2570                           
  2571                           ;main.c: 374:     {;main.c: 375:         if((128 >> col_num) & PORTB)
  2572   000424  C006  F001         	movff	keypress@col_num,??_keypress
  2573   000428  0E80               	movlw	128
  2574   00042A  6E02               	movwf	(??_keypress+1)^0,c
  2575   00042C  0E00               	movlw	0
  2576   00042E  6E03               	movwf	(??_keypress+2)^0,c
  2577   000430  2A01               	incf	??_keypress^0,f,c
  2578   000432  D003               	goto	i2u21_44
  2579   000434                     i2u21_45:
  2580   000434  3403               	rlcf	(??_keypress+2)^0,w,c
  2581   000436  3203               	rrcf	(??_keypress+2)^0,f,c
  2582   000438  3202               	rrcf	(??_keypress+1)^0,f,c
  2583   00043A                     i2u21_44:
  2584   00043A  2E01               	decfsz	??_keypress^0,f,c
  2585   00043C  D7FB               	goto	i2u21_45
  2586   00043E  5002               	movf	(??_keypress+1)^0,w,c
  2587   000440  1481               	andwf	129,w,c	;volatile
  2588   000442  0900               	iorlw	0
  2589   000444  B4D8               	btfsc	status,2,c
  2590   000446  D033               	goto	i2l1167
  2591                           
  2592                           ;main.c: 376:         {;main.c: 377:             T3CON = 0b10010000;
  2593   000448  0E90               	movlw	144
  2594   00044A  6EB1               	movwf	177,c	;volatile
  2595                           
  2596                           ;main.c: 378:             PIE2bits.TMR3IE = 0;
  2597   00044C  92A0               	bcf	160,1,c	;volatile
  2598                           
  2599                           ;main.c: 379:             TMR3H = 0x63;
  2600   00044E  0E63               	movlw	99
  2601   000450  6EB3               	movwf	179,c	;volatile
  2602                           
  2603                           ;main.c: 380:             TMR3L = 0xC1;
  2604   000452  0EC1               	movlw	193
  2605   000454  6EB2               	movwf	178,c	;volatile
  2606                           
  2607                           ;main.c: 381:             PIR2bits.TMR3IF = 0;
  2608   000456  92A1               	bcf	161,1,c	;volatile
  2609                           
  2610                           ;main.c: 383:             T3CONbits.TMR3ON = 1;
  2611   000458  80B1               	bsf	177,0,c	;volatile
  2612   00045A                     i2l239:
  2613   00045A  A2A1               	btfss	161,1,c	;volatile
  2614   00045C  D7FE               	goto	i2l239
  2615                           
  2616                           ;main.c: 386:             T3CONbits.TMR3ON = 0;
  2617   00045E  90B1               	bcf	177,0,c	;volatile
  2618                           
  2619                           ;main.c: 387:             PIR2bits.TMR3IF = 0;
  2620   000460  92A1               	bcf	161,1,c	;volatile
  2621                           
  2622                           ;main.c: 389:             if((128 >> col_num) & PORTB)
  2623   000462  C006  F001         	movff	keypress@col_num,??_keypress
  2624   000466  0E80               	movlw	128
  2625   000468  6E02               	movwf	(??_keypress+1)^0,c
  2626   00046A  0E00               	movlw	0
  2627   00046C  6E03               	movwf	(??_keypress+2)^0,c
  2628   00046E  2A01               	incf	??_keypress^0,f,c
  2629   000470  D003               	goto	i2u24_44
  2630   000472                     i2u24_45:
  2631   000472  3403               	rlcf	(??_keypress+2)^0,w,c
  2632   000474  3203               	rrcf	(??_keypress+2)^0,f,c
  2633   000476  3202               	rrcf	(??_keypress+1)^0,f,c
  2634   000478                     i2u24_44:
  2635   000478  2E01               	decfsz	??_keypress^0,f,c
  2636   00047A  D7FB               	goto	i2u24_45
  2637   00047C  5002               	movf	(??_keypress+1)^0,w,c
  2638   00047E  1481               	andwf	129,w,c	;volatile
  2639   000480  0900               	iorlw	0
  2640   000482  B4D8               	btfsc	status,2,c
  2641   000484  D014               	goto	i2l1167
  2642   000486                     i2u25_40:
  2643   000486  C006  F001         	movff	keypress@col_num,??_keypress
  2644   00048A  0E80               	movlw	128
  2645   00048C  6E02               	movwf	(??_keypress+1)^0,c
  2646   00048E  0E00               	movlw	0
  2647   000490  6E03               	movwf	(??_keypress+2)^0,c
  2648   000492  2A01               	incf	??_keypress^0,f,c
  2649   000494  D003               	goto	i2u26_44
  2650   000496                     i2u26_45:
  2651   000496  3403               	rlcf	(??_keypress+2)^0,w,c
  2652   000498  3203               	rrcf	(??_keypress+2)^0,f,c
  2653   00049A  3202               	rrcf	(??_keypress+1)^0,f,c
  2654   00049C                     i2u26_44:
  2655   00049C  2E01               	decfsz	??_keypress^0,f,c
  2656   00049E  D7FB               	goto	i2u26_45
  2657   0004A0  5002               	movf	(??_keypress+1)^0,w,c
  2658   0004A2  1481               	andwf	129,w,c	;volatile
  2659   0004A4  0900               	iorlw	0
  2660   0004A6  A4D8               	btfss	status,2,c
  2661   0004A8  D7EE               	goto	i2u25_40
  2662                           
  2663                           ;main.c: 392:                 col_key_press = col_num + 1;
  2664   0004AA  2806               	incf	keypress@col_num^0,w,c
  2665   0004AC  6E05               	movwf	keypress@col_key_press^0,c
  2666   0004AE                     i2l1167:
  2667                           
  2668                           ;main.c: 395:         col_num++;
  2669   0004AE  2A06               	incf	keypress@col_num^0,f,c
  2670   0004B0                     i2l1169:
  2671                           
  2672                           ;main.c: 373:     while(col_num < 4 && !col_key_press)
  2673   0004B0  0E04               	movlw	4
  2674   0004B2  6006               	cpfslt	keypress@col_num^0,c
  2675   0004B4  D003               	goto	i2u29_40
  2676   0004B6  5005               	movf	keypress@col_key_press^0,w,c
  2677   0004B8  B4D8               	btfsc	status,2,c
  2678   0004BA  D7B4               	goto	i2l1149
  2679   0004BC                     i2u29_40:
  2680                           
  2681                           ;main.c: 399:     LATA = (unsigned char)(1 << current_row) ^ LATA;
  2682   0004BC  C004  F001         	movff	keypress@current_row,??_keypress
  2683   0004C0  0E01               	movlw	1
  2684   0004C2  6E02               	movwf	(??_keypress+1)^0,c
  2685   0004C4  2A01               	incf	??_keypress^0,f,c
  2686   0004C6  D002               	goto	i2u30_44
  2687   0004C8                     i2u30_45:
  2688   0004C8  90D8               	bcf	status,0,c
  2689   0004CA  3602               	rlcf	(??_keypress+1)^0,f,c
  2690   0004CC                     i2u30_44:
  2691   0004CC  2E01               	decfsz	??_keypress^0,f,c
  2692   0004CE  D7FC               	goto	i2u30_45
  2693   0004D0  5002               	movf	(??_keypress+1)^0,w,c
  2694   0004D2  1889               	xorwf	137,w,c	;volatile
  2695   0004D4  6E89               	movwf	137,c	;volatile
  2696                           
  2697                           ;main.c: 400:     return col_key_press;
  2698   0004D6  5005               	movf	keypress@col_key_press^0,w,c
  2699   0004D8  0012               	return		;funcret
  2700   0004DA                     __end_of_keypress:
  2701                           	callstack 0
  2702                           
  2703                           	psect	rparam
  2704   000000                     
  2705                           	psect	temp
  2706   000049                     btemp:
  2707                           	callstack 0
  2708   000049                     	ds	1
  2709   000000                     int$flags	set	btemp
  2710   000000                     wtemp8	set	btemp+1
  2711   000000                     ttemp5	set	btemp+1
  2712   000000                     ttemp6	set	btemp+4
  2713   000000                     ttemp7	set	btemp+8
  2714                           
  2715                           	psect	config
  2716                           
  2717                           ; Padding undefined space
  2718   300000                     	org	3145728
  2719   300000  FF                 	db	255
  2720                           
  2721                           ;Config register CONFIG1H @ 0x300001
  2722                           ;	Oscillator
  2723                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2724                           ;	Fail-Safe Clock Monitor Enable bit
  2725                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2726                           ;	Internal/External Oscillator Switchover bit
  2727                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2728   300001                     	org	3145729
  2729   300001  08                 	db	8
  2730                           
  2731                           ;Config register CONFIG2L @ 0x300002
  2732                           ;	Power-up Timer Enable bit
  2733                           ;	PWRT = OFF, PWRT disabled
  2734                           ;	Brown-out Reset Enable bits
  2735                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2736                           ;	Brown-out Reset Voltage bits
  2737                           ;	BORV = 3, Minimum Setting
  2738   300002                     	org	3145730
  2739   300002  1F                 	db	31
  2740                           
  2741                           ;Config register CONFIG2H @ 0x300003
  2742                           ;	Watchdog Timer Enable bit
  2743                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2744                           ;	Watchdog Timer Postscale Select bits
  2745                           ;	WDTPS = 32768, 1:32768
  2746   300003                     	org	3145731
  2747   300003  1E                 	db	30
  2748                           
  2749                           ; Padding undefined space
  2750   300004                     	org	3145732
  2751   300004  FF                 	db	255
  2752                           
  2753                           ;Config register CONFIG3H @ 0x300005
  2754                           ;	CCP2 MUX bit
  2755                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2756                           ;	PORTB A/D Enable bit
  2757                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2758                           ;	Low-Power Timer1 Oscillator Enable bit
  2759                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2760                           ;	MCLR Pin Enable bit
  2761                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2762   300005                     	org	3145733
  2763   300005  83                 	db	131
  2764                           
  2765                           ;Config register CONFIG4L @ 0x300006
  2766                           ;	Stack Full/Underflow Reset Enable bit
  2767                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2768                           ;	Single-Supply ICSP Enable bit
  2769                           ;	LVP = OFF, Single-Supply ICSP disabled
  2770                           ;	Boot Block Size Select bits
  2771                           ;	BBSIZ = BB256, 256 Word
  2772                           ;	Extended Instruction Set Enable bit
  2773                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2774                           ;	Background Debugger Enable bit
  2775                           ;	DEBUG = 0x1, unprogrammed default
  2776   300006                     	org	3145734
  2777   300006  81                 	db	129
  2778                           
  2779                           ; Padding undefined space
  2780   300007                     	org	3145735
  2781   300007  FF                 	db	255
  2782                           
  2783                           ;Config register CONFIG5L @ 0x300008
  2784                           ;	Code Protection bit
  2785                           ;	CP0 = OFF, Block 0 not code-protected
  2786                           ;	Code Protection bit
  2787                           ;	CP1 = OFF, Block 1 not code-protected
  2788   300008                     	org	3145736
  2789   300008  03                 	db	3
  2790                           
  2791                           ;Config register CONFIG5H @ 0x300009
  2792                           ;	Boot Block Code Protection bitProtect Boot
  2793                           ;	CPB = OFF, Boot block not code-protected
  2794                           ;	Data EEPROM Code Protection bit
  2795                           ;	CPD = OFF, Data EEPROM not code-protected
  2796   300009                     	org	3145737
  2797   300009  C0                 	db	192
  2798                           
  2799                           ;Config register CONFIG6L @ 0x30000A
  2800                           ;	Write Protection bit
  2801                           ;	WRT0 = OFF, Block 0 not write-protected
  2802                           ;	Write Protection bit
  2803                           ;	WRT1 = OFF, Block 1 not write-protected
  2804   30000A                     	org	3145738
  2805   30000A  03                 	db	3
  2806                           
  2807                           ;Config register CONFIG6H @ 0x30000B
  2808                           ;	Configuration Register Write Protection bit
  2809                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2810                           ;	Boot Block Write Protection bit
  2811                           ;	WRTB = OFF, Boot block not write-protected
  2812                           ;	Data EEPROM Write Protection bit
  2813                           ;	WRTD = OFF, Data EEPROM not write-protected
  2814   30000B                     	org	3145739
  2815   30000B  E0                 	db	224
  2816                           
  2817                           ;Config register CONFIG7L @ 0x30000C
  2818                           ;	Table Read Protection bit
  2819                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2820                           ;	Table Read Protection bit
  2821                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2822   30000C                     	org	3145740
  2823   30000C  03                 	db	3
  2824                           
  2825                           ;Config register CONFIG7H @ 0x30000D
  2826                           ;	Boot Block Table Read Protection bit
  2827                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2828   30000D                     	org	3145741
  2829   30000D  40                 	db	64
  2830                           tosu	equ	0xFFF
  2831                           tosh	equ	0xFFE
  2832                           tosl	equ	0xFFD
  2833                           stkptr	equ	0xFFC
  2834                           pclatu	equ	0xFFB
  2835                           pclath	equ	0xFFA
  2836                           pcl	equ	0xFF9
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           indf0	equ	0xFEF
  2844                           postinc0	equ	0xFEE
  2845                           postdec0	equ	0xFED
  2846                           preinc0	equ	0xFEC
  2847                           plusw0	equ	0xFEB
  2848                           fsr0h	equ	0xFEA
  2849                           fsr0l	equ	0xFE9
  2850                           wreg	equ	0xFE8
  2851                           indf1	equ	0xFE7
  2852                           postinc1	equ	0xFE6
  2853                           postdec1	equ	0xFE5
  2854                           preinc1	equ	0xFE4
  2855                           plusw1	equ	0xFE3
  2856                           fsr1h	equ	0xFE2
  2857                           fsr1l	equ	0xFE1
  2858                           bsr	equ	0xFE0
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           postdec2	equ	0xFDD
  2862                           preinc2	equ	0xFDC
  2863                           plusw2	equ	0xFDB
  2864                           fsr2h	equ	0xFDA
  2865                           fsr2l	equ	0xFD9
  2866                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    16
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     59      72
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    lcd_message@message	PTR unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[2]), STR_3(CODE[9]), STR_2(CODE[7]), STR_1(CODE[8]), 
		 -> keys(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_lcd_move_cursor
    _send_message->_packet_interim_amble
    _send_message->_packet_pre_post_amble
    _packet_pre_post_amble->_send
    _packet_interim_amble->_send
    _send->_delay
    _lcd_init->_lcd_move_cursor
    _lcd_move_cursor->_lcd_command
    _lcd_clear->_delay
    _lcd_backspace->_lcd_command
    _lcd_message->_lcd_char
    _lcd_char->_delay
    _lcd_command->_delay
    _delay->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_keypress

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   23172
                                             50 COMRAM     9     9      0
                        _keypad_init
                      _lcd_backspace
                          _lcd_clear
                           _lcd_init
                        _lcd_message
                    _lcd_move_cursor
                       _send_message
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_message                                         7     7      0    3480
                                             44 COMRAM     5     5      0
               _packet_interim_amble
              _packet_pre_post_amble
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_pre_post_amble                                2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_interim_amble                                 2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _send                                                 1     1      0    1091
                                             41 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    8911
                          _lcd_clear
                        _lcd_command
                        _lcd_message
                    _lcd_move_cursor
 ---------------------------------------------------------------------------------
 (1) _lcd_move_cursor                                      2     1      1    3209
                                             48 COMRAM     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0    1099
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _lcd_backspace                                        0     0      0    4603
                        _lcd_command
                        _lcd_message
 ---------------------------------------------------------------------------------
 (1) _lcd_message                                          2     0      2    1688
                                             43 COMRAM     2     0      2
                 _i2c_start_and_addr
                           _i2c_stop
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0    1172
                                             41 COMRAM     2     2      0
                              _delay
                        _i2c_data_tx
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          7     4      3    2915
                                             41 COMRAM     7     4      3
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_start_and_addr                                   1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_data_tx                                          1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                               12     8      4    1069
                                             29 COMRAM    12     8      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 11    11      0     300
                                              6 COMRAM    11    11      0
                           _keypress
 ---------------------------------------------------------------------------------
 (7) _keypress                                             6     6      0     135
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_init
   _lcd_backspace
     _lcd_command
       _delay
         ___lmul
       _i2c_data_tx
       _i2c_start_and_addr
       _i2c_stop
     _lcd_message
       _i2c_start_and_addr
       _i2c_stop
       _lcd_char
         _delay
         _i2c_data_tx
   _lcd_clear
     _delay
     _i2c_data_tx
     _i2c_start_and_addr
     _i2c_stop
   _lcd_init
     _lcd_clear
     _lcd_command
     _lcd_message
     _lcd_move_cursor
       _lcd_command
   _lcd_message
   _lcd_move_cursor
   _send_message
     _packet_interim_amble
       _send
         _delay
     _packet_pre_post_amble
       _send
     _send
   _system_init

 _ISR (ROOT)
   _keypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3B      48       1       57.1%
BITBIGSFRlh         19      0       0       9        0.0%
BITBIGSFRlllhll      F      0       0      15        0.0%
BITBIGSFRlllhll      D      0       0      14        0.0%
BITBIGSFRh           D      0       0       8        0.0%
BITBIGSFRlllllh      7      0       0      20        0.0%
BITBIGSFRllllhl      6      0       0      18        0.0%
BITBIGSFRllllhl      6      0       0      19        0.0%
BITBIGSFRlllhll      3      0       0      13        0.0%
BITBIGSFRlllhh       3      0       0      12        0.0%
BITBIGSFRllhhl       2      0       0      11        0.0%
BITBIGSFRllllhh      1      0       0      17        0.0%
BITBIGSFRllhhh       1      0       0      10        0.0%
BITBIGSFRlllhll      1      0       0      16        0.0%
BITBIGSFRllllll      1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      22        0.0%
DATA                 0      0      48       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Mar 22 16:46:32 2024

                  _SSPSTATbits 0FC7            __end_of_system_init 08BE                            l211 0A1A  
                          l212 0A1E                            l125 03FA                            l118 0322  
                          l225 0A02                            l154 0548                            l219 0A2C  
                          l229 0A0C                            l158 059C                            l967 0A08  
                          u700 0720                            _ISR 0008                            u630 07AA  
                          u640 07D2                            u637 07A0                            u670 09B8  
                          u647 07C8                            u680 09E2                            u840 0366  
                          wreg 0FE8                 lcd_char@letter 002B                           ?_ISR 0001  
                         l1315 07EE                           l1403 094A                           l1411 0998  
                         l1501 02CE                           l1319 0802                           l1423 09C2  
                         l1329 051E                           l1337 0550                           l1513 0300  
                         l1381 07B2                           l1453 06CE                           l1509 02F2  
                         l1527 0344                           l1471 0238                           l1377 078A  
                         l1457 06F8                           l1555 03CA                           l1539 037E  
                         l1485 0292                           l1559 03D8                           STR_1 021A  
                         STR_2 0222                           STR_3 0211                           STR_4 0229  
                         _LATA 0F89                           _LATB 0F8A                  ??_i2c_data_tx 0012  
                         _main 022C                           _keys 003E                           _send 08BE  
                         fsr0h 0FEA                ??_lcd_backspace 0031                           indf0 0FEF  
                         fsr2h 0FDA                           fsr0l 0FE9                           indf2 0FDF  
                         fsr2l 0FD9                           btemp 0049                           prodh 0FF4  
                         prodl 0FF3                           start 00D8      i2c_start_and_addr@address 0012  
             ?_lcd_move_cursor 0031                   ___param_bank 0000                          ??_ISR 0007  
                lcd_command@lt 002A                  lcd_command@rs 002C                  lcd_command@rw 002B  
                        ?_main 0001                          ?_send 0001                          _T0CON 0FD5  
                        _T1CON 0FCD                          _T3CON 0FB1                          i2l149 00B4  
                        i2l239 045A                          _TMR0H 0FD7                          _TMR1H 0FCF  
                        _TMR0L 0FD6                          _TMR1L 0FCE                          _TMR3H 0FB3  
                        _TMR3L 0FB2                          _PORTB 0F81                          _TRISA 0F92  
                        _TRISB 0F93            ___lmul@multiplicand 0016                          _delay 04DA  
                 ?_keypad_init 0001                i2c_data_tx@data 0012                          main@i 0036  
                        tablat 0FF5                          ttemp5 004A                          ttemp6 004D  
                        ttemp7 0051                          status 0FD8                          wtemp8 004A  
          __end_of_i2c_data_tx 0A2A                __initialization 09E4                    _system_init 0884  
                 __end_of_main 03FE                   __end_of_send 08F6          packet_interim_amble@i 002B  
             __end_of_i2c_stop 0A34          _packet_pre_post_amble 0990                         ??_main 0033  
                       ??_send 002A                  __activetblptr 0002             _i2c_start_and_addr 09FE  
                       ?_delay 001E            ?_i2c_start_and_addr 0001                         i2l1149 0424  
                       i2l1167 04AE                         i2l1169 04B0                         i2l1283 0042  
                       i2l1287 004C                         _SSPADD 0FC8                         _SSPBUF 0FC9  
             __end_of_lcd_char 0884               __end_of_lcd_init 06B8                         ___lmul 07DE  
         ??_i2c_start_and_addr 0012                         clear_0 09EA                         isa$std 0001  
             __end_of_keypress 04DA                   __mediumconst 0000                         tblptrh 0FF7  
                       tblptrl 0FF6                         tblptru 0FF8        lcd_move_cursor@position 0031  
                   __accesstop 0080        __end_of__initialization 09F0                    _i2c_data_tx 0A18  
                ___rparam_used 0001                 __pcstackCOMRAM 0001                  __end_of_delay 05A6  
       ?_packet_pre_post_amble 0001                        ??_delay 0022                      ?_i2c_stop 0001  
              lcd_command@data 0030                        ?___lmul 0012                 ISR@current_row 0010  
               ___lmul@product 001A                  ?_send_message 0001                        i2u20_44 0410  
                      i2u20_45 040C                        i2u21_44 043A                        i2u21_45 0434  
                      i2u30_44 04CC                        i2u30_45 04C8                        i2u24_44 0478  
                      i2u24_45 0472                        i2u25_40 0486                        i2u50_40 0058  
                      i2u26_44 049C                        i2u26_45 0496                        i2u52_40 0064  
                      i2u29_40 04BC                        i2u57_40 0088                      ?_lcd_char 0001  
                    ?_lcd_init 0001                     ??_i2c_stop 0012            lcd_move_cursor@line 0032  
                    ?_keypress 0001          __end_of_lcd_backspace 092C                        __Hparam 0000  
                      __Lparam 0000              __end_of_lcd_clear 0782                   ?_system_init 0001  
                 __psmallconst 0200                 ??_send_message 002D                        __pcinit 09E4  
                      __ramtop 0200                        __ptext0 022C                        __ptext1 0884  
                      __ptext2 06B8                        __ptext3 0990                        __ptext4 09BA  
                      __ptext5 08BE                        __ptext6 0644                        __ptext7 092C  
                      __ptext8 0722                        __ptext9 08F6                      _T0CONbits 0FD5  
                    _T1CONbits 0FCD                      _T3CONbits 0FB1                     ??_lcd_char 002A  
                   ??_lcd_init 0033           end_of_initialization 09F0           __end_of_keypad_array 0211  
                __Lmediumconst 0000                     ??_keypress 0001                        postinc0 0FEE  
                      postinc2 0FDE                      _TRISCbits 0F94             lcd_message@message 002C  
                 ?_i2c_data_tx 0001                  ??_lcd_command 002D                  ??_lcd_message 002E  
      ??_packet_pre_post_amble 002B                  send_message@i 0030                  send_message@j 002E  
               __end_of___lmul 0834               delay@timer_value 0022            start_initialization 09E4  
                  __end_of_ISR 00D8              ??_lcd_move_cursor 0032   __end_of_packet_interim_amble 09E4  
         __end_of_send_message 0722                       ??___lmul 001A            __end_of_lcd_command 0644  
          __end_of_lcd_message 07DE                    __pbssCOMRAM 003C                  ??_keypad_init 0012  
              keypress@col_num 0006                      __pintcode 0008              ISR@is_key_pressed 0011  
                 _keypad_array 0201                      _lcd_clear 0722                    __smallconst 0200  
                     _LATCbits 0F8B            __end_of_keypad_init 0990                       _PIE1bits 0F9D  
                     _PIE2bits 0FA0                    _lcd_command 05A6                       _PIR1bits 0F9E  
                     _PIR2bits 0FA1                    _lcd_message 0782          keypress@col_key_press 0005  
                     _RCONbits 0FD0                     ?_lcd_clear 0001           _packet_interim_amble 09BA  
                   _ADCON1bits 0FC1                      main@i_896 003A                      main@i_898 0038  
            ___lmul@multiplier 0012                    _INTCON2bits 0FF1                       _i2c_stop 0A2A  
                     __Hrparam 0000            keypress@current_row 0004                       __Lrparam 0000  
__end_of_packet_pre_post_amble 09BA          ?_packet_interim_amble 0001                _lcd_move_cursor 092C  
                 _send_message 06B8                    _key_pressed 003C                       __ptext10 0782  
                     __ptext11 0834                       __ptext20 03FE                       __ptext12 05A6  
                     __ptext13 0A2A                       __ptext14 09FE                       __ptext15 0A18  
                     __ptext16 04DA                       __ptext17 07DE                       __ptext18 0960  
                     _lcd_char 0834                    _keypad_init 0960                       _lcd_init 0644  
               _message_length 003D                       _keypress 03FE                  _lcd_backspace 08F6  
   __end_of_i2c_start_and_addr 0A18                       isa$xinst 0000                       int$flags 0049  
            delay@milliseconds 001E         packet_pre_post_amble@i 002B                    ??_lcd_clear 002A  
                  _OSCTUNEbits 0F9B                     _INTCONbits 0FF2                       intlevel2 0000  
                     send@data 002A                 ?_lcd_backspace 0001                     _OSCCONbits 0FD3  
      __end_of_lcd_move_cursor 0960                  ??_system_init 0012         ??_packet_interim_amble 002B  
                  _SSPCON1bits 0FC6                    _SSPCON2bits 0FC5                   ?_lcd_command 002A  
                 ?_lcd_message 002C  
