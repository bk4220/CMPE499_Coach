

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Feb 23 10:51:20 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	18F2221
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33   000000                     
    34                           ; Generated 17/10/2023 GMT
    35                           ; 
    36                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F2221 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68   000000                     
    69                           	psect	smallconst
    70   000200                     __psmallconst:
    71                           	callstack 0
    72   000200  00                 	db	0
    73   000201                     _keypad_array:
    74                           	callstack 0
    75   000201  31                 	db	49
    76   000202  32                 	db	50
    77   000203  33                 	db	51
    78   000204  41                 	db	65
    79   000205  34                 	db	52
    80   000206  35                 	db	53
    81   000207  36                 	db	54
    82   000208  42                 	db	66
    83   000209  37                 	db	55
    84   00020A  38                 	db	56
    85   00020B  39                 	db	57
    86   00020C  43                 	db	67
    87   00020D  2A                 	db	42
    88   00020E  30                 	db	48
    89   00020F  23                 	db	35
    90   000210  44                 	db	68
    91   000211                     __end_of_keypad_array:
    92                           	callstack 0
    93   000000                     _SSPCON1bits	set	4038
    94   000000                     _SSPADD	set	4040
    95   000000                     _SSPSTATbits	set	4039
    96   000000                     _TMR3L	set	4018
    97   000000                     _TMR3H	set	4019
    98   000000                     _TMR1L	set	4046
    99   000000                     _TMR1H	set	4047
   100   000000                     _T0CONbits	set	4053
   101   000000                     _T3CONbits	set	4017
   102   000000                     _T1CONbits	set	4045
   103   000000                     _PORTB	set	3969
   104   000000                     _LATA	set	3977
   105   000000                     _LATB	set	3978
   106   000000                     _PIE1bits	set	3997
   107   000000                     _T1CON	set	4045
   108   000000                     _TMR0L	set	4054
   109   000000                     _TMR0H	set	4055
   110   000000                     _INTCONbits	set	4082
   111   000000                     _INTCON2bits	set	4081
   112   000000                     _PIE2bits	set	4000
   113   000000                     _T3CON	set	4017
   114   000000                     _SSPCON2bits	set	4037
   115   000000                     _SSPBUF	set	4041
   116   000000                     _PIR1bits	set	3998
   117   000000                     _RCONbits	set	4048
   118   000000                     _OSCCONbits	set	4051
   119   000000                     _TRISA	set	3986
   120   000000                     _TRISB	set	3987
   121   000000                     _TRISCbits	set	3988
   122   000000                     _OSCTUNEbits	set	3995
   123   000000                     _LATCbits	set	3979
   124   000000                     _PIR2bits	set	4001
   125   000000                     _ADCON1bits	set	4033
   126   000000                     _T0CON	set	4053
   127   000211                     STR_3:
   128   000211  43                 	db	67	;'C'
   129   000212  61                 	db	97	;'a'
   130   000213  70                 	db	112	;'p'
   131   000214  73                 	db	115	;'s'
   132   000215  74                 	db	116	;'t'
   133   000216  6F                 	db	111	;'o'
   134   000217  6E                 	db	110	;'n'
   135   000218  65                 	db	101	;'e'
   136   000219  00                 	db	0
   137   00021A                     STR_1:
   138   00021A  53                 	db	83	;'S'
   139   00021B  65                 	db	101	;'e'
   140   00021C  6E                 	db	110	;'n'
   141   00021D  64                 	db	100	;'d'
   142   00021E  69                 	db	105	;'i'
   143   00021F  6E                 	db	110	;'n'
   144   000220  67                 	db	103	;'g'
   145   000221  00                 	db	0
   146   000222                     STR_2:
   147   000222  53                 	db	83	;'S'
   148   000223  65                 	db	101	;'e'
   149   000224  6E                 	db	110	;'n'
   150   000225  69                 	db	105	;'i'
   151   000226  6F                 	db	111	;'o'
   152   000227  72                 	db	114	;'r'
   153   000228  00                 	db	0
   154   000229                     STR_4:
   155   000229  20                 	db	32
   156   00022A  00                 	db	0
   157   00022B  00                 	db	0	; dummy byte at the end
   158   000000                     
   159                           ; #config settings
   160                           
   161                           	psect	cinit
   162   00094E                     __pcinit:
   163                           	callstack 0
   164   00094E                     start_initialization:
   165                           	callstack 0
   166   00094E                     __initialization:
   167                           	callstack 0
   168                           
   169                           ; Clear objects allocated to COMRAM (13 bytes)
   170   00094E  EE00  F03A         	lfsr	0,__pbssCOMRAM
   171   000952  0E0D               	movlw	13
   172   000954                     clear_0:
   173   000954  6AEE               	clrf	postinc0,c
   174   000956  06E8               	decf	wreg,f,c
   175   000958  E1FD               	bnz	clear_0
   176   00095A                     end_of_initialization:
   177                           	callstack 0
   178   00095A                     __end_of__initialization:
   179                           	callstack 0
   180   00095A  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   181   00095C  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   182   00095E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   183   000960  6EF8               	movwf	tblptru,c
   184   000962  0100               	movlb	0
   185   000964  EF16  F001         	goto	_main	;jump to C main() function
   186                           
   187                           	psect	bssCOMRAM
   188   00003A                     __pbssCOMRAM:
   189                           	callstack 0
   190   00003A                     _key_pressed:
   191                           	callstack 0
   192   00003A                     	ds	1
   193   00003B                     _message_length:
   194                           	callstack 0
   195   00003B                     	ds	1
   196   00003C                     _keys:
   197                           	callstack 0
   198   00003C                     	ds	11
   199                           
   200                           	psect	cstackCOMRAM
   201   000001                     __pcstackCOMRAM:
   202                           	callstack 0
   203   000001                     ??_keypress:
   204   000001                     
   205                           ; 1 bytes @ 0x0
   206   000001                     	ds	3
   207   000004                     keypress@current_row:
   208                           	callstack 0
   209                           
   210                           ; 1 bytes @ 0x3
   211   000004                     	ds	1
   212   000005                     keypress@col_key_press:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x4
   216   000005                     	ds	1
   217   000006                     keypress@col_num:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x5
   221   000006                     	ds	1
   222   000007                     ??_ISR:
   223                           
   224                           ; 1 bytes @ 0x6
   225   000007                     	ds	9
   226   000010                     ISR@current_row:
   227                           	callstack 0
   228                           
   229                           ; 1 bytes @ 0xF
   230   000010                     	ds	1
   231   000011                     ISR@is_key_pressed:
   232                           	callstack 0
   233                           
   234                           ; 1 bytes @ 0x10
   235   000011                     	ds	1
   236   000012                     ?___lmul:
   237                           	callstack 0
   238   000012                     i2c_data_tx@data:
   239                           	callstack 0
   240   000012                     i2c_start_and_addr@address:
   241                           	callstack 0
   242   000012                     ___lmul@multiplier:
   243                           	callstack 0
   244                           
   245                           ; 4 bytes @ 0x11
   246   000012                     	ds	4
   247   000016                     ___lmul@multiplicand:
   248                           	callstack 0
   249                           
   250                           ; 4 bytes @ 0x15
   251   000016                     	ds	4
   252   00001A                     ___lmul@product:
   253                           	callstack 0
   254                           
   255                           ; 4 bytes @ 0x19
   256   00001A                     	ds	4
   257   00001E                     delay@milliseconds:
   258                           	callstack 0
   259                           
   260                           ; 4 bytes @ 0x1D
   261   00001E                     	ds	4
   262   000022                     delay@timer_value:
   263                           	callstack 0
   264                           
   265                           ; 8 bytes @ 0x21
   266   000022                     	ds	8
   267   00002A                     ??_lcd_char:
   268   00002A                     send@data:
   269                           	callstack 0
   270   00002A                     lcd_command@lt:
   271                           	callstack 0
   272                           
   273                           ; 1 bytes @ 0x29
   274   00002A                     	ds	1
   275   00002B                     lcd_command@rw:
   276                           	callstack 0
   277   00002B                     lcd_char@letter:
   278                           	callstack 0
   279   00002B                     packet_pre_post_amble@i:
   280                           	callstack 0
   281                           
   282                           ; 2 bytes @ 0x2A
   283   00002B                     	ds	1
   284   00002C                     lcd_command@rs:
   285                           	callstack 0
   286   00002C                     lcd_message@message:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0x2B
   290   00002C                     	ds	1
   291   00002D                     ??_send_message:
   292   00002D                     ??_lcd_command:
   293                           
   294                           ; 1 bytes @ 0x2C
   295   00002D                     	ds	1
   296   00002E                     send_message@send_cnt:
   297                           	callstack 0
   298                           
   299                           ; 2 bytes @ 0x2D
   300   00002E                     	ds	2
   301   000030                     lcd_command@data:
   302                           	callstack 0
   303   000030                     send_message@i:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x2F
   307   000030                     	ds	1
   308   000031                     lcd_move_cursor@position:
   309                           	callstack 0
   310                           
   311                           ; 1 bytes @ 0x30
   312   000031                     	ds	1
   313   000032                     lcd_move_cursor@line:
   314                           	callstack 0
   315                           
   316                           ; 1 bytes @ 0x31
   317   000032                     	ds	1
   318   000033                     ??_main:
   319                           
   320                           ; 1 bytes @ 0x32
   321   000033                     	ds	3
   322   000036                     main@i:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0x35
   326   000036                     	ds	2
   327   000038                     main@i_893:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x37
   331   000038                     	ds	2
   332                           
   333 ;;
   334 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   335 ;;
   336 ;; *************** function _main *****************
   337 ;; Defined at:
   338 ;;		line 45 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;  i               2   55[COMRAM] int 
   343 ;;  i               2   53[COMRAM] int 
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : 0/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMRAM   BANK0   BANK1
   353 ;;      Params:         0       0       0
   354 ;;      Locals:         4       0       0
   355 ;;      Temps:          3       0       0
   356 ;;      Totals:         7       0       0
   357 ;;Total ram usage:        7 bytes
   358 ;; Hardware stack levels required when called: 7
   359 ;; This function calls:
   360 ;;		_keypad_init
   361 ;;		_lcd_backspace
   362 ;;		_lcd_clear
   363 ;;		_lcd_init
   364 ;;		_lcd_message
   365 ;;		_lcd_move_cursor
   366 ;;		_send_message
   367 ;;		_system_init
   368 ;; This function is called by:
   369 ;;		Startup code after reset
   370 ;; This function uses a non-reentrant model
   371 ;;
   372                           
   373                           	psect	text0
   374   00022C                     __ptext0:
   375                           	callstack 0
   376   00022C                     _main:
   377                           	callstack 24
   378                           
   379                           ;main.c: 48:     system_init();
   380                           
   381                           ;incstack = 0
   382   00022C  EC2A  F004         	call	_system_init	;wreg free
   383                           
   384                           ;main.c: 50:     lcd_init();
   385   000230  ECEC  F002         	call	_lcd_init	;wreg free
   386                           
   387                           ;main.c: 51:     keypad_init();
   388   000234  EC7A  F004         	call	_keypad_init	;wreg free
   389   000238                     l1404:
   390                           
   391                           ;main.c: 55:     {;main.c: 57:         if(key_pressed && keys[message_length-1] != '*' &
      +                          & keys[message_length-1] != 'D' && keys[message_length-1] != '#')
   392   000238  503A               	movf	_key_pressed^0,w,c
   393   00023A  B4D8               	btfsc	status,2,c
   394   00023C  D022               	goto	l1416
   395   00023E  503B               	movf	_message_length^0,w,c
   396   000240  0F3B               	addlw	low (_keys+255)
   397   000242  6ED9               	movwf	fsr2l,c
   398   000244  6ADA               	clrf	fsr2h,c
   399   000246  0E2A               	movlw	42
   400   000248  18DE               	xorwf	postinc2,w,c
   401   00024A  B4D8               	btfsc	status,2,c
   402   00024C  D01A               	goto	l1416
   403   00024E  503B               	movf	_message_length^0,w,c
   404   000250  0F3B               	addlw	low (_keys+255)
   405   000252  6ED9               	movwf	fsr2l,c
   406   000254  6ADA               	clrf	fsr2h,c
   407   000256  0E44               	movlw	68
   408   000258  18DE               	xorwf	postinc2,w,c
   409   00025A  B4D8               	btfsc	status,2,c
   410   00025C  D012               	goto	l1416
   411   00025E  503B               	movf	_message_length^0,w,c
   412   000260  0F3B               	addlw	low (_keys+255)
   413   000262  6ED9               	movwf	fsr2l,c
   414   000264  6ADA               	clrf	fsr2h,c
   415   000266  0E23               	movlw	35
   416   000268  18DE               	xorwf	postinc2,w,c
   417   00026A  B4D8               	btfsc	status,2,c
   418   00026C  D00A               	goto	l1416
   419                           
   420                           ;main.c: 58:         {;main.c: 59:             lcd_message(keys + message_length-1);
   421   00026E  503B               	movf	_message_length^0,w,c
   422   000270  0F3B               	addlw	low (_keys+-1)
   423   000272  6E33               	movwf	??_main^0,c
   424   000274  C033  F02C         	movff	??_main,lcd_message@message
   425   000278  6A2D               	clrf	(lcd_message@message+1)^0,c
   426   00027A  EC8D  F003         	call	_lcd_message	;wreg free
   427                           
   428                           ;main.c: 61:             key_pressed = 0;
   429   00027E  0E00               	movlw	0
   430   000280  6E3A               	movwf	_key_pressed^0,c
   431   000282                     l1416:
   432                           
   433                           ;main.c: 63:         if(key_pressed && keys[message_length-1] == '*' && message_length >
      +                           1)
   434   000282  503A               	movf	_key_pressed^0,w,c
   435   000284  B4D8               	btfsc	status,2,c
   436   000286  D01B               	goto	l1432
   437   000288  503B               	movf	_message_length^0,w,c
   438   00028A  0F3B               	addlw	low (_keys+255)
   439   00028C  6ED9               	movwf	fsr2l,c
   440   00028E  6ADA               	clrf	fsr2h,c
   441   000290  0E2A               	movlw	42
   442   000292  18DE               	xorwf	postinc2,w,c
   443   000294  A4D8               	btfss	status,2,c
   444   000296  D013               	goto	l1432
   445   000298  0E01               	movlw	1
   446   00029A  643B               	cpfsgt	_message_length^0,c
   447   00029C  D010               	goto	l1432
   448                           
   449                           ;main.c: 64:         {;main.c: 65:             lcd_backspace();
   450   00029E  EC45  F004         	call	_lcd_backspace	;wreg free
   451                           
   452                           ;main.c: 66:             keys[message_length - 1] = '\0';
   453   0002A2  503B               	movf	_message_length^0,w,c
   454   0002A4  0F3B               	addlw	low (_keys+255)
   455   0002A6  6ED9               	movwf	fsr2l,c
   456   0002A8  6ADA               	clrf	fsr2h,c
   457   0002AA  6ADF               	clrf	indf2,c
   458                           
   459                           ;main.c: 67:             keys[message_length - 2] = '\0';
   460   0002AC  503B               	movf	_message_length^0,w,c
   461   0002AE  0F3A               	addlw	low (_keys+254)
   462   0002B0  6ED9               	movwf	fsr2l,c
   463   0002B2  6ADA               	clrf	fsr2h,c
   464   0002B4  6ADF               	clrf	indf2,c
   465                           
   466                           ;main.c: 68:             message_length -= 2;
   467   0002B6  0E02               	movlw	2
   468   0002B8  5E3B               	subwf	_message_length^0,f,c
   469                           
   470                           ;main.c: 69:             key_pressed = 0;
   471   0002BA  0E00               	movlw	0
   472   0002BC  6E3A               	movwf	_key_pressed^0,c
   473   0002BE                     l1432:
   474                           
   475                           ;main.c: 71:         if(key_pressed && keys[message_length-1] == 'D')
   476   0002BE  503A               	movf	_key_pressed^0,w,c
   477   0002C0  B4D8               	btfsc	status,2,c
   478   0002C2  D027               	goto	l116
   479   0002C4  503B               	movf	_message_length^0,w,c
   480   0002C6  0F3B               	addlw	low (_keys+255)
   481   0002C8  6ED9               	movwf	fsr2l,c
   482   0002CA  6ADA               	clrf	fsr2h,c
   483   0002CC  0E44               	movlw	68
   484   0002CE  18DE               	xorwf	postinc2,w,c
   485   0002D0  A4D8               	btfss	status,2,c
   486   0002D2  D01F               	goto	l116
   487                           
   488                           ;main.c: 72:         {;main.c: 73:             lcd_clear();
   489   0002D4  EC5D  F003         	call	_lcd_clear	;wreg free
   490                           
   491                           ;main.c: 75:             for(int i = 0; i < message_length; i++)
   492   0002D8  0E00               	movlw	0
   493   0002DA  6E37               	movwf	(main@i+1)^0,c
   494   0002DC  0E00               	movlw	0
   495   0002DE  6E36               	movwf	main@i^0,c
   496   0002E0  D007               	goto	l1444
   497   0002E2                     l1440:
   498                           
   499                           ;main.c: 76:             {;main.c: 77:                 keys[i] = '\0';
   500   0002E2  5036               	movf	main@i^0,w,c
   501   0002E4  0F3C               	addlw	low _keys
   502   0002E6  6ED9               	movwf	fsr2l,c
   503   0002E8  6ADA               	clrf	fsr2h,c
   504   0002EA  6ADF               	clrf	indf2,c
   505                           
   506                           ;main.c: 78:             }
   507   0002EC  4A36               	infsnz	main@i^0,f,c
   508   0002EE  2A37               	incf	(main@i+1)^0,f,c
   509   0002F0                     l1444:
   510   0002F0  503B               	movf	_message_length^0,w,c
   511   0002F2  6E33               	movwf	??_main^0,c
   512   0002F4  6A34               	clrf	(??_main+1)^0,c
   513   0002F6  5033               	movf	??_main^0,w,c
   514   0002F8  5C36               	subwf	main@i^0,w,c
   515   0002FA  5037               	movf	(main@i+1)^0,w,c
   516   0002FC  0A80               	xorlw	128
   517   0002FE  6E35               	movwf	(??_main+2)^0,c
   518   000300  5034               	movf	(??_main+1)^0,w,c
   519   000302  0A80               	xorlw	128
   520   000304  5835               	subwfb	(??_main+2)^0,w,c
   521   000306  A0D8               	btfss	status,0,c
   522   000308  D7EC               	goto	l1440
   523                           
   524                           ;main.c: 80:             message_length = 0;
   525   00030A  0E00               	movlw	0
   526   00030C  6E3B               	movwf	_message_length^0,c
   527                           
   528                           ;main.c: 81:             key_pressed = 0;
   529   00030E  0E00               	movlw	0
   530   000310  6E3A               	movwf	_key_pressed^0,c
   531   000312                     l116:
   532                           
   533                           ;main.c: 84:         if(key_pressed && keys[message_length-1] == '#')
   534   000312  503A               	movf	_key_pressed^0,w,c
   535   000314  B4D8               	btfsc	status,2,c
   536   000316  D03B               	goto	l120
   537   000318  503B               	movf	_message_length^0,w,c
   538   00031A  0F3B               	addlw	low (_keys+255)
   539   00031C  6ED9               	movwf	fsr2l,c
   540   00031E  6ADA               	clrf	fsr2h,c
   541   000320  0E23               	movlw	35
   542   000322  18DE               	xorwf	postinc2,w,c
   543   000324  A4D8               	btfss	status,2,c
   544   000326  D033               	goto	l120
   545                           
   546                           ;main.c: 85:         {;main.c: 86:             lcd_move_cursor(1,0);
   547   000328  0E00               	movlw	0
   548   00032A  6E31               	movwf	lcd_move_cursor@position^0,c
   549   00032C  0E01               	movlw	1
   550   00032E  EC60  F004         	call	_lcd_move_cursor
   551                           
   552                           ;main.c: 87:             lcd_message("Sending");
   553   000332  0E1A               	movlw	low STR_1
   554   000334  6E2C               	movwf	lcd_message@message^0,c
   555   000336  502C               	movf	lcd_message@message^0,w,c
   556   000338  A4D8               	btfss	status,2,c
   557   00033A  0E02               	movlw	high __smallconst
   558   00033C  6E2D               	movwf	(lcd_message@message+1)^0,c
   559   00033E  EC8D  F003         	call	_lcd_message	;wreg free
   560                           
   561                           ;main.c: 88:             keys[message_length - 1] = '\0';
   562   000342  503B               	movf	_message_length^0,w,c
   563   000344  0F3B               	addlw	low (_keys+255)
   564   000346  6ED9               	movwf	fsr2l,c
   565   000348  6ADA               	clrf	fsr2h,c
   566   00034A  6ADF               	clrf	indf2,c
   567                           
   568                           ;main.c: 89:             send_message();
   569   00034C  EC26  F003         	call	_send_message	;wreg free
   570                           
   571                           ;main.c: 90:             lcd_clear();
   572   000350  EC5D  F003         	call	_lcd_clear	;wreg free
   573                           
   574                           ;main.c: 91:             for(int i = 0; i < message_length; i++)
   575   000354  0E00               	movlw	0
   576   000356  6E39               	movwf	(main@i_893+1)^0,c
   577   000358  0E00               	movlw	0
   578   00035A  6E38               	movwf	main@i_893^0,c
   579   00035C  D007               	goto	l1466
   580   00035E                     l1462:
   581                           
   582                           ;main.c: 92:             {;main.c: 93:                 keys[i] = '\0';
   583   00035E  5038               	movf	main@i_893^0,w,c
   584   000360  0F3C               	addlw	low _keys
   585   000362  6ED9               	movwf	fsr2l,c
   586   000364  6ADA               	clrf	fsr2h,c
   587   000366  6ADF               	clrf	indf2,c
   588                           
   589                           ;main.c: 94:             }
   590   000368  4A38               	infsnz	main@i_893^0,f,c
   591   00036A  2A39               	incf	(main@i_893+1)^0,f,c
   592   00036C                     l1466:
   593   00036C  503B               	movf	_message_length^0,w,c
   594   00036E  6E33               	movwf	??_main^0,c
   595   000370  6A34               	clrf	(??_main+1)^0,c
   596   000372  5033               	movf	??_main^0,w,c
   597   000374  5C38               	subwf	main@i_893^0,w,c
   598   000376  5039               	movf	(main@i_893+1)^0,w,c
   599   000378  0A80               	xorlw	128
   600   00037A  6E35               	movwf	(??_main+2)^0,c
   601   00037C  5034               	movf	(??_main+1)^0,w,c
   602   00037E  0A80               	xorlw	128
   603   000380  5835               	subwfb	(??_main+2)^0,w,c
   604   000382  A0D8               	btfss	status,0,c
   605   000384  D7EC               	goto	l1462
   606                           
   607                           ;main.c: 95:             key_pressed = 0;
   608   000386  0E00               	movlw	0
   609   000388  6E3A               	movwf	_key_pressed^0,c
   610                           
   611                           ;main.c: 96:             message_length = 0;
   612   00038A  0E00               	movlw	0
   613   00038C  6E3B               	movwf	_message_length^0,c
   614   00038E                     l120:
   615   00038E  0003               	sleep		;# 
   616   000390  D753               	goto	l1404
   617   000392                     __end_of_main:
   618                           	callstack 0
   619                           
   620 ;; *************** function _system_init *****************
   621 ;; Defined at:
   622 ;;		line 385 in file "main.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;		None
   625 ;; Auto vars:     Size  Location     Type
   626 ;;		None
   627 ;; Return value:  Size  Location     Type
   628 ;;                  1    wreg      void 
   629 ;; Registers used:
   630 ;;		wreg, status,2, status,0
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1
   636 ;;      Params:         0       0       0
   637 ;;      Locals:         0       0       0
   638 ;;      Temps:          0       0       0
   639 ;;      Totals:         0       0       0
   640 ;;Total ram usage:        0 bytes
   641 ;; Hardware stack levels used: 1
   642 ;; Hardware stack levels required when called: 2
   643 ;; This function calls:
   644 ;;		Nothing
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651   000854                     __ptext1:
   652                           	callstack 0
   653   000854                     _system_init:
   654                           	callstack 28
   655                           
   656                           ;main.c: 388:     OSCCONbits.SCS = 0;
   657                           
   658                           ;incstack = 0
   659   000854  0EFC               	movlw	-4
   660   000856  16D3               	andwf	211,f,c	;volatile
   661                           
   662                           ;main.c: 389:     OSCCONbits.IDLEN = 1;
   663   000858  8ED3               	bsf	211,7,c	;volatile
   664                           
   665                           ;main.c: 390:     OSCCONbits.IRCF = 7;
   666   00085A  0E70               	movlw	112
   667   00085C  12D3               	iorwf	211,f,c	;volatile
   668                           
   669                           ;main.c: 391:     OSCTUNEbits.PLLEN = 1;
   670   00085E  8C9B               	bsf	155,6,c	;volatile
   671                           
   672                           ;main.c: 394:     INTCONbits.GIE = 1;
   673   000860  8EF2               	bsf	242,7,c	;volatile
   674                           
   675                           ;main.c: 395:     INTCONbits.PEIE = 1;
   676   000862  8CF2               	bsf	242,6,c	;volatile
   677                           
   678                           ;main.c: 397:     INTCON2bits.RBPU = 0;
   679   000864  9EF1               	bcf	241,7,c	;volatile
   680                           
   681                           ;main.c: 401:     RCONbits.IPEN = 0;
   682   000866  9ED0               	bcf	208,7,c	;volatile
   683                           
   684                           ;main.c: 404:     LATCbits.LC7 = 1;
   685   000868  8E8B               	bsf	139,7,c	;volatile
   686                           
   687                           ;main.c: 405:     TRISCbits.RC7 = 0;
   688   00086A  9E94               	bcf	148,7,c	;volatile
   689                           
   690                           ;main.c: 406:     TRISB = TRISB & 0xF0;
   691   00086C  5093               	movf	147,w,c	;volatile
   692   00086E  0BF0               	andlw	240
   693   000870  6E93               	movwf	147,c	;volatile
   694                           
   695                           ;main.c: 409:     SSPSTATbits.SMP = 1;
   696   000872  8EC7               	bsf	199,7,c	;volatile
   697                           
   698                           ;main.c: 410:     SSPSTATbits.CKE = 0;
   699   000874  9CC7               	bcf	199,6,c	;volatile
   700                           
   701                           ;main.c: 411:     SSPADD = 0x50;
   702   000876  0E50               	movlw	80
   703   000878  6EC8               	movwf	200,c	;volatile
   704                           
   705                           ;main.c: 412:     SSPCON1bits.SSPEN = 1;
   706   00087A  8AC6               	bsf	198,5,c	;volatile
   707                           
   708                           ;main.c: 413:     SSPCON1bits.SSPM = 0b1000;
   709   00087C  50C6               	movf	198,w,c	;volatile
   710   00087E  0BF0               	andlw	-16
   711   000880  0908               	iorlw	8
   712   000882  6EC6               	movwf	198,c	;volatile
   713                           
   714                           ;main.c: 414:     TRISCbits.RC3 = 1;
   715   000884  8694               	bsf	148,3,c	;volatile
   716                           
   717                           ;main.c: 415:     TRISCbits.RC4 = 1;
   718   000886  8894               	bsf	148,4,c	;volatile
   719   000888  0012               	return		;funcret
   720   00088A                     __end_of_system_init:
   721                           	callstack 0
   722                           
   723 ;; *************** function _send_message *****************
   724 ;; Defined at:
   725 ;;		line 160 in file "main.c"
   726 ;; Parameters:    Size  Location     Type
   727 ;;		None
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  i               2   47[COMRAM] int 
   730 ;;  send_cnt        2   45[COMRAM] int 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1
   740 ;;      Params:         0       0       0
   741 ;;      Locals:         4       0       0
   742 ;;      Temps:          1       0       0
   743 ;;      Totals:         5       0       0
   744 ;;Total ram usage:        5 bytes
   745 ;; Hardware stack levels used: 1
   746 ;; Hardware stack levels required when called: 6
   747 ;; This function calls:
   748 ;;		_packet_pre_post_amble
   749 ;;		_send
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text2
   756   00064C                     __ptext2:
   757                           	callstack 0
   758   00064C                     _send_message:
   759                           	callstack 24
   760                           
   761                           ;main.c: 162:     int i = 0;
   762                           
   763                           ;incstack = 0
   764   00064C  0E00               	movlw	0
   765   00064E  6E31               	movwf	(send_message@i+1)^0,c
   766   000650  0E00               	movlw	0
   767   000652  6E30               	movwf	send_message@i^0,c
   768                           
   769                           ;main.c: 163:     int send_cnt = 0;
   770   000654  0E00               	movlw	0
   771   000656  6E2F               	movwf	(send_message@send_cnt+1)^0,c
   772   000658  0E00               	movlw	0
   773   00065A  6E2E               	movwf	send_message@send_cnt^0,c
   774                           
   775                           ;main.c: 164:     packet_pre_post_amble();
   776   00065C  EC92  F004         	call	_packet_pre_post_amble	;wreg free
   777                           
   778                           ;main.c: 165:     while(keys[i] != '\0')
   779   000660  D022               	goto	l1394
   780   000662                     l1382:
   781                           
   782                           ;main.c: 166:     {;main.c: 167:         send(keys[i] & 0x0F);
   783   000662  5030               	movf	send_message@i^0,w,c
   784   000664  0F3C               	addlw	low _keys
   785   000666  6ED9               	movwf	fsr2l,c
   786   000668  6ADA               	clrf	fsr2h,c
   787   00066A  50DF               	movf	indf2,w,c
   788   00066C  0B0F               	andlw	15
   789   00066E  EC0E  F004         	call	_send
   790                           
   791                           ;main.c: 168:         send((keys[i] & 0xF0)>> 4);
   792   000672  5030               	movf	send_message@i^0,w,c
   793   000674  0F3C               	addlw	low _keys
   794   000676  6ED9               	movwf	fsr2l,c
   795   000678  6ADA               	clrf	fsr2h,c
   796   00067A  50DF               	movf	indf2,w,c
   797   00067C  6E2D               	movwf	??_send_message^0,c
   798   00067E  382D               	swapf	??_send_message^0,w,c
   799   000680  0B0F               	andlw	15
   800   000682  0B0F               	andlw	15
   801   000684  EC0E  F004         	call	_send
   802                           
   803                           ;main.c: 169:         send_cnt++;
   804   000688  4A2E               	infsnz	send_message@send_cnt^0,f,c
   805   00068A  2A2F               	incf	(send_message@send_cnt+1)^0,f,c
   806                           
   807                           ;main.c: 170:         if(send_cnt == 3)
   808   00068C  0E03               	movlw	3
   809   00068E  182E               	xorwf	send_message@send_cnt^0,w,c
   810   000690  102F               	iorwf	(send_message@send_cnt+1)^0,w,c
   811   000692  A4D8               	btfss	status,2,c
   812   000694  D008               	goto	l1394
   813                           
   814                           ;main.c: 171:         {;main.c: 172:             i++;
   815   000696  4A30               	infsnz	send_message@i^0,f,c
   816   000698  2A31               	incf	(send_message@i+1)^0,f,c
   817                           
   818                           ;main.c: 173:             packet_pre_post_amble();
   819   00069A  EC92  F004         	call	_packet_pre_post_amble	;wreg free
   820                           
   821                           ;main.c: 174:             send_cnt = 0;
   822   00069E  0E00               	movlw	0
   823   0006A0  6E2F               	movwf	(send_message@send_cnt+1)^0,c
   824   0006A2  0E00               	movlw	0
   825   0006A4  6E2E               	movwf	send_message@send_cnt^0,c
   826   0006A6                     l1394:
   827                           
   828                           ;main.c: 165:     while(keys[i] != '\0')
   829   0006A6  5030               	movf	send_message@i^0,w,c
   830   0006A8  0F3C               	addlw	low _keys
   831   0006AA  6ED9               	movwf	fsr2l,c
   832   0006AC  6ADA               	clrf	fsr2h,c
   833   0006AE  50DF               	movf	indf2,w,c
   834   0006B0  A4D8               	btfss	status,2,c
   835   0006B2  D7D7               	goto	l1382
   836                           
   837                           ;main.c: 177:     packet_pre_post_amble();
   838   0006B4  EC92  F004         	call	_packet_pre_post_amble	;wreg free
   839   0006B8  0012               	return		;funcret
   840   0006BA                     __end_of_send_message:
   841                           	callstack 0
   842                           
   843 ;; *************** function _packet_pre_post_amble *****************
   844 ;; Defined at:
   845 ;;		line 181 in file "main.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;		None
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  i               2   42[COMRAM] int 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMRAM   BANK0   BANK1
   859 ;;      Params:         0       0       0
   860 ;;      Locals:         2       0       0
   861 ;;      Temps:          0       0       0
   862 ;;      Totals:         2       0       0
   863 ;;Total ram usage:        2 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; Hardware stack levels required when called: 5
   866 ;; This function calls:
   867 ;;		_send
   868 ;; This function is called by:
   869 ;;		_send_message
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text3
   874   000924                     __ptext3:
   875                           	callstack 0
   876   000924                     _packet_pre_post_amble:
   877                           	callstack 24
   878                           
   879                           ;main.c: 183:     for(int i = 0; i < 1; i++)
   880                           
   881                           ;incstack = 0
   882   000924  0E00               	movlw	0
   883   000926  6E2C               	movwf	(packet_pre_post_amble@i+1)^0,c
   884   000928  0E00               	movlw	0
   885   00092A  6E2B               	movwf	packet_pre_post_amble@i^0,c
   886   00092C                     l1358:
   887                           
   888                           ;main.c: 184:     {;main.c: 185:         send(0xA);
   889   00092C  0E0A               	movlw	10
   890   00092E  EC0E  F004         	call	_send
   891                           
   892                           ;main.c: 186:         send(0xA);
   893   000932  0E0A               	movlw	10
   894   000934  EC0E  F004         	call	_send
   895                           
   896                           ;main.c: 187:     }
   897   000938  4A2B               	infsnz	packet_pre_post_amble@i^0,f,c
   898   00093A  2A2C               	incf	(packet_pre_post_amble@i+1)^0,f,c
   899   00093C  BE2C               	btfsc	(packet_pre_post_amble@i+1)^0,7,c
   900   00093E  D7F6               	goto	l1358
   901   000940  502C               	movf	(packet_pre_post_amble@i+1)^0,w,c
   902   000942  E104               	bnz	u620
   903   000944  042B               	decf	packet_pre_post_amble@i^0,w,c
   904   000946  B0D8               	btfsc	status,0,c
   905   000948  0012               	return	
   906   00094A  D7F0               	goto	l1358
   907   00094C                     u620:
   908   00094C  0012               	return		;funcret
   909   00094E                     __end_of_packet_pre_post_amble:
   910                           	callstack 0
   911                           
   912 ;; *************** function _send *****************
   913 ;; Defined at:
   914 ;;		line 190 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  data            1    wreg     unsigned char 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  data            1   41[COMRAM] unsigned char 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, status,2, status,0, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1
   928 ;;      Params:         0       0       0
   929 ;;      Locals:         1       0       0
   930 ;;      Temps:          0       0       0
   931 ;;      Totals:         1       0       0
   932 ;;Total ram usage:        1 bytes
   933 ;; Hardware stack levels used: 1
   934 ;; Hardware stack levels required when called: 4
   935 ;; This function calls:
   936 ;;		_delay
   937 ;; This function is called by:
   938 ;;		_send_message
   939 ;;		_packet_pre_post_amble
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text4
   944   00081C                     __ptext4:
   945                           	callstack 0
   946   00081C                     _send:
   947                           	callstack 25
   948                           
   949                           ;incstack = 0
   950                           ;send@data stored from wreg
   951   00081C  6E2A               	movwf	send@data^0,c
   952                           
   953                           ;main.c: 190: void send(char data);main.c: 191: {;main.c: 192:     LATB = (LATB & 0xF0) 
      +                          | data;
   954   00081E  508A               	movf	138,w,c	;volatile
   955   000820  0BF0               	andlw	240
   956   000822  102A               	iorwf	send@data^0,w,c
   957   000824  6E8A               	movwf	138,c	;volatile
   958                           
   959                           ;main.c: 193:     LATCbits.LC7 = 0;
   960   000826  9E8B               	bcf	139,7,c	;volatile
   961                           
   962                           ;main.c: 194:     delay(200);
   963   000828  0EC8               	movlw	200
   964   00082A  6E1E               	movwf	delay@milliseconds^0,c
   965   00082C  0E00               	movlw	0
   966   00082E  6E1F               	movwf	(delay@milliseconds+1)^0,c
   967   000830  0E00               	movlw	0
   968   000832  6E20               	movwf	(delay@milliseconds+2)^0,c
   969   000834  0E00               	movlw	0
   970   000836  6E21               	movwf	(delay@milliseconds+3)^0,c
   971   000838  EC37  F002         	call	_delay	;wreg free
   972                           
   973                           ;main.c: 195:     LATCbits.LC7 = 1;
   974   00083C  8E8B               	bsf	139,7,c	;volatile
   975                           
   976                           ;main.c: 196:     delay(10);
   977   00083E  0E0A               	movlw	10
   978   000840  6E1E               	movwf	delay@milliseconds^0,c
   979   000842  0E00               	movlw	0
   980   000844  6E1F               	movwf	(delay@milliseconds+1)^0,c
   981   000846  0E00               	movlw	0
   982   000848  6E20               	movwf	(delay@milliseconds+2)^0,c
   983   00084A  0E00               	movlw	0
   984   00084C  6E21               	movwf	(delay@milliseconds+3)^0,c
   985   00084E  EC37  F002         	call	_delay	;wreg free
   986   000852  0012               	return		;funcret
   987   000854                     __end_of_send:
   988                           	callstack 0
   989                           
   990 ;; *************** function _lcd_init *****************
   991 ;; Defined at:
   992 ;;		line 199 in file "main.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;		None
   995 ;; Auto vars:     Size  Location     Type
   996 ;;		None
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1
  1006 ;;      Params:         0       0       0
  1007 ;;      Locals:         0       0       0
  1008 ;;      Temps:          0       0       0
  1009 ;;      Totals:         0       0       0
  1010 ;;Total ram usage:        0 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 6
  1013 ;; This function calls:
  1014 ;;		_lcd_clear
  1015 ;;		_lcd_command
  1016 ;;		_lcd_message
  1017 ;;		_lcd_move_cursor
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text5
  1024   0005D8                     __ptext5:
  1025                           	callstack 0
  1026   0005D8                     _lcd_init:
  1027                           	callstack 24
  1028                           
  1029                           ;main.c: 206:     lcd_command(0x02, 1, 0, 0);
  1030                           
  1031                           ;incstack = 0
  1032   0005D8  0E01               	movlw	1
  1033   0005DA  6E2A               	movwf	lcd_command@lt^0,c
  1034   0005DC  0E00               	movlw	0
  1035   0005DE  6E2B               	movwf	lcd_command@rw^0,c
  1036   0005E0  0E00               	movlw	0
  1037   0005E2  6E2C               	movwf	lcd_command@rs^0,c
  1038   0005E4  0E02               	movlw	2
  1039   0005E6  EC9D  F002         	call	_lcd_command
  1040                           
  1041                           ;main.c: 207:     lcd_command(0x28, 1, 0, 0);
  1042   0005EA  0E01               	movlw	1
  1043   0005EC  6E2A               	movwf	lcd_command@lt^0,c
  1044   0005EE  0E00               	movlw	0
  1045   0005F0  6E2B               	movwf	lcd_command@rw^0,c
  1046   0005F2  0E00               	movlw	0
  1047   0005F4  6E2C               	movwf	lcd_command@rs^0,c
  1048   0005F6  0E28               	movlw	40
  1049   0005F8  EC9D  F002         	call	_lcd_command
  1050                           
  1051                           ;main.c: 209:     lcd_clear();
  1052   0005FC  EC5D  F003         	call	_lcd_clear	;wreg free
  1053                           
  1054                           ;main.c: 212:     lcd_command(0x0F, 1, 0, 0);
  1055   000600  0E01               	movlw	1
  1056   000602  6E2A               	movwf	lcd_command@lt^0,c
  1057   000604  0E00               	movlw	0
  1058   000606  6E2B               	movwf	lcd_command@rw^0,c
  1059   000608  0E00               	movlw	0
  1060   00060A  6E2C               	movwf	lcd_command@rs^0,c
  1061   00060C  0E0F               	movlw	15
  1062   00060E  EC9D  F002         	call	_lcd_command
  1063                           
  1064                           ;main.c: 217:     lcd_move_cursor(0, 5);
  1065   000612  0E05               	movlw	5
  1066   000614  6E31               	movwf	lcd_move_cursor@position^0,c
  1067   000616  0E00               	movlw	0
  1068   000618  EC60  F004         	call	_lcd_move_cursor
  1069                           
  1070                           ;main.c: 218:     lcd_message("Senior");
  1071   00061C  0E22               	movlw	low STR_2
  1072   00061E  6E2C               	movwf	lcd_message@message^0,c
  1073   000620  502C               	movf	lcd_message@message^0,w,c
  1074   000622  A4D8               	btfss	status,2,c
  1075   000624  0E02               	movlw	high __smallconst
  1076   000626  6E2D               	movwf	(lcd_message@message+1)^0,c
  1077   000628  EC8D  F003         	call	_lcd_message	;wreg free
  1078                           
  1079                           ;main.c: 219:     lcd_move_cursor(1, 4);
  1080   00062C  0E04               	movlw	4
  1081   00062E  6E31               	movwf	lcd_move_cursor@position^0,c
  1082   000630  0E01               	movlw	1
  1083   000632  EC60  F004         	call	_lcd_move_cursor
  1084                           
  1085                           ;main.c: 220:     lcd_message("Capstone");
  1086   000636  0E11               	movlw	low STR_3
  1087   000638  6E2C               	movwf	lcd_message@message^0,c
  1088   00063A  502C               	movf	lcd_message@message^0,w,c
  1089   00063C  A4D8               	btfss	status,2,c
  1090   00063E  0E02               	movlw	high __smallconst
  1091   000640  6E2D               	movwf	(lcd_message@message+1)^0,c
  1092   000642  EC8D  F003         	call	_lcd_message	;wreg free
  1093                           
  1094                           ;main.c: 222:     lcd_clear();
  1095   000646  EC5D  F003         	call	_lcd_clear	;wreg free
  1096   00064A  0012               	return		;funcret
  1097   00064C                     __end_of_lcd_init:
  1098                           	callstack 0
  1099                           
  1100 ;; *************** function _lcd_move_cursor *****************
  1101 ;; Defined at:
  1102 ;;		line 240 in file "main.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  line            1    wreg     unsigned char 
  1105 ;;  position        1   48[COMRAM] unsigned char 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;  line            1   49[COMRAM] unsigned char 
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1
  1117 ;;      Params:         1       0       0
  1118 ;;      Locals:         1       0       0
  1119 ;;      Temps:          0       0       0
  1120 ;;      Totals:         2       0       0
  1121 ;;Total ram usage:        2 bytes
  1122 ;; Hardware stack levels used: 1
  1123 ;; Hardware stack levels required when called: 5
  1124 ;; This function calls:
  1125 ;;		_lcd_command
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;;		_lcd_init
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text6
  1133   0008C0                     __ptext6:
  1134                           	callstack 0
  1135   0008C0                     _lcd_move_cursor:
  1136                           	callstack 25
  1137                           
  1138                           ;incstack = 0
  1139                           ;lcd_move_cursor@line stored from wreg
  1140   0008C0  6E32               	movwf	lcd_move_cursor@line^0,c
  1141                           
  1142                           ;main.c: 240: void lcd_move_cursor(char line, char position);main.c: 241: {;main.c: 242:
      +                               if(!line)
  1143   0008C2  5032               	movf	lcd_move_cursor@line^0,w,c
  1144   0008C4  A4D8               	btfss	status,2,c
  1145   0008C6  D00B               	goto	l1350
  1146                           
  1147                           ;main.c: 243:     {;main.c: 244:         lcd_command(0x80 | position, 1, 0, 0);
  1148   0008C8  0E01               	movlw	1
  1149   0008CA  6E2A               	movwf	lcd_command@lt^0,c
  1150   0008CC  0E00               	movlw	0
  1151   0008CE  6E2B               	movwf	lcd_command@rw^0,c
  1152   0008D0  0E00               	movlw	0
  1153   0008D2  6E2C               	movwf	lcd_command@rs^0,c
  1154   0008D4  5031               	movf	lcd_move_cursor@position^0,w,c
  1155   0008D6  0980               	iorlw	128
  1156   0008D8  EC9D  F002         	call	_lcd_command
  1157                           
  1158                           ;main.c: 245:     }
  1159   0008DC  0012               	return	
  1160   0008DE                     l1350:
  1161                           
  1162                           ;main.c: 247:     {;main.c: 248:         lcd_command(0xC0 | position, 1, 0, 0);
  1163   0008DE  0E01               	movlw	1
  1164   0008E0  6E2A               	movwf	lcd_command@lt^0,c
  1165   0008E2  0E00               	movlw	0
  1166   0008E4  6E2B               	movwf	lcd_command@rw^0,c
  1167   0008E6  0E00               	movlw	0
  1168   0008E8  6E2C               	movwf	lcd_command@rs^0,c
  1169   0008EA  5031               	movf	lcd_move_cursor@position^0,w,c
  1170   0008EC  09C0               	iorlw	192
  1171   0008EE  EC9D  F002         	call	_lcd_command
  1172   0008F2  0012               	return		;funcret
  1173   0008F4                     __end_of_lcd_move_cursor:
  1174                           	callstack 0
  1175                           
  1176 ;; *************** function _lcd_clear *****************
  1177 ;; Defined at:
  1178 ;;		line 293 in file "main.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1
  1192 ;;      Params:         0       0       0
  1193 ;;      Locals:         0       0       0
  1194 ;;      Temps:          0       0       0
  1195 ;;      Totals:         0       0       0
  1196 ;;Total ram usage:        0 bytes
  1197 ;; Hardware stack levels used: 1
  1198 ;; Hardware stack levels required when called: 4
  1199 ;; This function calls:
  1200 ;;		_delay
  1201 ;;		_i2c_data_tx
  1202 ;;		_i2c_start_and_addr
  1203 ;;		_i2c_stop
  1204 ;; This function is called by:
  1205 ;;		_main
  1206 ;;		_lcd_init
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text7
  1211   0006BA                     __ptext7:
  1212                           	callstack 0
  1213   0006BA                     _lcd_clear:
  1214                           	callstack 25
  1215                           
  1216                           ;main.c: 295:     i2c_start_and_addr(0x4E);
  1217                           
  1218                           ;incstack = 0
  1219   0006BA  0E4E               	movlw	78
  1220   0006BC  ECB4  F004         	call	_i2c_start_and_addr
  1221                           
  1222                           ;main.c: 298:     i2c_data_tx(0b00001100);
  1223   0006C0  0E0C               	movlw	12
  1224   0006C2  ECC1  F004         	call	_i2c_data_tx
  1225                           
  1226                           ;main.c: 299:     delay(1);
  1227   0006C6  0E01               	movlw	1
  1228   0006C8  6E1E               	movwf	delay@milliseconds^0,c
  1229   0006CA  0E00               	movlw	0
  1230   0006CC  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1231   0006CE  0E00               	movlw	0
  1232   0006D0  6E20               	movwf	(delay@milliseconds+2)^0,c
  1233   0006D2  0E00               	movlw	0
  1234   0006D4  6E21               	movwf	(delay@milliseconds+3)^0,c
  1235   0006D6  EC37  F002         	call	_delay	;wreg free
  1236                           
  1237                           ;main.c: 300:     i2c_data_tx(0b00001000);
  1238   0006DA  0E08               	movlw	8
  1239   0006DC  ECC1  F004         	call	_i2c_data_tx
  1240                           
  1241                           ;main.c: 303:     i2c_data_tx(0b00011100);
  1242   0006E0  0E1C               	movlw	28
  1243   0006E2  ECC1  F004         	call	_i2c_data_tx
  1244                           
  1245                           ;main.c: 304:     delay(1);
  1246   0006E6  0E01               	movlw	1
  1247   0006E8  6E1E               	movwf	delay@milliseconds^0,c
  1248   0006EA  0E00               	movlw	0
  1249   0006EC  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1250   0006EE  0E00               	movlw	0
  1251   0006F0  6E20               	movwf	(delay@milliseconds+2)^0,c
  1252   0006F2  0E00               	movlw	0
  1253   0006F4  6E21               	movwf	(delay@milliseconds+3)^0,c
  1254   0006F6  EC37  F002         	call	_delay	;wreg free
  1255                           
  1256                           ;main.c: 305:     i2c_data_tx(0b00011000);
  1257   0006FA  0E18               	movlw	24
  1258   0006FC  ECC1  F004         	call	_i2c_data_tx
  1259                           
  1260                           ;main.c: 306:     delay(1);
  1261   000700  0E01               	movlw	1
  1262   000702  6E1E               	movwf	delay@milliseconds^0,c
  1263   000704  0E00               	movlw	0
  1264   000706  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1265   000708  0E00               	movlw	0
  1266   00070A  6E20               	movwf	(delay@milliseconds+2)^0,c
  1267   00070C  0E00               	movlw	0
  1268   00070E  6E21               	movwf	(delay@milliseconds+3)^0,c
  1269   000710  EC37  F002         	call	_delay	;wreg free
  1270                           
  1271                           ;main.c: 308:     i2c_stop();
  1272   000714  ECCA  F004         	call	_i2c_stop	;wreg free
  1273   000718  0012               	return		;funcret
  1274   00071A                     __end_of_lcd_clear:
  1275                           	callstack 0
  1276                           
  1277 ;; *************** function _lcd_backspace *****************
  1278 ;; Defined at:
  1279 ;;		line 233 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1
  1293 ;;      Params:         0       0       0
  1294 ;;      Locals:         0       0       0
  1295 ;;      Temps:          0       0       0
  1296 ;;      Totals:         0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used: 1
  1299 ;; Hardware stack levels required when called: 6
  1300 ;; This function calls:
  1301 ;;		_lcd_command
  1302 ;;		_lcd_message
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text8
  1309   00088A                     __ptext8:
  1310                           	callstack 0
  1311   00088A                     _lcd_backspace:
  1312                           	callstack 24
  1313                           
  1314                           ;main.c: 235:     lcd_command(0x10, 1, 0, 0);
  1315                           
  1316                           ;incstack = 0
  1317   00088A  0E01               	movlw	1
  1318   00088C  6E2A               	movwf	lcd_command@lt^0,c
  1319   00088E  0E00               	movlw	0
  1320   000890  6E2B               	movwf	lcd_command@rw^0,c
  1321   000892  0E00               	movlw	0
  1322   000894  6E2C               	movwf	lcd_command@rs^0,c
  1323   000896  0E10               	movlw	16
  1324   000898  EC9D  F002         	call	_lcd_command
  1325                           
  1326                           ;main.c: 236:     lcd_message(" ");
  1327   00089C  0E29               	movlw	low STR_4
  1328   00089E  6E2C               	movwf	lcd_message@message^0,c
  1329   0008A0  502C               	movf	lcd_message@message^0,w,c
  1330   0008A2  A4D8               	btfss	status,2,c
  1331   0008A4  0E02               	movlw	high __smallconst
  1332   0008A6  6E2D               	movwf	(lcd_message@message+1)^0,c
  1333   0008A8  EC8D  F003         	call	_lcd_message	;wreg free
  1334                           
  1335                           ;main.c: 237:     lcd_command(0x10, 1, 0, 0);
  1336   0008AC  0E01               	movlw	1
  1337   0008AE  6E2A               	movwf	lcd_command@lt^0,c
  1338   0008B0  0E00               	movlw	0
  1339   0008B2  6E2B               	movwf	lcd_command@rw^0,c
  1340   0008B4  0E00               	movlw	0
  1341   0008B6  6E2C               	movwf	lcd_command@rs^0,c
  1342   0008B8  0E10               	movlw	16
  1343   0008BA  EC9D  F002         	call	_lcd_command
  1344   0008BE  0012               	return		;funcret
  1345   0008C0                     __end_of_lcd_backspace:
  1346                           	callstack 0
  1347                           
  1348 ;; *************** function _lcd_message *****************
  1349 ;; Defined at:
  1350 ;;		line 270 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  message         2   43[COMRAM] PTR unsigned char 
  1353 ;;		 -> STR_4(2), STR_3(9), STR_2(7), STR_1(8), 
  1354 ;;		 -> keys(11), 
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;		None
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1
  1366 ;;      Params:         2       0       0
  1367 ;;      Locals:         0       0       0
  1368 ;;      Temps:          0       0       0
  1369 ;;      Totals:         2       0       0
  1370 ;;Total ram usage:        2 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; Hardware stack levels required when called: 5
  1373 ;; This function calls:
  1374 ;;		_i2c_start_and_addr
  1375 ;;		_i2c_stop
  1376 ;;		_lcd_char
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;;		_lcd_init
  1380 ;;		_lcd_backspace
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text9
  1385   00071A                     __ptext9:
  1386                           	callstack 0
  1387   00071A                     _lcd_message:
  1388                           	callstack 25
  1389                           
  1390                           ;main.c: 270: void lcd_message(char* message);main.c: 271: {;main.c: 272:     i2c_start_
      +                          and_addr(0x4E);
  1391                           
  1392                           ;incstack = 0
  1393   00071A  0E4E               	movlw	78
  1394   00071C  ECB4  F004         	call	_i2c_start_and_addr
  1395                           
  1396                           ;main.c: 273:     while(*message != 0)
  1397   000720  D014               	goto	l1328
  1398   000722                     l1324:
  1399                           
  1400                           ;main.c: 274:     {;main.c: 275:         lcd_char(*message);
  1401   000722  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1402   000726  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1403   00072A  6AF8               	clrf	tblptru,c
  1404   00072C  0E01               	movlw	(high __ramtop+-1)
  1405   00072E  64F7               	cpfsgt	tblptrh,c
  1406   000730  D003               	bra	u587
  1407   000732  0008               	tblrd		*
  1408   000734  50F5               	movf	tablat,w,c
  1409   000736  D005               	bra	u580
  1410   000738                     u587:
  1411   000738  CFF6 FFE9          	movff	tblptrl,fsr0l
  1412   00073C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1413   000740  50EF               	movf	indf0,w,c
  1414   000742                     u580:
  1415   000742  ECE6  F003         	call	_lcd_char
  1416                           
  1417                           ;main.c: 276:         message++;
  1418   000746  4A2C               	infsnz	lcd_message@message^0,f,c
  1419   000748  2A2D               	incf	(lcd_message@message+1)^0,f,c
  1420   00074A                     l1328:
  1421                           
  1422                           ;main.c: 273:     while(*message != 0)
  1423   00074A  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1424   00074E  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1425   000752  6AF8               	clrf	tblptru,c
  1426   000754  0E01               	movlw	(high __ramtop+-1)
  1427   000756  64F7               	cpfsgt	tblptrh,c
  1428   000758  D003               	bra	u597
  1429   00075A  0008               	tblrd		*
  1430   00075C  50F5               	movf	tablat,w,c
  1431   00075E  D005               	bra	u590
  1432   000760                     u597:
  1433   000760  CFF6 FFE9          	movff	tblptrl,fsr0l
  1434   000764  CFF7 FFEA          	movff	tblptrh,fsr0h
  1435   000768  50EF               	movf	indf0,w,c
  1436   00076A                     u590:
  1437   00076A  0900               	iorlw	0
  1438   00076C  A4D8               	btfss	status,2,c
  1439   00076E  D7D9               	goto	l1324
  1440                           
  1441                           ;main.c: 278:     i2c_stop();
  1442   000770  ECCA  F004         	call	_i2c_stop	;wreg free
  1443   000774  0012               	return		;funcret
  1444   000776                     __end_of_lcd_message:
  1445                           	callstack 0
  1446                           
  1447 ;; *************** function _lcd_char *****************
  1448 ;; Defined at:
  1449 ;;		line 281 in file "main.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  letter          1    wreg     unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  letter          1   42[COMRAM] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1
  1463 ;;      Params:         0       0       0
  1464 ;;      Locals:         1       0       0
  1465 ;;      Temps:          1       0       0
  1466 ;;      Totals:         2       0       0
  1467 ;;Total ram usage:        2 bytes
  1468 ;; Hardware stack levels used: 1
  1469 ;; Hardware stack levels required when called: 4
  1470 ;; This function calls:
  1471 ;;		_delay
  1472 ;;		_i2c_data_tx
  1473 ;; This function is called by:
  1474 ;;		_lcd_message
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text10
  1479   0007CC                     __ptext10:
  1480                           	callstack 0
  1481   0007CC                     _lcd_char:
  1482                           	callstack 25
  1483                           
  1484                           ;incstack = 0
  1485                           ;lcd_char@letter stored from wreg
  1486   0007CC  6E2B               	movwf	lcd_char@letter^0,c
  1487                           
  1488                           ;main.c: 281: void lcd_char(char letter);main.c: 282: {;main.c: 283:     i2c_data_tx((le
      +                          tter & 0xF0) | 0b1101);
  1489   0007CE  502B               	movf	lcd_char@letter^0,w,c
  1490   0007D0  0BF0               	andlw	240
  1491   0007D2  090D               	iorlw	13
  1492   0007D4  ECC1  F004         	call	_i2c_data_tx
  1493                           
  1494                           ;main.c: 284:     i2c_data_tx((letter & 0xF0) | 8);
  1495   0007D8  502B               	movf	lcd_char@letter^0,w,c
  1496   0007DA  0BF0               	andlw	240
  1497   0007DC  0908               	iorlw	8
  1498   0007DE  ECC1  F004         	call	_i2c_data_tx
  1499                           
  1500                           ;main.c: 288:     i2c_data_tx(((letter & 0x0F) << 4) | 0b1101);
  1501   0007E2  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1502   0007E6  0E0F               	movlw	15
  1503   0007E8  162A               	andwf	??_lcd_char^0,f,c
  1504   0007EA  382A               	swapf	??_lcd_char^0,w,c
  1505   0007EC  0BF0               	andlw	240
  1506   0007EE  090D               	iorlw	13
  1507   0007F0  ECC1  F004         	call	_i2c_data_tx
  1508                           
  1509                           ;main.c: 289:     i2c_data_tx(((letter & 0x0F) << 4) | 8);
  1510   0007F4  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1511   0007F8  0E0F               	movlw	15
  1512   0007FA  162A               	andwf	??_lcd_char^0,f,c
  1513   0007FC  382A               	swapf	??_lcd_char^0,w,c
  1514   0007FE  0BF0               	andlw	240
  1515   000800  0908               	iorlw	8
  1516   000802  ECC1  F004         	call	_i2c_data_tx
  1517                           
  1518                           ;main.c: 290:     delay(1);
  1519   000806  0E01               	movlw	1
  1520   000808  6E1E               	movwf	delay@milliseconds^0,c
  1521   00080A  0E00               	movlw	0
  1522   00080C  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1523   00080E  0E00               	movlw	0
  1524   000810  6E20               	movwf	(delay@milliseconds+2)^0,c
  1525   000812  0E00               	movlw	0
  1526   000814  6E21               	movwf	(delay@milliseconds+3)^0,c
  1527   000816  EC37  F002         	call	_delay	;wreg free
  1528   00081A  0012               	return		;funcret
  1529   00081C                     __end_of_lcd_char:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _lcd_command *****************
  1533 ;; Defined at:
  1534 ;;		line 254 in file "main.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  data            1    wreg     unsigned char 
  1537 ;;  lt              1   41[COMRAM] unsigned char 
  1538 ;;  rw              1   42[COMRAM] unsigned char 
  1539 ;;  rs              1   43[COMRAM] unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  data            1   47[COMRAM] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2, status,0, cstack
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1
  1551 ;;      Params:         3       0       0
  1552 ;;      Locals:         1       0       0
  1553 ;;      Temps:          3       0       0
  1554 ;;      Totals:         7       0       0
  1555 ;;Total ram usage:        7 bytes
  1556 ;; Hardware stack levels used: 1
  1557 ;; Hardware stack levels required when called: 4
  1558 ;; This function calls:
  1559 ;;		_delay
  1560 ;;		_i2c_data_tx
  1561 ;;		_i2c_start_and_addr
  1562 ;;		_i2c_stop
  1563 ;; This function is called by:
  1564 ;;		_lcd_init
  1565 ;;		_lcd_backspace
  1566 ;;		_lcd_move_cursor
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569                           
  1570                           	psect	text11
  1571   00053A                     __ptext11:
  1572                           	callstack 0
  1573   00053A                     _lcd_command:
  1574                           	callstack 25
  1575                           
  1576                           ;incstack = 0
  1577                           ;lcd_command@data stored from wreg
  1578   00053A  6E30               	movwf	lcd_command@data^0,c
  1579                           
  1580                           ;main.c: 254: void lcd_command(char data, char lt, char rw, char rs);main.c: 255: {;main
      +                          .c: 256:     i2c_start_and_addr(0x4E);
  1581   00053C  0E4E               	movlw	78
  1582   00053E  ECB4  F004         	call	_i2c_start_and_addr
  1583                           
  1584                           ;main.c: 258:     i2c_data_tx((data & 0xF0) | (lt << 3) | 4 | (rw <<1) | rs);
  1585   000542  90D8               	bcf	status,0,c
  1586   000544  342B               	rlcf	lcd_command@rw^0,w,c
  1587   000546  6E2D               	movwf	??_lcd_command^0,c
  1588   000548  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1589   00054C  90D8               	bcf	status,0,c
  1590   00054E  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1591   000550  90D8               	bcf	status,0,c
  1592   000552  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1593   000554  90D8               	bcf	status,0,c
  1594   000556  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1595   000558  5030               	movf	lcd_command@data^0,w,c
  1596   00055A  0BF0               	andlw	240
  1597   00055C  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1598   00055E  102D               	iorwf	??_lcd_command^0,w,c
  1599   000560  102C               	iorwf	lcd_command@rs^0,w,c
  1600   000562  0904               	iorlw	4
  1601   000564  ECC1  F004         	call	_i2c_data_tx
  1602                           
  1603                           ;main.c: 259:     delay(1);
  1604   000568  0E01               	movlw	1
  1605   00056A  6E1E               	movwf	delay@milliseconds^0,c
  1606   00056C  0E00               	movlw	0
  1607   00056E  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1608   000570  0E00               	movlw	0
  1609   000572  6E20               	movwf	(delay@milliseconds+2)^0,c
  1610   000574  0E00               	movlw	0
  1611   000576  6E21               	movwf	(delay@milliseconds+3)^0,c
  1612   000578  EC37  F002         	call	_delay	;wreg free
  1613                           
  1614                           ;main.c: 260:     i2c_data_tx(lt<<3);
  1615   00057C  382A               	swapf	lcd_command@lt^0,w,c
  1616   00057E  42E8               	rrncf	wreg,f,c
  1617   000580  0BF8               	andlw	248
  1618   000582  ECC1  F004         	call	_i2c_data_tx
  1619                           
  1620                           ;main.c: 263:     i2c_data_tx(((data & 0x0F) <<4) | (lt << 3) | 4 | (rw <<1) | rs);
  1621   000586  90D8               	bcf	status,0,c
  1622   000588  342B               	rlcf	lcd_command@rw^0,w,c
  1623   00058A  6E2D               	movwf	??_lcd_command^0,c
  1624   00058C  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1625   000590  90D8               	bcf	status,0,c
  1626   000592  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1627   000594  90D8               	bcf	status,0,c
  1628   000596  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1629   000598  90D8               	bcf	status,0,c
  1630   00059A  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1631   00059C  C030  F02F         	movff	lcd_command@data,??_lcd_command+2
  1632   0005A0  0E0F               	movlw	15
  1633   0005A2  162F               	andwf	(??_lcd_command+2)^0,f,c
  1634   0005A4  382F               	swapf	(??_lcd_command+2)^0,w,c
  1635   0005A6  0BF0               	andlw	240
  1636   0005A8  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1637   0005AA  102D               	iorwf	??_lcd_command^0,w,c
  1638   0005AC  102C               	iorwf	lcd_command@rs^0,w,c
  1639   0005AE  0904               	iorlw	4
  1640   0005B0  ECC1  F004         	call	_i2c_data_tx
  1641                           
  1642                           ;main.c: 264:     delay(1);
  1643   0005B4  0E01               	movlw	1
  1644   0005B6  6E1E               	movwf	delay@milliseconds^0,c
  1645   0005B8  0E00               	movlw	0
  1646   0005BA  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1647   0005BC  0E00               	movlw	0
  1648   0005BE  6E20               	movwf	(delay@milliseconds+2)^0,c
  1649   0005C0  0E00               	movlw	0
  1650   0005C2  6E21               	movwf	(delay@milliseconds+3)^0,c
  1651   0005C4  EC37  F002         	call	_delay	;wreg free
  1652                           
  1653                           ;main.c: 265:     i2c_data_tx(lt<<3);
  1654   0005C8  382A               	swapf	lcd_command@lt^0,w,c
  1655   0005CA  42E8               	rrncf	wreg,f,c
  1656   0005CC  0BF8               	andlw	248
  1657   0005CE  ECC1  F004         	call	_i2c_data_tx
  1658                           
  1659                           ;main.c: 267:     i2c_stop();
  1660   0005D2  ECCA  F004         	call	_i2c_stop	;wreg free
  1661   0005D6  0012               	return		;funcret
  1662   0005D8                     __end_of_lcd_command:
  1663                           	callstack 0
  1664                           
  1665 ;; *************** function _i2c_stop *****************
  1666 ;; Defined at:
  1667 ;;		line 322 in file "main.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		None
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1
  1681 ;;      Params:         0       0       0
  1682 ;;      Locals:         0       0       0
  1683 ;;      Temps:          0       0       0
  1684 ;;      Totals:         0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used: 1
  1687 ;; Hardware stack levels required when called: 2
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_lcd_command
  1692 ;;		_lcd_message
  1693 ;;		_lcd_clear
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           	psect	text12
  1698   000994                     __ptext12:
  1699                           	callstack 0
  1700   000994                     _i2c_stop:
  1701                           	callstack 26
  1702                           
  1703                           ;main.c: 325:     SSPCON2bits.PEN = 1;
  1704                           
  1705                           ;incstack = 0
  1706   000994  84C5               	bsf	197,2,c	;volatile
  1707   000996                     l208:
  1708   000996  A69E               	btfss	158,3,c	;volatile
  1709   000998  D7FE               	goto	l208
  1710                           
  1711                           ;main.c: 327:     PIR1bits.SSPIF = 0;
  1712   00099A  969E               	bcf	158,3,c	;volatile
  1713   00099C  0012               	return		;funcret
  1714   00099E                     __end_of_i2c_stop:
  1715                           	callstack 0
  1716                           
  1717 ;; *************** function _i2c_start_and_addr *****************
  1718 ;; Defined at:
  1719 ;;		line 330 in file "main.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  address         1    wreg     unsigned char 
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  address         1   17[COMRAM] unsigned char 
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1
  1733 ;;      Params:         0       0       0
  1734 ;;      Locals:         1       0       0
  1735 ;;      Temps:          0       0       0
  1736 ;;      Totals:         1       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used: 1
  1739 ;; Hardware stack levels required when called: 2
  1740 ;; This function calls:
  1741 ;;		Nothing
  1742 ;; This function is called by:
  1743 ;;		_lcd_command
  1744 ;;		_lcd_message
  1745 ;;		_lcd_clear
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text13
  1750   000968                     __ptext13:
  1751                           	callstack 0
  1752   000968                     _i2c_start_and_addr:
  1753                           	callstack 26
  1754                           
  1755                           ;incstack = 0
  1756                           ;i2c_start_and_addr@address stored from wreg
  1757   000968  6E12               	movwf	i2c_start_and_addr@address^0,c
  1758                           
  1759                           ;main.c: 330: void i2c_start_and_addr(unsigned char address);main.c: 331: {;main.c: 333:
      +                               SSPCON2bits.SEN = 1;
  1760   00096A  80C5               	bsf	197,0,c	;volatile
  1761   00096C                     l214:
  1762   00096C  A69E               	btfss	158,3,c	;volatile
  1763   00096E  D7FE               	goto	l214
  1764                           
  1765                           ;main.c: 335:     PIR1bits.SSPIF = 0;
  1766   000970  969E               	bcf	158,3,c	;volatile
  1767   000972                     l956:
  1768                           
  1769                           ;main.c: 337:     {;main.c: 338:         SSPBUF = address;
  1770   000972  C012  FFC9         	movff	i2c_start_and_addr@address,4041	;volatile
  1771   000976                     l218:
  1772   000976  A69E               	btfss	158,3,c	;volatile
  1773   000978  D7FE               	goto	l218
  1774                           
  1775                           ;main.c: 340:         PIR1bits.SSPIF = 0;
  1776   00097A  969E               	bcf	158,3,c	;volatile
  1777                           
  1778                           ;main.c: 341:     }while(SSPCON2bits.ACKSTAT);
  1779   00097C  ACC5               	btfss	197,6,c	;volatile
  1780   00097E  0012               	return	
  1781   000980  D7F8               	goto	l956
  1782   000982                     __end_of_i2c_start_and_addr:
  1783                           	callstack 0
  1784                           
  1785 ;; *************** function _i2c_data_tx *****************
  1786 ;; Defined at:
  1787 ;;		line 311 in file "main.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  data            1    wreg     unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  data            1   17[COMRAM] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1
  1801 ;;      Params:         0       0       0
  1802 ;;      Locals:         1       0       0
  1803 ;;      Temps:          0       0       0
  1804 ;;      Totals:         1       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used: 1
  1807 ;; Hardware stack levels required when called: 2
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_lcd_command
  1812 ;;		_lcd_char
  1813 ;;		_lcd_clear
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text14
  1818   000982                     __ptext14:
  1819                           	callstack 0
  1820   000982                     _i2c_data_tx:
  1821                           	callstack 26
  1822                           
  1823                           ;incstack = 0
  1824                           ;i2c_data_tx@data stored from wreg
  1825   000982  6E12               	movwf	i2c_data_tx@data^0,c
  1826   000984                     l200:
  1827                           
  1828                           ;main.c: 314:     {;main.c: 315:         SSPBUF = data;
  1829   000984  C012  FFC9         	movff	i2c_data_tx@data,4041	;volatile
  1830   000988                     l201:
  1831   000988  A69E               	btfss	158,3,c	;volatile
  1832   00098A  D7FE               	goto	l201
  1833                           
  1834                           ;main.c: 317:         PIR1bits.SSPIF = 0;
  1835   00098C  969E               	bcf	158,3,c	;volatile
  1836                           
  1837                           ;main.c: 319:     }while(SSPCON2bits.ACKSTAT);
  1838   00098E  ACC5               	btfss	197,6,c	;volatile
  1839   000990  0012               	return	
  1840   000992  D7F8               	goto	l200
  1841   000994                     __end_of_i2c_data_tx:
  1842                           	callstack 0
  1843                           
  1844 ;; *************** function _delay *****************
  1845 ;; Defined at:
  1846 ;;		line 136 in file "main.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;  milliseconds    4   29[COMRAM] unsigned long 
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  timer_value     8   33[COMRAM] unsigned long long 
  1851 ;; Return value:  Size  Location     Type
  1852 ;;                  1    wreg      void 
  1853 ;; Registers used:
  1854 ;;		wreg, status,2, status,0, cstack
  1855 ;; Tracked objects:
  1856 ;;		On entry : 0/0
  1857 ;;		On exit  : 0/0
  1858 ;;		Unchanged: 0/0
  1859 ;; Data sizes:     COMRAM   BANK0   BANK1
  1860 ;;      Params:         4       0       0
  1861 ;;      Locals:         8       0       0
  1862 ;;      Temps:          0       0       0
  1863 ;;      Totals:        12       0       0
  1864 ;;Total ram usage:       12 bytes
  1865 ;; Hardware stack levels used: 1
  1866 ;; Hardware stack levels required when called: 3
  1867 ;; This function calls:
  1868 ;;		___lmul
  1869 ;; This function is called by:
  1870 ;;		_send
  1871 ;;		_lcd_command
  1872 ;;		_lcd_char
  1873 ;;		_lcd_clear
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877                           	psect	text15
  1878   00046E                     __ptext15:
  1879                           	callstack 0
  1880   00046E                     _delay:
  1881                           	callstack 25
  1882                           
  1883                           ;main.c: 136: void delay(unsigned long milliseconds);main.c: 137: {;main.c: 138:     T1C
      +                          ON = 0b10110000;
  1884                           
  1885                           ;incstack = 0
  1886   00046E  0EB0               	movlw	176
  1887   000470  6ECD               	movwf	205,c	;volatile
  1888                           
  1889                           ;main.c: 139:     PIE1bits.TMR1IE = 0;
  1890   000472  909D               	bcf	157,0,c	;volatile
  1891                           
  1892                           ;main.c: 140:     unsigned long long timer_value = (milliseconds) * 1000 ;
  1893   000474  C01E  F012         	movff	delay@milliseconds,___lmul@multiplier
  1894   000478  C01F  F013         	movff	delay@milliseconds+1,___lmul@multiplier+1
  1895   00047C  C020  F014         	movff	delay@milliseconds+2,___lmul@multiplier+2
  1896   000480  C021  F015         	movff	delay@milliseconds+3,___lmul@multiplier+3
  1897   000484  0EE8               	movlw	232
  1898   000486  6E16               	movwf	___lmul@multiplicand^0,c
  1899   000488  0E03               	movlw	3
  1900   00048A  6E17               	movwf	(___lmul@multiplicand+1)^0,c
  1901   00048C  0E00               	movlw	0
  1902   00048E  6E18               	movwf	(___lmul@multiplicand+2)^0,c
  1903   000490  0E00               	movlw	0
  1904   000492  6E19               	movwf	(___lmul@multiplicand+3)^0,c
  1905   000494  ECBB  F003         	call	___lmul	;wreg free
  1906   000498  5012               	movf	?___lmul^0,w,c
  1907   00049A  6E22               	movwf	delay@timer_value^0,c
  1908   00049C  5013               	movf	(?___lmul+1)^0,w,c
  1909   00049E  6E23               	movwf	(delay@timer_value+1)^0,c
  1910   0004A0  5014               	movf	(?___lmul+2)^0,w,c
  1911   0004A2  6E24               	movwf	(delay@timer_value+2)^0,c
  1912   0004A4  5015               	movf	(?___lmul+3)^0,w,c
  1913   0004A6  6E25               	movwf	(delay@timer_value+3)^0,c
  1914   0004A8  6A26               	clrf	(delay@timer_value+4)^0,c
  1915   0004AA  6A27               	clrf	(delay@timer_value+5)^0,c
  1916   0004AC  6A28               	clrf	(delay@timer_value+6)^0,c
  1917   0004AE  6A29               	clrf	(delay@timer_value+7)^0,c
  1918                           
  1919                           ;main.c: 141:     while(timer_value > 65535)
  1920   0004B0  D019               	goto	l1284
  1921   0004B2                     l1276:
  1922                           
  1923                           ;main.c: 142:     {;main.c: 143:         timer_value -= 65535;
  1924   0004B2  0EFF               	movlw	255
  1925   0004B4  5E22               	subwf	delay@timer_value^0,f,c
  1926   0004B6  0EFF               	movlw	255
  1927   0004B8  5A23               	subwfb	(delay@timer_value+1)^0,f,c
  1928   0004BA  0E00               	movlw	0
  1929   0004BC  5A24               	subwfb	(delay@timer_value+2)^0,f,c
  1930   0004BE  0E00               	movlw	0
  1931   0004C0  5A25               	subwfb	(delay@timer_value+3)^0,f,c
  1932   0004C2  0E00               	movlw	0
  1933   0004C4  5A26               	subwfb	(delay@timer_value+4)^0,f,c
  1934   0004C6  0E00               	movlw	0
  1935   0004C8  5A27               	subwfb	(delay@timer_value+5)^0,f,c
  1936   0004CA  0E00               	movlw	0
  1937   0004CC  5A28               	subwfb	(delay@timer_value+6)^0,f,c
  1938   0004CE  0E00               	movlw	0
  1939   0004D0  5A29               	subwfb	(delay@timer_value+7)^0,f,c
  1940                           
  1941                           ;main.c: 144:         TMR1H = 0;
  1942   0004D2  0E00               	movlw	0
  1943   0004D4  6ECF               	movwf	207,c	;volatile
  1944                           
  1945                           ;main.c: 145:         TMR1L = 0;
  1946   0004D6  0E00               	movlw	0
  1947   0004D8  6ECE               	movwf	206,c	;volatile
  1948                           
  1949                           ;main.c: 146:         T1CONbits.TMR1ON = 1;
  1950   0004DA  80CD               	bsf	205,0,c	;volatile
  1951   0004DC                     l149:
  1952   0004DC  A09E               	btfss	158,0,c	;volatile
  1953   0004DE  D7FE               	goto	l149
  1954                           
  1955                           ;main.c: 148:         T1CONbits.TMR1ON = 0;
  1956   0004E0  90CD               	bcf	205,0,c	;volatile
  1957                           
  1958                           ;main.c: 149:         PIR1bits.TMR1IF = 0;
  1959   0004E2  909E               	bcf	158,0,c	;volatile
  1960   0004E4                     l1284:
  1961                           
  1962                           ;main.c: 141:     while(timer_value > 65535)
  1963   0004E4  5029               	movf	(delay@timer_value+7)^0,w,c
  1964   0004E6  1028               	iorwf	(delay@timer_value+6)^0,w,c
  1965   0004E8  1027               	iorwf	(delay@timer_value+5)^0,w,c
  1966   0004EA  1026               	iorwf	(delay@timer_value+4)^0,w,c
  1967   0004EC  1025               	iorwf	(delay@timer_value+3)^0,w,c
  1968   0004EE  E1E1               	bnz	l1276
  1969   0004F0  0424               	decf	(delay@timer_value+2)^0,w,c
  1970   0004F2  B0D8               	btfsc	status,0,c
  1971   0004F4  D7DE               	goto	l1276
  1972                           
  1973                           ;main.c: 151:     timer_value = 65535 - timer_value + 1;
  1974   0004F6  5022               	movf	delay@timer_value^0,w,c
  1975   0004F8  0800               	sublw	0
  1976   0004FA  6E22               	movwf	delay@timer_value^0,c
  1977   0004FC  0E00               	movlw	0
  1978   0004FE  5423               	subfwb	(delay@timer_value+1)^0,w,c
  1979   000500  6E23               	movwf	(delay@timer_value+1)^0,c
  1980   000502  0E01               	movlw	1
  1981   000504  5424               	subfwb	(delay@timer_value+2)^0,w,c
  1982   000506  6E24               	movwf	(delay@timer_value+2)^0,c
  1983   000508  0E00               	movlw	0
  1984   00050A  5425               	subfwb	(delay@timer_value+3)^0,w,c
  1985   00050C  6E25               	movwf	(delay@timer_value+3)^0,c
  1986   00050E  0E00               	movlw	0
  1987   000510  5426               	subfwb	(delay@timer_value+4)^0,w,c
  1988   000512  6E26               	movwf	(delay@timer_value+4)^0,c
  1989   000514  0E00               	movlw	0
  1990   000516  5427               	subfwb	(delay@timer_value+5)^0,w,c
  1991   000518  6E27               	movwf	(delay@timer_value+5)^0,c
  1992   00051A  0E00               	movlw	0
  1993   00051C  5428               	subfwb	(delay@timer_value+6)^0,w,c
  1994   00051E  6E28               	movwf	(delay@timer_value+6)^0,c
  1995   000520  0E00               	movlw	0
  1996   000522  5429               	subfwb	(delay@timer_value+7)^0,w,c
  1997   000524  6E29               	movwf	(delay@timer_value+7)^0,c
  1998                           
  1999                           ;main.c: 152:     TMR1H = (unsigned char)(0xFF00 & timer_value);
  2000   000526  0E00               	movlw	0
  2001   000528  6ECF               	movwf	207,c	;volatile
  2002                           
  2003                           ;main.c: 153:     TMR1L = (unsigned char)(0xFF & timer_value);
  2004   00052A  C022  FFCE         	movff	delay@timer_value,4046	;volatile
  2005                           
  2006                           ;main.c: 154:     T1CONbits.TMR1ON = 1;
  2007   00052E  80CD               	bsf	205,0,c	;volatile
  2008   000530                     l153:
  2009   000530  A09E               	btfss	158,0,c	;volatile
  2010   000532  D7FE               	goto	l153
  2011                           
  2012                           ;main.c: 156:     T1CONbits.TMR1ON = 0;
  2013   000534  90CD               	bcf	205,0,c	;volatile
  2014                           
  2015                           ;main.c: 157:     PIR1bits.TMR1IF = 0;
  2016   000536  909E               	bcf	158,0,c	;volatile
  2017   000538  0012               	return		;funcret
  2018   00053A                     __end_of_delay:
  2019                           	callstack 0
  2020                           
  2021 ;; *************** function ___lmul *****************
  2022 ;; Defined at:
  2023 ;;		line 15 in file "F:\Program Files\MicroChip\XC8\v2.45\pic\sources\c99\common\Umul32.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;  multiplier      4   17[COMRAM] unsigned long 
  2026 ;;  multiplicand    4   21[COMRAM] unsigned long 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;  product         4   25[COMRAM] unsigned long 
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  4   17[COMRAM] unsigned long 
  2031 ;; Registers used:
  2032 ;;		wreg, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1
  2038 ;;      Params:         8       0       0
  2039 ;;      Locals:         4       0       0
  2040 ;;      Temps:          0       0       0
  2041 ;;      Totals:        12       0       0
  2042 ;;Total ram usage:       12 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; Hardware stack levels required when called: 2
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_delay
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text16
  2053   000776                     __ptext16:
  2054                           	callstack 0
  2055   000776                     ___lmul:
  2056                           	callstack 25
  2057                           
  2058                           ;incstack = 0
  2059   000776  0E00               	movlw	0
  2060   000778  6E1A               	movwf	___lmul@product^0,c
  2061   00077A  0E00               	movlw	0
  2062   00077C  6E1B               	movwf	(___lmul@product+1)^0,c
  2063   00077E  0E00               	movlw	0
  2064   000780  6E1C               	movwf	(___lmul@product+2)^0,c
  2065   000782  0E00               	movlw	0
  2066   000784  6E1D               	movwf	(___lmul@product+3)^0,c
  2067   000786                     l1262:
  2068   000786  A012               	btfss	___lmul@multiplier^0,0,c
  2069   000788  D008               	goto	l1266
  2070   00078A  5016               	movf	___lmul@multiplicand^0,w,c
  2071   00078C  261A               	addwf	___lmul@product^0,f,c
  2072   00078E  5017               	movf	(___lmul@multiplicand+1)^0,w,c
  2073   000790  221B               	addwfc	(___lmul@product+1)^0,f,c
  2074   000792  5018               	movf	(___lmul@multiplicand+2)^0,w,c
  2075   000794  221C               	addwfc	(___lmul@product+2)^0,f,c
  2076   000796  5019               	movf	(___lmul@multiplicand+3)^0,w,c
  2077   000798  221D               	addwfc	(___lmul@product+3)^0,f,c
  2078   00079A                     l1266:
  2079   00079A  90D8               	bcf	status,0,c
  2080   00079C  3616               	rlcf	___lmul@multiplicand^0,f,c
  2081   00079E  3617               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2082   0007A0  3618               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2083   0007A2  3619               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2084   0007A4  90D8               	bcf	status,0,c
  2085   0007A6  3215               	rrcf	(___lmul@multiplier+3)^0,f,c
  2086   0007A8  3214               	rrcf	(___lmul@multiplier+2)^0,f,c
  2087   0007AA  3213               	rrcf	(___lmul@multiplier+1)^0,f,c
  2088   0007AC  3212               	rrcf	___lmul@multiplier^0,f,c
  2089   0007AE  5012               	movf	___lmul@multiplier^0,w,c
  2090   0007B0  1013               	iorwf	(___lmul@multiplier+1)^0,w,c
  2091   0007B2  1014               	iorwf	(___lmul@multiplier+2)^0,w,c
  2092   0007B4  1015               	iorwf	(___lmul@multiplier+3)^0,w,c
  2093   0007B6  A4D8               	btfss	status,2,c
  2094   0007B8  D7E6               	goto	l1262
  2095   0007BA  C01A  F012         	movff	___lmul@product,?___lmul
  2096   0007BE  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  2097   0007C2  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  2098   0007C6  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  2099   0007CA  0012               	return		;funcret
  2100   0007CC                     __end_of___lmul:
  2101                           	callstack 0
  2102                           
  2103 ;; *************** function _keypad_init *****************
  2104 ;; Defined at:
  2105 ;;		line 418 in file "main.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1
  2119 ;;      Params:         0       0       0
  2120 ;;      Locals:         0       0       0
  2121 ;;      Temps:          0       0       0
  2122 ;;      Totals:         0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used: 1
  2125 ;; Hardware stack levels required when called: 2
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text17
  2134   0008F4                     __ptext17:
  2135                           	callstack 0
  2136   0008F4                     _keypad_init:
  2137                           	callstack 28
  2138                           
  2139                           ;main.c: 420:     ADCON1bits.PCFG = 15;
  2140                           
  2141                           ;incstack = 0
  2142   0008F4  0E0F               	movlw	15
  2143   0008F6  12C1               	iorwf	193,f,c	;volatile
  2144                           
  2145                           ;main.c: 421:     TRISA = TRISA & 0xF0;
  2146   0008F8  5092               	movf	146,w,c	;volatile
  2147   0008FA  0BF0               	andlw	240
  2148   0008FC  6E92               	movwf	146,c	;volatile
  2149                           
  2150                           ;main.c: 422:     TRISB = (TRISB & 0xFF) | 0xF0;
  2151   0008FE  5093               	movf	147,w,c	;volatile
  2152   000900  09F0               	iorlw	240
  2153   000902  6E93               	movwf	147,c	;volatile
  2154                           
  2155                           ;main.c: 424:     LATA = LATA & 0b11110000;
  2156   000904  5089               	movf	137,w,c	;volatile
  2157   000906  0BF0               	andlw	240
  2158   000908  6E89               	movwf	137,c	;volatile
  2159                           
  2160                           ;main.c: 425:     PORTB = PORTB & 0b00001111;
  2161   00090A  5081               	movf	129,w,c	;volatile
  2162   00090C  0B0F               	andlw	15
  2163   00090E  6E81               	movwf	129,c	;volatile
  2164                           
  2165                           ;main.c: 428:     T0CON = 0b00000100;
  2166   000910  0E04               	movlw	4
  2167   000912  6ED5               	movwf	213,c	;volatile
  2168                           
  2169                           ;main.c: 429:     INTCONbits.TMR0IF = 0;
  2170   000914  94F2               	bcf	242,2,c	;volatile
  2171                           
  2172                           ;main.c: 430:     TMR0H = 0x0B;
  2173   000916  0E0B               	movlw	11
  2174   000918  6ED7               	movwf	215,c	;volatile
  2175                           
  2176                           ;main.c: 431:     TMR0L = 0xDD;
  2177   00091A  0EDD               	movlw	221
  2178   00091C  6ED6               	movwf	214,c	;volatile
  2179                           
  2180                           ;main.c: 432:     INTCONbits.TMR0IE = 1;
  2181   00091E  8AF2               	bsf	242,5,c	;volatile
  2182                           
  2183                           ;main.c: 433:     T0CONbits.TMR0ON = 1;
  2184   000920  8ED5               	bsf	213,7,c	;volatile
  2185   000922  0012               	return		;funcret
  2186   000924                     __end_of_keypad_init:
  2187                           	callstack 0
  2188                           
  2189 ;; *************** function _ISR *****************
  2190 ;; Defined at:
  2191 ;;		line 107 in file "main.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  is_key_press    1   16[COMRAM] unsigned char 
  2196 ;;  current_row     1   15[COMRAM] unsigned char 
  2197 ;; Return value:  Size  Location     Type
  2198 ;;                  1    wreg      void 
  2199 ;; Registers used:
  2200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2201 ;; Tracked objects:
  2202 ;;		On entry : 0/0
  2203 ;;		On exit  : 0/0
  2204 ;;		Unchanged: 0/0
  2205 ;; Data sizes:     COMRAM   BANK0   BANK1
  2206 ;;      Params:         0       0       0
  2207 ;;      Locals:         2       0       0
  2208 ;;      Temps:          9       0       0
  2209 ;;      Totals:        11       0       0
  2210 ;;Total ram usage:       11 bytes
  2211 ;; Hardware stack levels used: 1
  2212 ;; Hardware stack levels required when called: 1
  2213 ;; This function calls:
  2214 ;;		_keypress
  2215 ;; This function is called by:
  2216 ;;		Interrupt level 2
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	intcode
  2221   000008                     __pintcode:
  2222                           	callstack 0
  2223   000008                     _ISR:
  2224                           	callstack 24
  2225                           
  2226                           ;incstack = 0
  2227   000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2228   00000A  CFD9 F008          	movff	fsr2l,??_ISR+1
  2229   00000E  CFDA F009          	movff	fsr2h,??_ISR+2
  2230   000012  CFF3 F00A          	movff	prodl,??_ISR+3
  2231   000016  CFF4 F00B          	movff	prodh,??_ISR+4
  2232   00001A  CFF6 F00C          	movff	tblptrl,??_ISR+5
  2233   00001E  CFF7 F00D          	movff	tblptrh,??_ISR+6
  2234   000022  CFF8 F00E          	movff	tblptru,??_ISR+7
  2235   000026  CFF5 F00F          	movff	tablat,??_ISR+8
  2236                           
  2237                           ;main.c: 109:     if(INTCONbits.TMR0IF == 1)
  2238   00002A  A4F2               	btfss	242,2,c	;volatile
  2239   00002C  D043               	goto	i2l144
  2240                           
  2241                           ;main.c: 110:     {;main.c: 112:         INTCONbits.TMR0IF = 0;
  2242   00002E  94F2               	bcf	242,2,c	;volatile
  2243                           
  2244                           ;main.c: 113:         TMR0H = 0x0B;
  2245   000030  0E0B               	movlw	11
  2246   000032  6ED7               	movwf	215,c	;volatile
  2247                           
  2248                           ;main.c: 114:         TMR0L = 0xDD;
  2249   000034  0EDD               	movlw	221
  2250   000036  6ED6               	movwf	214,c	;volatile
  2251                           
  2252                           ;main.c: 115:         char is_key_pressed = 0;
  2253   000038  0E00               	movlw	0
  2254   00003A  6E11               	movwf	ISR@is_key_pressed^0,c
  2255                           
  2256                           ;main.c: 116:         char current_row = 0;
  2257   00003C  0E00               	movlw	0
  2258   00003E  6E10               	movwf	ISR@current_row^0,c
  2259                           
  2260                           ;main.c: 119:         while(!is_key_pressed && current_row < 4)
  2261   000040  D005               	goto	i2l1234
  2262   000042                     i2l1230:
  2263                           
  2264                           ;main.c: 120:         {;main.c: 121:             is_key_pressed = keypress(current_row);
  2265   000042  5010               	movf	ISR@current_row^0,w,c
  2266   000044  ECC9  F001         	call	_keypress
  2267   000048  6E11               	movwf	ISR@is_key_pressed^0,c
  2268                           
  2269                           ;main.c: 122:             current_row++;
  2270   00004A  2A10               	incf	ISR@current_row^0,f,c
  2271   00004C                     i2l1234:
  2272                           
  2273                           ;main.c: 119:         while(!is_key_pressed && current_row < 4)
  2274   00004C  5011               	movf	ISR@is_key_pressed^0,w,c
  2275   00004E  A4D8               	btfss	status,2,c
  2276   000050  D003               	goto	i2u45_40
  2277   000052  0E03               	movlw	3
  2278   000054  6410               	cpfsgt	ISR@current_row^0,c
  2279   000056  D7F5               	goto	i2l1230
  2280   000058                     i2u45_40:
  2281                           
  2282                           ;main.c: 124:         if(is_key_pressed && message_length < 10 || (is_key_pressed && cur
      +                          rent_row == 4 && (is_key_pressed == 1 || is_key_pressed == 3 || is_key_pressed == 4)))
  2283   000058  5011               	movf	ISR@is_key_pressed^0,w,c
  2284   00005A  B4D8               	btfsc	status,2,c
  2285   00005C  D003               	goto	i2u47_40
  2286   00005E  0E09               	movlw	9
  2287   000060  643B               	cpfsgt	_message_length^0,c
  2288   000062  D012               	goto	i2u52_40
  2289   000064                     i2u47_40:
  2290   000064  5011               	movf	ISR@is_key_pressed^0,w,c
  2291   000066  B4D8               	btfsc	status,2,c
  2292   000068  D025               	goto	i2l144
  2293   00006A  0E04               	movlw	4
  2294   00006C  1810               	xorwf	ISR@current_row^0,w,c
  2295   00006E  A4D8               	btfss	status,2,c
  2296   000070  D021               	goto	i2l144
  2297   000072  0411               	decf	ISR@is_key_pressed^0,w,c
  2298   000074  B4D8               	btfsc	status,2,c
  2299   000076  D008               	goto	i2u52_40
  2300   000078  0E03               	movlw	3
  2301   00007A  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2302   00007C  B4D8               	btfsc	status,2,c
  2303   00007E  D004               	goto	i2u52_40
  2304   000080  0E04               	movlw	4
  2305   000082  1811               	xorwf	ISR@is_key_pressed^0,w,c
  2306   000084  A4D8               	btfss	status,2,c
  2307   000086  D016               	goto	i2l144
  2308   000088                     i2u52_40:
  2309                           
  2310                           ;main.c: 125:         {;main.c: 126:             keys[message_length] = keypad_array[--c
      +                          urrent_row][--is_key_pressed];
  2311   000088  0611               	decf	ISR@is_key_pressed^0,f,c
  2312   00008A  0610               	decf	ISR@current_row^0,f,c
  2313   00008C  5010               	movf	ISR@current_row^0,w,c
  2314   00008E  0D04               	mullw	4
  2315   000090  50F3               	movf	243,w,c
  2316   000092  0F01               	addlw	low _keypad_array
  2317   000094  2411               	addwf	ISR@is_key_pressed^0,w,c
  2318   000096  6E07               	movwf	??_ISR^0,c
  2319   000098  C007  FFF6         	movff	??_ISR,tblptrl
  2320   00009C                     	if	1	;There is more than 1 active tblptr byte
  2321   00009C  0E02               	movlw	high __smallconst
  2322   00009E  6EF7               	movwf	tblptrh,c
  2323   0000A0                     	endif
  2324   0000A0                     	if	0	;tblptru may be non-zero
  2325   0000A0                     	endif
  2326   0000A0                     	if	0	;tblptru may be non-zero
  2327   0000A0                     	endif
  2328   0000A0  503B               	movf	_message_length^0,w,c
  2329   0000A2  0F3C               	addlw	low _keys
  2330   0000A4  6ED9               	movwf	fsr2l,c
  2331   0000A6  6ADA               	clrf	fsr2h,c
  2332   0000A8  0008               	tblrd		*
  2333   0000AA  CFF5 FFDF          	movff	tablat,indf2
  2334                           
  2335                           ;main.c: 127:             key_pressed = 1;
  2336   0000AE  0E01               	movlw	1
  2337   0000B0  6E3A               	movwf	_key_pressed^0,c
  2338                           
  2339                           ;main.c: 128:             message_length++;
  2340   0000B2  2A3B               	incf	_message_length^0,f,c
  2341   0000B4                     i2l144:
  2342   0000B4  C00F  FFF5         	movff	??_ISR+8,tablat
  2343   0000B8  C00E  FFF8         	movff	??_ISR+7,tblptru
  2344   0000BC  C00D  FFF7         	movff	??_ISR+6,tblptrh
  2345   0000C0  C00C  FFF6         	movff	??_ISR+5,tblptrl
  2346   0000C4  C00B  FFF4         	movff	??_ISR+4,prodh
  2347   0000C8  C00A  FFF3         	movff	??_ISR+3,prodl
  2348   0000CC  C009  FFDA         	movff	??_ISR+2,fsr2h
  2349   0000D0  C008  FFD9         	movff	??_ISR+1,fsr2l
  2350   0000D4  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2351   0000D6  0011               	retfie		f
  2352   0000D8                     __end_of_ISR:
  2353                           	callstack 0
  2354                           
  2355 ;; *************** function _keypress *****************
  2356 ;; Defined at:
  2357 ;;		line 346 in file "main.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;  current_row     1    wreg     unsigned char 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  current_row     1    3[COMRAM] unsigned char 
  2362 ;;  col_num         1    5[COMRAM] unsigned char 
  2363 ;;  col_key_pres    1    4[COMRAM] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      unsigned char 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1
  2373 ;;      Params:         0       0       0
  2374 ;;      Locals:         3       0       0
  2375 ;;      Temps:          3       0       0
  2376 ;;      Totals:         6       0       0
  2377 ;;Total ram usage:        6 bytes
  2378 ;; Hardware stack levels used: 1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_ISR
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text19
  2387   000392                     __ptext19:
  2388                           	callstack 0
  2389   000392                     _keypress:
  2390                           	callstack 24
  2391                           
  2392                           ;incstack = 0
  2393                           ;keypress@current_row stored from wreg
  2394   000392  6E04               	movwf	keypress@current_row^0,c
  2395                           
  2396                           ;main.c: 346: char keypress(char current_row);main.c: 347: {;main.c: 349:     LATA = (un
      +                          signed char)(1 << current_row) | LATA;
  2397   000394  C004  F001         	movff	keypress@current_row,??_keypress
  2398   000398  0E01               	movlw	1
  2399   00039A  6E02               	movwf	(??_keypress+1)^0,c
  2400   00039C  2A01               	incf	??_keypress^0,f,c
  2401   00039E  D002               	goto	i2u19_44
  2402   0003A0                     i2u19_45:
  2403   0003A0  90D8               	bcf	status,0,c
  2404   0003A2  3602               	rlcf	(??_keypress+1)^0,f,c
  2405   0003A4                     i2u19_44:
  2406   0003A4  2E01               	decfsz	??_keypress^0,f,c
  2407   0003A6  D7FC               	goto	i2u19_45
  2408   0003A8  5002               	movf	(??_keypress+1)^0,w,c
  2409   0003AA  1089               	iorwf	137,w,c	;volatile
  2410   0003AC  6E89               	movwf	137,c	;volatile
  2411                           
  2412                           ;main.c: 350:     char col_key_press = 0;
  2413   0003AE  0E00               	movlw	0
  2414   0003B0  6E05               	movwf	keypress@col_key_press^0,c
  2415                           
  2416                           ;main.c: 351:     char col_num = 0;
  2417   0003B2  0E00               	movlw	0
  2418   0003B4  6E06               	movwf	keypress@col_num^0,c
  2419                           
  2420                           ;main.c: 353:     while(col_num < 4 && !col_key_press)
  2421   0003B6  D046               	goto	i2l1142
  2422   0003B8                     i2l1122:
  2423                           
  2424                           ;main.c: 354:     {;main.c: 355:         if((128 >> col_num) & PORTB)
  2425   0003B8  C006  F001         	movff	keypress@col_num,??_keypress
  2426   0003BC  0E80               	movlw	128
  2427   0003BE  6E02               	movwf	(??_keypress+1)^0,c
  2428   0003C0  0E00               	movlw	0
  2429   0003C2  6E03               	movwf	(??_keypress+2)^0,c
  2430   0003C4  2A01               	incf	??_keypress^0,f,c
  2431   0003C6  D003               	goto	i2u20_44
  2432   0003C8                     i2u20_45:
  2433   0003C8  3403               	rlcf	(??_keypress+2)^0,w,c
  2434   0003CA  3203               	rrcf	(??_keypress+2)^0,f,c
  2435   0003CC  3202               	rrcf	(??_keypress+1)^0,f,c
  2436   0003CE                     i2u20_44:
  2437   0003CE  2E01               	decfsz	??_keypress^0,f,c
  2438   0003D0  D7FB               	goto	i2u20_45
  2439   0003D2  5002               	movf	(??_keypress+1)^0,w,c
  2440   0003D4  1481               	andwf	129,w,c	;volatile
  2441   0003D6  0900               	iorlw	0
  2442   0003D8  B4D8               	btfsc	status,2,c
  2443   0003DA  D033               	goto	i2l1140
  2444                           
  2445                           ;main.c: 356:         {;main.c: 357:             T3CON = 0b10010000;
  2446   0003DC  0E90               	movlw	144
  2447   0003DE  6EB1               	movwf	177,c	;volatile
  2448                           
  2449                           ;main.c: 358:             PIE2bits.TMR3IE = 0;
  2450   0003E0  92A0               	bcf	160,1,c	;volatile
  2451                           
  2452                           ;main.c: 359:             TMR3H = 0x63;
  2453   0003E2  0E63               	movlw	99
  2454   0003E4  6EB3               	movwf	179,c	;volatile
  2455                           
  2456                           ;main.c: 360:             TMR3L = 0xC1;
  2457   0003E6  0EC1               	movlw	193
  2458   0003E8  6EB2               	movwf	178,c	;volatile
  2459                           
  2460                           ;main.c: 361:             PIR2bits.TMR3IF = 0;
  2461   0003EA  92A1               	bcf	161,1,c	;volatile
  2462                           
  2463                           ;main.c: 363:             T3CONbits.TMR3ON = 1;
  2464   0003EC  80B1               	bsf	177,0,c	;volatile
  2465   0003EE                     i2l228:
  2466   0003EE  A2A1               	btfss	161,1,c	;volatile
  2467   0003F0  D7FE               	goto	i2l228
  2468                           
  2469                           ;main.c: 366:             T3CONbits.TMR3ON = 0;
  2470   0003F2  90B1               	bcf	177,0,c	;volatile
  2471                           
  2472                           ;main.c: 367:             PIR2bits.TMR3IF = 0;
  2473   0003F4  92A1               	bcf	161,1,c	;volatile
  2474                           
  2475                           ;main.c: 369:             if((128 >> col_num) & PORTB)
  2476   0003F6  C006  F001         	movff	keypress@col_num,??_keypress
  2477   0003FA  0E80               	movlw	128
  2478   0003FC  6E02               	movwf	(??_keypress+1)^0,c
  2479   0003FE  0E00               	movlw	0
  2480   000400  6E03               	movwf	(??_keypress+2)^0,c
  2481   000402  2A01               	incf	??_keypress^0,f,c
  2482   000404  D003               	goto	i2u23_44
  2483   000406                     i2u23_45:
  2484   000406  3403               	rlcf	(??_keypress+2)^0,w,c
  2485   000408  3203               	rrcf	(??_keypress+2)^0,f,c
  2486   00040A  3202               	rrcf	(??_keypress+1)^0,f,c
  2487   00040C                     i2u23_44:
  2488   00040C  2E01               	decfsz	??_keypress^0,f,c
  2489   00040E  D7FB               	goto	i2u23_45
  2490   000410  5002               	movf	(??_keypress+1)^0,w,c
  2491   000412  1481               	andwf	129,w,c	;volatile
  2492   000414  0900               	iorlw	0
  2493   000416  B4D8               	btfsc	status,2,c
  2494   000418  D014               	goto	i2l1140
  2495   00041A                     i2u24_40:
  2496   00041A  C006  F001         	movff	keypress@col_num,??_keypress
  2497   00041E  0E80               	movlw	128
  2498   000420  6E02               	movwf	(??_keypress+1)^0,c
  2499   000422  0E00               	movlw	0
  2500   000424  6E03               	movwf	(??_keypress+2)^0,c
  2501   000426  2A01               	incf	??_keypress^0,f,c
  2502   000428  D003               	goto	i2u25_44
  2503   00042A                     i2u25_45:
  2504   00042A  3403               	rlcf	(??_keypress+2)^0,w,c
  2505   00042C  3203               	rrcf	(??_keypress+2)^0,f,c
  2506   00042E  3202               	rrcf	(??_keypress+1)^0,f,c
  2507   000430                     i2u25_44:
  2508   000430  2E01               	decfsz	??_keypress^0,f,c
  2509   000432  D7FB               	goto	i2u25_45
  2510   000434  5002               	movf	(??_keypress+1)^0,w,c
  2511   000436  1481               	andwf	129,w,c	;volatile
  2512   000438  0900               	iorlw	0
  2513   00043A  A4D8               	btfss	status,2,c
  2514   00043C  D7EE               	goto	i2u24_40
  2515                           
  2516                           ;main.c: 372:                 col_key_press = col_num + 1;
  2517   00043E  2806               	incf	keypress@col_num^0,w,c
  2518   000440  6E05               	movwf	keypress@col_key_press^0,c
  2519   000442                     i2l1140:
  2520                           
  2521                           ;main.c: 375:         col_num++;
  2522   000442  2A06               	incf	keypress@col_num^0,f,c
  2523   000444                     i2l1142:
  2524                           
  2525                           ;main.c: 353:     while(col_num < 4 && !col_key_press)
  2526   000444  0E04               	movlw	4
  2527   000446  6006               	cpfslt	keypress@col_num^0,c
  2528   000448  D003               	goto	i2u28_40
  2529   00044A  5005               	movf	keypress@col_key_press^0,w,c
  2530   00044C  B4D8               	btfsc	status,2,c
  2531   00044E  D7B4               	goto	i2l1122
  2532   000450                     i2u28_40:
  2533                           
  2534                           ;main.c: 379:     LATA = (unsigned char)(1 << current_row) ^ LATA;
  2535   000450  C004  F001         	movff	keypress@current_row,??_keypress
  2536   000454  0E01               	movlw	1
  2537   000456  6E02               	movwf	(??_keypress+1)^0,c
  2538   000458  2A01               	incf	??_keypress^0,f,c
  2539   00045A  D002               	goto	i2u29_44
  2540   00045C                     i2u29_45:
  2541   00045C  90D8               	bcf	status,0,c
  2542   00045E  3602               	rlcf	(??_keypress+1)^0,f,c
  2543   000460                     i2u29_44:
  2544   000460  2E01               	decfsz	??_keypress^0,f,c
  2545   000462  D7FC               	goto	i2u29_45
  2546   000464  5002               	movf	(??_keypress+1)^0,w,c
  2547   000466  1889               	xorwf	137,w,c	;volatile
  2548   000468  6E89               	movwf	137,c	;volatile
  2549                           
  2550                           ;main.c: 380:     return col_key_press;
  2551   00046A  5005               	movf	keypress@col_key_press^0,w,c
  2552   00046C  0012               	return		;funcret
  2553   00046E                     __end_of_keypress:
  2554                           	callstack 0
  2555                           
  2556                           	psect	rparam
  2557   000000                     
  2558                           	psect	temp
  2559   000047                     btemp:
  2560                           	callstack 0
  2561   000047                     	ds	1
  2562   000000                     int$flags	set	btemp
  2563   000000                     wtemp8	set	btemp+1
  2564   000000                     ttemp5	set	btemp+1
  2565   000000                     ttemp6	set	btemp+4
  2566   000000                     ttemp7	set	btemp+8
  2567                           
  2568                           	psect	config
  2569                           
  2570                           ; Padding undefined space
  2571   300000                     	org	3145728
  2572   300000  FF                 	db	255
  2573                           
  2574                           ;Config register CONFIG1H @ 0x300001
  2575                           ;	Oscillator
  2576                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2577                           ;	Fail-Safe Clock Monitor Enable bit
  2578                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2579                           ;	Internal/External Oscillator Switchover bit
  2580                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2581   300001                     	org	3145729
  2582   300001  08                 	db	8
  2583                           
  2584                           ;Config register CONFIG2L @ 0x300002
  2585                           ;	Power-up Timer Enable bit
  2586                           ;	PWRT = OFF, PWRT disabled
  2587                           ;	Brown-out Reset Enable bits
  2588                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2589                           ;	Brown-out Reset Voltage bits
  2590                           ;	BORV = 3, Minimum Setting
  2591   300002                     	org	3145730
  2592   300002  1F                 	db	31
  2593                           
  2594                           ;Config register CONFIG2H @ 0x300003
  2595                           ;	Watchdog Timer Enable bit
  2596                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2597                           ;	Watchdog Timer Postscale Select bits
  2598                           ;	WDTPS = 32768, 1:32768
  2599   300003                     	org	3145731
  2600   300003  1E                 	db	30
  2601                           
  2602                           ; Padding undefined space
  2603   300004                     	org	3145732
  2604   300004  FF                 	db	255
  2605                           
  2606                           ;Config register CONFIG3H @ 0x300005
  2607                           ;	CCP2 MUX bit
  2608                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2609                           ;	PORTB A/D Enable bit
  2610                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2611                           ;	Low-Power Timer1 Oscillator Enable bit
  2612                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2613                           ;	MCLR Pin Enable bit
  2614                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2615   300005                     	org	3145733
  2616   300005  83                 	db	131
  2617                           
  2618                           ;Config register CONFIG4L @ 0x300006
  2619                           ;	Stack Full/Underflow Reset Enable bit
  2620                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2621                           ;	Single-Supply ICSP Enable bit
  2622                           ;	LVP = OFF, Single-Supply ICSP disabled
  2623                           ;	Boot Block Size Select bits
  2624                           ;	BBSIZ = BB256, 256 Word
  2625                           ;	Extended Instruction Set Enable bit
  2626                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2627                           ;	Background Debugger Enable bit
  2628                           ;	DEBUG = 0x1, unprogrammed default
  2629   300006                     	org	3145734
  2630   300006  81                 	db	129
  2631                           
  2632                           ; Padding undefined space
  2633   300007                     	org	3145735
  2634   300007  FF                 	db	255
  2635                           
  2636                           ;Config register CONFIG5L @ 0x300008
  2637                           ;	Code Protection bit
  2638                           ;	CP0 = OFF, Block 0 not code-protected
  2639                           ;	Code Protection bit
  2640                           ;	CP1 = OFF, Block 1 not code-protected
  2641   300008                     	org	3145736
  2642   300008  03                 	db	3
  2643                           
  2644                           ;Config register CONFIG5H @ 0x300009
  2645                           ;	Boot Block Code Protection bitProtect Boot
  2646                           ;	CPB = OFF, Boot block not code-protected
  2647                           ;	Data EEPROM Code Protection bit
  2648                           ;	CPD = OFF, Data EEPROM not code-protected
  2649   300009                     	org	3145737
  2650   300009  C0                 	db	192
  2651                           
  2652                           ;Config register CONFIG6L @ 0x30000A
  2653                           ;	Write Protection bit
  2654                           ;	WRT0 = OFF, Block 0 not write-protected
  2655                           ;	Write Protection bit
  2656                           ;	WRT1 = OFF, Block 1 not write-protected
  2657   30000A                     	org	3145738
  2658   30000A  03                 	db	3
  2659                           
  2660                           ;Config register CONFIG6H @ 0x30000B
  2661                           ;	Configuration Register Write Protection bit
  2662                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2663                           ;	Boot Block Write Protection bit
  2664                           ;	WRTB = OFF, Boot block not write-protected
  2665                           ;	Data EEPROM Write Protection bit
  2666                           ;	WRTD = OFF, Data EEPROM not write-protected
  2667   30000B                     	org	3145739
  2668   30000B  E0                 	db	224
  2669                           
  2670                           ;Config register CONFIG7L @ 0x30000C
  2671                           ;	Table Read Protection bit
  2672                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2673                           ;	Table Read Protection bit
  2674                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2675   30000C                     	org	3145740
  2676   30000C  03                 	db	3
  2677                           
  2678                           ;Config register CONFIG7H @ 0x30000D
  2679                           ;	Boot Block Table Read Protection bit
  2680                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2681   30000D                     	org	3145741
  2682   30000D  40                 	db	64
  2683                           tosu	equ	0xFFF
  2684                           tosh	equ	0xFFE
  2685                           tosl	equ	0xFFD
  2686                           stkptr	equ	0xFFC
  2687                           pclatu	equ	0xFFB
  2688                           pclath	equ	0xFFA
  2689                           pcl	equ	0xFF9
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           indf0	equ	0xFEF
  2697                           postinc0	equ	0xFEE
  2698                           postdec0	equ	0xFED
  2699                           preinc0	equ	0xFEC
  2700                           plusw0	equ	0xFEB
  2701                           fsr0h	equ	0xFEA
  2702                           fsr0l	equ	0xFE9
  2703                           wreg	equ	0xFE8
  2704                           indf1	equ	0xFE7
  2705                           postinc1	equ	0xFE6
  2706                           postdec1	equ	0xFE5
  2707                           preinc1	equ	0xFE4
  2708                           plusw1	equ	0xFE3
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           bsr	equ	0xFE0
  2712                           indf2	equ	0xFDF
  2713                           postinc2	equ	0xFDE
  2714                           postdec2	equ	0xFDD
  2715                           preinc2	equ	0xFDC
  2716                           plusw2	equ	0xFDB
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8

Data Sizes:
    Strings     26
    Constant    16
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     57      70
    BANK0           128      0       0
    BANK1           256      0       0

Pointer List with Targets:

    lcd_message@message	PTR unsigned char  size(2) Largest target is 11
		 -> keys(COMRAM[11]), STR_1(CODE[8]), STR_2(CODE[7]), STR_3(CODE[9]), 
		 -> STR_4(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_lcd_move_cursor
    _send_message->_packet_pre_post_amble
    _packet_pre_post_amble->_send
    _send->_delay
    _lcd_init->_lcd_move_cursor
    _lcd_move_cursor->_lcd_command
    _lcd_clear->_delay
    _lcd_backspace->_lcd_command
    _lcd_message->_lcd_char
    _lcd_char->_delay
    _lcd_command->_delay
    _delay->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_keypress

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   21695
                                             50 COMRAM     7     7      0
                        _keypad_init
                      _lcd_backspace
                          _lcd_clear
                           _lcd_init
                        _lcd_message
                    _lcd_move_cursor
                       _send_message
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_message                                         5     5      0    2321
                                             44 COMRAM     5     5      0
              _packet_pre_post_amble
                               _send
 ---------------------------------------------------------------------------------
 (2) _packet_pre_post_amble                                2     2      0    1137
                                             42 COMRAM     2     2      0
                               _send
 ---------------------------------------------------------------------------------
 (2) _send                                                 1     1      0    1091
                                             41 COMRAM     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    8835
                          _lcd_clear
                        _lcd_command
                        _lcd_message
                    _lcd_move_cursor
 ---------------------------------------------------------------------------------
 (1) _lcd_move_cursor                                      2     1      1    3209
                                             48 COMRAM     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0    1099
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _lcd_backspace                                        0     0      0    4527
                        _lcd_command
                        _lcd_message
 ---------------------------------------------------------------------------------
 (1) _lcd_message                                          2     0      2    1612
                                             43 COMRAM     2     0      2
                 _i2c_start_and_addr
                           _i2c_stop
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0    1172
                                             41 COMRAM     2     2      0
                              _delay
                        _i2c_data_tx
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          7     4      3    2915
                                             41 COMRAM     7     4      3
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c_start_and_addr                                   1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_data_tx                                          1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                               12     8      4    1069
                                             29 COMRAM    12     8      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 11    11      0     300
                                              6 COMRAM    11    11      0
                           _keypress
 ---------------------------------------------------------------------------------
 (7) _keypress                                             6     6      0     135
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_init
   _lcd_backspace
     _lcd_command
       _delay
         ___lmul
       _i2c_data_tx
       _i2c_start_and_addr
       _i2c_stop
     _lcd_message
       _i2c_start_and_addr
       _i2c_stop
       _lcd_char
         _delay
         _i2c_data_tx
   _lcd_clear
     _delay
     _i2c_data_tx
     _i2c_start_and_addr
     _i2c_stop
   _lcd_init
     _lcd_clear
     _lcd_command
     _lcd_message
     _lcd_move_cursor
       _lcd_command
   _lcd_message
   _lcd_move_cursor
   _send_message
     _packet_pre_post_amble
       _send
         _delay
     _send
   _system_init

 _ISR (ROOT)
   _keypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     39      46       1       55.6%
BITBIGSFRlh         19      0       0       9        0.0%
BITBIGSFRlllhll      F      0       0      15        0.0%
BITBIGSFRlllhll      D      0       0      14        0.0%
BITBIGSFRh           D      0       0       8        0.0%
BITBIGSFRlllllh      7      0       0      20        0.0%
BITBIGSFRllllhl      6      0       0      18        0.0%
BITBIGSFRllllhl      6      0       0      19        0.0%
BITBIGSFRlllhll      3      0       0      13        0.0%
BITBIGSFRlllhh       3      0       0      12        0.0%
BITBIGSFRllhhl       2      0       0      11        0.0%
BITBIGSFRllllhh      1      0       0      17        0.0%
BITBIGSFRllhhh       1      0       0      10        0.0%
BITBIGSFRlllhll      1      0       0      16        0.0%
BITBIGSFRllllll      1      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      46      22        0.0%
DATA                 0      0      46       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Feb 23 10:51:20 2024

                  _SSPSTATbits 0FC7            __end_of_system_init 088A                            l200 0984  
                          l120 038E                            l201 0988                            l116 0312  
                          l214 096C                            l208 0996                            l153 0530  
                          l218 0976                            l149 04DC                            l956 0972  
                          u620 094C                            _ISR 0008                            u580 0742  
                          u590 076A                            u587 0738                            u597 0760  
                          wreg 0FE8                 lcd_char@letter 002B                           ?_ISR 0001  
                         l1324 0722                           l1404 0238                           l1262 0786  
                         l1350 08DE                           l1328 074A                           l1440 02E2  
                         l1432 02BE                           l1416 0282                           l1266 079A  
                         l1276 04B2                           l1284 04E4                           l1444 02F0  
                         l1358 092C                           l1382 0662                           l1462 035E  
                         l1394 06A6                           l1466 036C                           STR_1 021A  
                         STR_2 0222                           STR_3 0211                           STR_4 0229  
                         _LATA 0F89                           _LATB 0F8A                  ??_i2c_data_tx 0012  
                         _main 022C                           _keys 003C                           _send 081C  
                         fsr0h 0FEA                ??_lcd_backspace 0031                           indf0 0FEF  
                         fsr2h 0FDA                           fsr0l 0FE9                           indf2 0FDF  
                         fsr2l 0FD9                           btemp 0047                           prodh 0FF4  
                         prodl 0FF3                           start 00D8      i2c_start_and_addr@address 0012  
             ?_lcd_move_cursor 0031                   ___param_bank 0000                          ??_ISR 0007  
                lcd_command@lt 002A                  lcd_command@rs 002C                  lcd_command@rw 002B  
                        ?_main 0001                          ?_send 0001                          _T0CON 0FD5  
                        _T1CON 0FCD                          _T3CON 0FB1                          i2l144 00B4  
                        i2l228 03EE                          _TMR0H 0FD7                          _TMR1H 0FCF  
                        _TMR0L 0FD6                          _TMR1L 0FCE                          _TMR3H 0FB3  
                        _TMR3L 0FB2                          _PORTB 0F81                          _TRISA 0F92  
                        _TRISB 0F93            ___lmul@multiplicand 0016                          _delay 046E  
                 ?_keypad_init 0001                i2c_data_tx@data 0012                          main@i 0036  
                        tablat 0FF5                          ttemp5 0048                          ttemp6 004B  
                        ttemp7 004F                          status 0FD8                          wtemp8 0048  
          __end_of_i2c_data_tx 0994                __initialization 094E                    _system_init 0854  
                 __end_of_main 0392                   __end_of_send 0854               __end_of_i2c_stop 099E  
        _packet_pre_post_amble 0924                         ??_main 0033                         ??_send 002A  
                __activetblptr 0002             _i2c_start_and_addr 0968                         ?_delay 001E  
          ?_i2c_start_and_addr 0001                         i2l1122 03B8                         i2l1140 0442  
                       i2l1142 0444                         i2l1230 0042                         i2l1234 004C  
                       _SSPADD 0FC8                         _SSPBUF 0FC9               __end_of_lcd_char 081C  
             __end_of_lcd_init 064C                         ___lmul 0776           ??_i2c_start_and_addr 0012  
                       clear_0 0954                         isa$std 0001               __end_of_keypress 046E  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8        lcd_move_cursor@position 0031                     __accesstop 0080  
      __end_of__initialization 095A                    _i2c_data_tx 0982                  ___rparam_used 0001  
               __pcstackCOMRAM 0001                  __end_of_delay 053A         ?_packet_pre_post_amble 0001  
                      ??_delay 0022                      ?_i2c_stop 0001                lcd_command@data 0030  
                      ?___lmul 0012                 ISR@current_row 0010                 ___lmul@product 001A  
                ?_send_message 0001                        i2u20_44 03CE                        i2u20_45 03C8  
                      i2u23_44 040C                        i2u23_45 0406                        i2u24_40 041A  
                      i2u25_44 0430                        i2u25_45 042A                        i2u19_44 03A4  
                      i2u19_45 03A0                        i2u28_40 0450                        i2u52_40 0088  
                      i2u45_40 0058                        i2u29_44 0460                        i2u29_45 045C  
                      i2u47_40 0064                      ?_lcd_char 0001                      ?_lcd_init 0001  
                   ??_i2c_stop 0012            lcd_move_cursor@line 0032                      ?_keypress 0001  
        __end_of_lcd_backspace 08C0                        __Hparam 0000           send_message@send_cnt 002E  
                      __Lparam 0000              __end_of_lcd_clear 071A                   ?_system_init 0001  
                 __psmallconst 0200                 ??_send_message 002D                        __pcinit 094E  
                      __ramtop 0200                        __ptext0 022C                        __ptext1 0854  
                      __ptext2 064C                        __ptext3 0924                        __ptext4 081C  
                      __ptext5 05D8                        __ptext6 08C0                        __ptext7 06BA  
                      __ptext8 088A                        __ptext9 071A                      _T0CONbits 0FD5  
                    _T1CONbits 0FCD                      _T3CONbits 0FB1                     ??_lcd_char 002A  
                   ??_lcd_init 0033           end_of_initialization 095A           __end_of_keypad_array 0211  
                __Lmediumconst 0000                     ??_keypress 0001                        postinc0 0FEE  
                      postinc2 0FDE                      _TRISCbits 0F94             lcd_message@message 002C  
                 ?_i2c_data_tx 0001                  ??_lcd_command 002D                  ??_lcd_message 002E  
      ??_packet_pre_post_amble 002B                  send_message@i 0030                 __end_of___lmul 07CC  
             delay@timer_value 0022            start_initialization 094E                    __end_of_ISR 00D8  
            ??_lcd_move_cursor 0032           __end_of_send_message 06BA                       ??___lmul 001A  
          __end_of_lcd_command 05D8            __end_of_lcd_message 0776                    __pbssCOMRAM 003A  
                ??_keypad_init 0012                keypress@col_num 0006                      __pintcode 0008  
            ISR@is_key_pressed 0011                   _keypad_array 0201                      _lcd_clear 06BA  
                  __smallconst 0200                       _LATCbits 0F8B            __end_of_keypad_init 0924  
                     _PIE1bits 0F9D                       _PIE2bits 0FA0                    _lcd_command 053A  
                     _PIR1bits 0F9E                       _PIR2bits 0FA1                    _lcd_message 071A  
        keypress@col_key_press 0005                       _RCONbits 0FD0                     ?_lcd_clear 0001  
                   _ADCON1bits 0FC1                      main@i_893 0038              ___lmul@multiplier 0012  
                  _INTCON2bits 0FF1                       _i2c_stop 0994                       __Hrparam 0000  
          keypress@current_row 0004                       __Lrparam 0000  __end_of_packet_pre_post_amble 094E  
              _lcd_move_cursor 08C0                   _send_message 064C                    _key_pressed 003A  
                     __ptext10 07CC                       __ptext11 053A                       __ptext12 0994  
                     __ptext13 0968                       __ptext14 0982                       __ptext15 046E  
                     __ptext16 0776                       __ptext17 08F4                       __ptext19 0392  
                     _lcd_char 07CC                    _keypad_init 08F4                       _lcd_init 05D8  
               _message_length 003B                       _keypress 0392                  _lcd_backspace 088A  
   __end_of_i2c_start_and_addr 0982                       isa$xinst 0000                       int$flags 0047  
            delay@milliseconds 001E         packet_pre_post_amble@i 002B                    ??_lcd_clear 002A  
                  _OSCTUNEbits 0F9B                     _INTCONbits 0FF2                       intlevel2 0000  
                     send@data 002A                 ?_lcd_backspace 0001                     _OSCCONbits 0FD3  
      __end_of_lcd_move_cursor 08F4                  ??_system_init 0012                    _SSPCON1bits 0FC6  
                  _SSPCON2bits 0FC5                   ?_lcd_command 002A                   ?_lcd_message 002C  
