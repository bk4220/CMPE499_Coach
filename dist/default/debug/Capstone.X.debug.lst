

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 12 22:02:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og9 
     1                           	processor	18F2221
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30   000000                     
    31                           ; Generated 17/10/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F2221 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65   000000                     
    66                           	psect	smallconst
    67   000200                     __psmallconst:
    68                           	callstack 0
    69   000200  00                 	db	0
    70   000201                     _keypad_array:
    71                           	callstack 0
    72   000201  31                 	db	49
    73   000202  32                 	db	50
    74   000203  33                 	db	51
    75   000204  41                 	db	65
    76   000205  34                 	db	52
    77   000206  35                 	db	53
    78   000207  36                 	db	54
    79   000208  42                 	db	66
    80   000209  37                 	db	55
    81   00020A  38                 	db	56
    82   00020B  39                 	db	57
    83   00020C  43                 	db	67
    84   00020D  2A                 	db	42
    85   00020E  30                 	db	48
    86   00020F  23                 	db	35
    87   000210  44                 	db	68
    88   000211                     __end_of_keypad_array:
    89                           	callstack 0
    90   000000                     _T0CON	set	4053
    91   000000                     _TRISBbits	set	3987
    92   000000                     _SSPCON1bits	set	4038
    93   000000                     _SSPADD	set	4040
    94   000000                     _SSPSTATbits	set	4039
    95   000000                     _TMR3L	set	4018
    96   000000                     _TMR3H	set	4019
    97   000000                     _TMR1L	set	4046
    98   000000                     _TMR1H	set	4047
    99   000000                     _TMR0L	set	4054
   100   000000                     _TMR0H	set	4055
   101   000000                     _T3CONbits	set	4017
   102   000000                     _T1CONbits	set	4045
   103   000000                     _T0CONbits	set	4053
   104   000000                     _PORTB	set	3969
   105   000000                     _LATA	set	3977
   106   000000                     _TRISCbits	set	3988
   107   000000                     _PIE2bits	set	4000
   108   000000                     _T3CON	set	4017
   109   000000                     _SSPCON2bits	set	4037
   110   000000                     _SSPBUF	set	4041
   111   000000                     _PIR1bits	set	3998
   112   000000                     _PIE1bits	set	3997
   113   000000                     _T1CON	set	4045
   114   000000                     _INTCON2bits	set	4081
   115   000000                     _INTCONbits	set	4082
   116   000000                     _OSCTUNEbits	set	3995
   117   000000                     _RCONbits	set	4048
   118   000000                     _OSCCONbits	set	4051
   119   000000                     _TRISAbits	set	3986
   120   000000                     _PIR2bits	set	4001
   121   000000                     _ADCON1bits	set	4033
   122   000211                     STR_4:
   123   000211  42                 	db	66	;'B'
   124   000212  79                 	db	121	;'y'
   125   000213  20                 	db	32
   126   000214  41                 	db	65	;'A'
   127   000215  69                 	db	105	;'i'
   128   000216  64                 	db	100	;'d'
   129   000217  61                 	db	97	;'a'
   130   000218  6E                 	db	110	;'n'
   131   000219  2C                 	db	44
   132   00021A  20                 	db	32
   133   00021B  42                 	db	66	;'B'
   134   00021C  72                 	db	114	;'r'
   135   00021D  65                 	db	101	;'e'
   136   00021E  74                 	db	116	;'t'
   137   00021F  74                 	db	116	;'t'
   138   000220  2C                 	db	44
   139   000221  00                 	db	0
   140   000222                     STR_5:
   141   000222  43                 	db	67	;'C'
   142   000223  68                 	db	104	;'h'
   143   000224  72                 	db	114	;'r'
   144   000225  69                 	db	105	;'i'
   145   000226  73                 	db	115	;'s'
   146   000227  2C                 	db	44
   147   000228  20                 	db	32
   148   000229  61                 	db	97	;'a'
   149   00022A  6E                 	db	110	;'n'
   150   00022B  64                 	db	100	;'d'
   151   00022C  20                 	db	32
   152   00022D  47                 	db	71	;'G'
   153   00022E  61                 	db	97	;'a'
   154   00022F  62                 	db	98	;'b'
   155   000230  65                 	db	101	;'e'
   156   000231  00                 	db	0
   157   000232                     STR_3:
   158   000232  43                 	db	67	;'C'
   159   000233  61                 	db	97	;'a'
   160   000234  70                 	db	112	;'p'
   161   000235  73                 	db	115	;'s'
   162   000236  74                 	db	116	;'t'
   163   000237  6F                 	db	111	;'o'
   164   000238  6E                 	db	110	;'n'
   165   000239  65                 	db	101	;'e'
   166   00023A  00                 	db	0
   167   00023B                     STR_1:
   168   00023B  53                 	db	83	;'S'
   169   00023C  65                 	db	101	;'e'
   170   00023D  6E                 	db	110	;'n'
   171   00023E  64                 	db	100	;'d'
   172   00023F  69                 	db	105	;'i'
   173   000240  6E                 	db	110	;'n'
   174   000241  67                 	db	103	;'g'
   175   000242  00                 	db	0
   176   000243                     STR_2:
   177   000243  53                 	db	83	;'S'
   178   000244  65                 	db	101	;'e'
   179   000245  6E                 	db	110	;'n'
   180   000246  69                 	db	105	;'i'
   181   000247  6F                 	db	111	;'o'
   182   000248  72                 	db	114	;'r'
   183   000249  00                 	db	0
   184   00024A                     STR_6:
   185   00024A  20                 	db	32
   186   00024B  00                 	db	0
   187   00024C  00                 	db	0	; dummy byte at the end
   188   000000                     
   189                           ; #config settings
   190                           
   191                           	psect	cinit
   192   00086A                     __pcinit:
   193                           	callstack 0
   194   00086A                     start_initialization:
   195                           	callstack 0
   196   00086A                     __initialization:
   197                           	callstack 0
   198                           
   199                           ; Clear objects allocated to COMRAM (21 bytes)
   200   00086A  EE00  F034         	lfsr	0,__pbssCOMRAM
   201   00086E  0E15               	movlw	21
   202   000870                     clear_0:
   203   000870  6AEE               	clrf	postinc0,c
   204   000872  06E8               	decf	wreg,f,c
   205   000874  E1FD               	bnz	clear_0
   206   000876                     end_of_initialization:
   207                           	callstack 0
   208   000876                     __end_of__initialization:
   209                           	callstack 0
   210   000876  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   211   000878  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   212   00087A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   213   00087C  6EF8               	movwf	tblptru,c
   214   00087E  0100               	movlb	0
   215   000880  EF27  F001         	goto	_main	;jump to C main() function
   216                           
   217                           	psect	bssCOMRAM
   218   000034                     __pbssCOMRAM:
   219                           	callstack 0
   220   000034                     _sent_message:
   221                           	callstack 0
   222   000034                     	ds	10
   223   00003E                     _key_value:
   224                           	callstack 0
   225   00003E                     	ds	1
   226   00003F                     _keys:
   227                           	callstack 0
   228   00003F                     	ds	10
   229                           
   230                           	psect	cstackCOMRAM
   231   000001                     __pcstackCOMRAM:
   232                           	callstack 0
   233   000001                     ??_keypress:
   234   000001                     
   235                           ; 1 bytes @ 0x0
   236   000001                     	ds	3
   237   000004                     keypress@current_row:
   238                           	callstack 0
   239                           
   240                           ; 1 bytes @ 0x3
   241   000004                     	ds	1
   242   000005                     keypress@col_key_press:
   243                           	callstack 0
   244                           
   245                           ; 1 bytes @ 0x4
   246   000005                     	ds	1
   247   000006                     keypress@col_num:
   248                           	callstack 0
   249                           
   250                           ; 1 bytes @ 0x5
   251   000006                     	ds	1
   252   000007                     ??_ISR:
   253                           
   254                           ; 1 bytes @ 0x6
   255   000007                     	ds	9
   256   000010                     ISR@is_key_pressed:
   257                           	callstack 0
   258                           
   259                           ; 1 bytes @ 0xF
   260   000010                     	ds	1
   261   000011                     ISR@current_row:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x10
   265   000011                     	ds	1
   266   000012                     ?___lmul:
   267                           	callstack 0
   268   000012                     i2c_data_tx@data:
   269                           	callstack 0
   270   000012                     i2c_start_and_addr@address:
   271                           	callstack 0
   272   000012                     ___lmul@multiplier:
   273                           	callstack 0
   274                           
   275                           ; 4 bytes @ 0x11
   276   000012                     	ds	4
   277   000016                     ___lmul@multiplicand:
   278                           	callstack 0
   279                           
   280                           ; 4 bytes @ 0x15
   281   000016                     	ds	4
   282   00001A                     ___lmul@product:
   283                           	callstack 0
   284                           
   285                           ; 4 bytes @ 0x19
   286   00001A                     	ds	4
   287   00001E                     delay@milliseconds:
   288                           	callstack 0
   289                           
   290                           ; 4 bytes @ 0x1D
   291   00001E                     	ds	4
   292   000022                     delay@timer_value:
   293                           	callstack 0
   294                           
   295                           ; 8 bytes @ 0x21
   296   000022                     	ds	8
   297   00002A                     ??_lcd_char:
   298   00002A                     lcd_command@lt:
   299                           	callstack 0
   300                           
   301                           ; 1 bytes @ 0x29
   302   00002A                     	ds	1
   303   00002B                     lcd_command@rw:
   304                           	callstack 0
   305   00002B                     lcd_char@letter:
   306                           	callstack 0
   307                           
   308                           ; 1 bytes @ 0x2A
   309   00002B                     	ds	1
   310   00002C                     lcd_command@rs:
   311                           	callstack 0
   312   00002C                     lcd_message@message:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x2B
   316   00002C                     	ds	1
   317   00002D                     ??_lcd_command:
   318                           
   319                           ; 1 bytes @ 0x2C
   320   00002D                     	ds	1
   321   00002E                     
   322                           ; 1 bytes @ 0x2D
   323   00002E                     	ds	2
   324   000030                     lcd_command@data:
   325                           	callstack 0
   326                           
   327                           ; 1 bytes @ 0x2F
   328   000030                     	ds	1
   329   000031                     lcd_move_cursor@position:
   330                           	callstack 0
   331                           
   332                           ; 1 bytes @ 0x30
   333   000031                     	ds	1
   334   000032                     lcd_move_cursor@line:
   335                           	callstack 0
   336                           
   337                           ; 1 bytes @ 0x31
   338   000032                     	ds	1
   339   000033                     ??_main:
   340                           
   341                           ; 1 bytes @ 0x32
   342   000033                     	ds	1
   343                           
   344 ;;
   345 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   346 ;;
   347 ;; *************** function _main *****************
   348 ;; Defined at:
   349 ;;		line 43 in file "main.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;		None
   352 ;; Auto vars:     Size  Location     Type
   353 ;;		None
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1
   363 ;;      Params:         0       0       0
   364 ;;      Locals:         0       0       0
   365 ;;      Temps:          1       0       0
   366 ;;      Totals:         1       0       0
   367 ;;Total ram usage:        1 bytes
   368 ;; Hardware stack levels required when called: 7
   369 ;; This function calls:
   370 ;;		_keypad_init
   371 ;;		_lcd_backspace
   372 ;;		_lcd_clear
   373 ;;		_lcd_init
   374 ;;		_lcd_message
   375 ;;		_system_init
   376 ;; This function is called by:
   377 ;;		Startup code after reset
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text0
   382   00024E                     __ptext0:
   383                           	callstack 0
   384   00024E                     _main:
   385                           	callstack 24
   386                           
   387                           ;main.c: 46:     TRISCbits.RC2 = 0;
   388                           
   389                           ;incstack = 0
   390   00024E  9494               	bcf	148,2,c	;volatile
   391                           
   392                           ;main.c: 47:     system_init();
   393   000250  EC1F  F004         	call	_system_init	;wreg free
   394                           
   395                           ;main.c: 49:     lcd_init();
   396   000254  EC6B  F002         	call	_lcd_init	;wreg free
   397                           
   398                           ;main.c: 50:     keypad_init();
   399   000258  EC05  F004         	call	_keypad_init	;wreg free
   400   00025C                     l1265:
   401                           
   402                           ;main.c: 54:     {;main.c: 56:         if(key_value && keys[key_value-1] != '*' && keys[
      +                          key_value-1] != 'D' && keys[key_value-1] != '#')
   403   00025C  503E               	movf	_key_value^0,w,c
   404   00025E  B4D8               	btfsc	status,2,c
   405   000260  D02B               	goto	l1279
   406   000262  503E               	movf	_key_value^0,w,c
   407   000264  0F3E               	addlw	low (_keys+255)
   408   000266  6ED9               	movwf	fsr2l,c
   409   000268  6ADA               	clrf	fsr2h,c
   410   00026A  0E2A               	movlw	42
   411   00026C  18DE               	xorwf	postinc2,w,c
   412   00026E  B4D8               	btfsc	status,2,c
   413   000270  D023               	goto	l1279
   414   000272  503E               	movf	_key_value^0,w,c
   415   000274  0F3E               	addlw	low (_keys+255)
   416   000276  6ED9               	movwf	fsr2l,c
   417   000278  6ADA               	clrf	fsr2h,c
   418   00027A  0E44               	movlw	68
   419   00027C  18DE               	xorwf	postinc2,w,c
   420   00027E  B4D8               	btfsc	status,2,c
   421   000280  D01B               	goto	l1279
   422   000282  503E               	movf	_key_value^0,w,c
   423   000284  0F3E               	addlw	low (_keys+255)
   424   000286  6ED9               	movwf	fsr2l,c
   425   000288  6ADA               	clrf	fsr2h,c
   426   00028A  0E23               	movlw	35
   427   00028C  18DE               	xorwf	postinc2,w,c
   428   00028E  B4D8               	btfsc	status,2,c
   429   000290  D013               	goto	l1279
   430                           
   431                           ;main.c: 57:         {;main.c: 58:             lcd_message(keys + key_value-1);
   432   000292  503E               	movf	_key_value^0,w,c
   433   000294  0F3E               	addlw	low (_keys+-1)
   434   000296  6E33               	movwf	??_main^0,c
   435   000298  C033  F02C         	movff	??_main,lcd_message@message
   436   00029C  6A2D               	clrf	(lcd_message@message+1)^0,c
   437   00029E  EC4F  F003         	call	_lcd_message	;wreg free
   438                           
   439                           ;main.c: 59:             sent_message[key_value - 1] = keys[key_value - 1];
   440   0002A2  503E               	movf	_key_value^0,w,c
   441   0002A4  0F3E               	addlw	low (_keys+255)
   442   0002A6  6ED9               	movwf	fsr2l,c
   443   0002A8  6ADA               	clrf	fsr2h,c
   444   0002AA  503E               	movf	_key_value^0,w,c
   445   0002AC  0F33               	addlw	low (_sent_message+255)
   446   0002AE  6EE1               	movwf	fsr1l,c
   447   0002B0  6AE2               	clrf	fsr1h,c
   448   0002B2  CFDF FFE7          	movff	indf2,indf1
   449                           
   450                           ;main.c: 60:             key_value--;
   451   0002B6  063E               	decf	_key_value^0,f,c
   452   0002B8                     l1279:
   453                           
   454                           ;main.c: 62:         if(key_value && keys[key_value-1] == '*')
   455   0002B8  503E               	movf	_key_value^0,w,c
   456   0002BA  B4D8               	btfsc	status,2,c
   457   0002BC  D010               	goto	l1289
   458   0002BE  503E               	movf	_key_value^0,w,c
   459   0002C0  0F3E               	addlw	low (_keys+255)
   460   0002C2  6ED9               	movwf	fsr2l,c
   461   0002C4  6ADA               	clrf	fsr2h,c
   462   0002C6  0E2A               	movlw	42
   463   0002C8  18DE               	xorwf	postinc2,w,c
   464   0002CA  A4D8               	btfss	status,2,c
   465   0002CC  D008               	goto	l1289
   466                           
   467                           ;main.c: 63:         {;main.c: 64:             lcd_backspace();
   468   0002CE  ECD0  F003         	call	_lcd_backspace	;wreg free
   469                           
   470                           ;main.c: 65:             sent_message[key_value - 1] = '\0';
   471   0002D2  503E               	movf	_key_value^0,w,c
   472   0002D4  0F33               	addlw	low (_sent_message+255)
   473   0002D6  6ED9               	movwf	fsr2l,c
   474   0002D8  6ADA               	clrf	fsr2h,c
   475   0002DA  6ADF               	clrf	indf2,c
   476                           
   477                           ;main.c: 66:             key_value--;
   478   0002DC  063E               	decf	_key_value^0,f,c
   479   0002DE                     l1289:
   480                           
   481                           ;main.c: 68:         if(key_value && keys[key_value-1] == 'D')
   482   0002DE  503E               	movf	_key_value^0,w,c
   483   0002E0  B4D8               	btfsc	status,2,c
   484   0002E2  D00C               	goto	l1297
   485   0002E4  503E               	movf	_key_value^0,w,c
   486   0002E6  0F3E               	addlw	low (_keys+255)
   487   0002E8  6ED9               	movwf	fsr2l,c
   488   0002EA  6ADA               	clrf	fsr2h,c
   489   0002EC  0E44               	movlw	68
   490   0002EE  18DE               	xorwf	postinc2,w,c
   491   0002F0  A4D8               	btfss	status,2,c
   492   0002F2  D004               	goto	l1297
   493                           
   494                           ;main.c: 69:         {;main.c: 70:             lcd_clear();
   495   0002F4  EC1F  F003         	call	_lcd_clear	;wreg free
   496                           
   497                           ;main.c: 71:             key_value = 0;
   498   0002F8  0E00               	movlw	0
   499   0002FA  6E3E               	movwf	_key_value^0,c
   500   0002FC                     l1297:
   501                           
   502                           ;main.c: 74:         if(key_value && keys[key_value-1] == '#')
   503   0002FC  503E               	movf	_key_value^0,w,c
   504   0002FE  B4D8               	btfsc	status,2,c
   505   000300  D014               	goto	l107
   506   000302  503E               	movf	_key_value^0,w,c
   507   000304  0F3E               	addlw	low (_keys+255)
   508   000306  6ED9               	movwf	fsr2l,c
   509   000308  6ADA               	clrf	fsr2h,c
   510   00030A  0E23               	movlw	35
   511   00030C  18DE               	xorwf	postinc2,w,c
   512   00030E  A4D8               	btfss	status,2,c
   513   000310  D00C               	goto	l107
   514                           
   515                           ;main.c: 75:         {;main.c: 76:             lcd_clear();
   516   000312  EC1F  F003         	call	_lcd_clear	;wreg free
   517                           
   518                           ;main.c: 77:             lcd_message("Sending");
   519   000316  0E3B               	movlw	low STR_1
   520   000318  6E2C               	movwf	lcd_message@message^0,c
   521   00031A  502C               	movf	lcd_message@message^0,w,c
   522   00031C  A4D8               	btfss	status,2,c
   523   00031E  0E02               	movlw	high __smallconst
   524   000320  6E2D               	movwf	(lcd_message@message+1)^0,c
   525   000322  EC4F  F003         	call	_lcd_message	;wreg free
   526                           
   527                           ;main.c: 78:             key_value = 0;
   528   000326  0E00               	movlw	0
   529   000328  6E3E               	movwf	_key_value^0,c
   530   00032A                     l107:
   531   00032A  0003               	sleep		;# 
   532   00032C  D797               	goto	l1265
   533   00032E                     __end_of_main:
   534                           	callstack 0
   535                           
   536 ;; *************** function _system_init *****************
   537 ;; Defined at:
   538 ;;		line 326 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1
   552 ;;      Params:         0       0       0
   553 ;;      Locals:         0       0       0
   554 ;;      Temps:          0       0       0
   555 ;;      Totals:         0       0       0
   556 ;;Total ram usage:        0 bytes
   557 ;; Hardware stack levels used: 1
   558 ;; Hardware stack levels required when called: 2
   559 ;; This function calls:
   560 ;;		Nothing
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text1
   567   00083E                     __ptext1:
   568                           	callstack 0
   569   00083E                     _system_init:
   570                           	callstack 28
   571                           
   572                           ;main.c: 329:     OSCCONbits.SCS = 0;
   573                           
   574                           ;incstack = 0
   575   00083E  0EFC               	movlw	-4
   576   000840  16D3               	andwf	211,f,c	;volatile
   577                           
   578                           ;main.c: 330:     OSCCONbits.IDLEN = 1;
   579   000842  8ED3               	bsf	211,7,c	;volatile
   580                           
   581                           ;main.c: 331:     OSCCONbits.IRCF = 7;
   582   000844  0E70               	movlw	112
   583   000846  12D3               	iorwf	211,f,c	;volatile
   584                           
   585                           ;main.c: 332:     OSCTUNEbits.PLLEN = 1;
   586   000848  8C9B               	bsf	155,6,c	;volatile
   587                           
   588                           ;main.c: 335:     INTCONbits.GIE = 1;
   589   00084A  8EF2               	bsf	242,7,c	;volatile
   590                           
   591                           ;main.c: 336:     INTCONbits.PEIE = 1;
   592   00084C  8CF2               	bsf	242,6,c	;volatile
   593                           
   594                           ;main.c: 338:     INTCON2bits.RBPU = 0;
   595   00084E  9EF1               	bcf	241,7,c	;volatile
   596                           
   597                           ;main.c: 342:     RCONbits.IPEN = 0;
   598   000850  9ED0               	bcf	208,7,c	;volatile
   599                           
   600                           ;main.c: 345:     SSPSTATbits.SMP = 1;
   601   000852  8EC7               	bsf	199,7,c	;volatile
   602                           
   603                           ;main.c: 346:     SSPSTATbits.CKE = 0;
   604   000854  9CC7               	bcf	199,6,c	;volatile
   605                           
   606                           ;main.c: 347:     SSPADD = 0x50;
   607   000856  0E50               	movlw	80
   608   000858  6EC8               	movwf	200,c	;volatile
   609                           
   610                           ;main.c: 348:     SSPCON1bits.SSPEN = 1;
   611   00085A  8AC6               	bsf	198,5,c	;volatile
   612                           
   613                           ;main.c: 349:     SSPCON1bits.SSPM = 0b1000;
   614   00085C  50C6               	movf	198,w,c	;volatile
   615   00085E  0BF0               	andlw	-16
   616   000860  0908               	iorlw	8
   617   000862  6EC6               	movwf	198,c	;volatile
   618                           
   619                           ;main.c: 350:     TRISCbits.RC3 = 1;
   620   000864  8694               	bsf	148,3,c	;volatile
   621                           
   622                           ;main.c: 351:     TRISCbits.RC4 = 1;
   623   000866  8894               	bsf	148,4,c	;volatile
   624   000868  0012               	return		;funcret
   625   00086A                     __end_of_system_init:
   626                           	callstack 0
   627                           
   628 ;; *************** function _lcd_init *****************
   629 ;; Defined at:
   630 ;;		line 141 in file "main.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;		None
   633 ;; Auto vars:     Size  Location     Type
   634 ;;		None
   635 ;; Return value:  Size  Location     Type
   636 ;;                  1    wreg      void 
   637 ;; Registers used:
   638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   639 ;; Tracked objects:
   640 ;;		On entry : 0/0
   641 ;;		On exit  : 0/0
   642 ;;		Unchanged: 0/0
   643 ;; Data sizes:     COMRAM   BANK0   BANK1
   644 ;;      Params:         0       0       0
   645 ;;      Locals:         0       0       0
   646 ;;      Temps:          0       0       0
   647 ;;      Totals:         0       0       0
   648 ;;Total ram usage:        0 bytes
   649 ;; Hardware stack levels used: 1
   650 ;; Hardware stack levels required when called: 6
   651 ;; This function calls:
   652 ;;		_delay
   653 ;;		_lcd_clear
   654 ;;		_lcd_command
   655 ;;		_lcd_message
   656 ;;		_lcd_move_cursor
   657 ;; This function is called by:
   658 ;;		_main
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text2
   663   0004D6                     __ptext2:
   664                           	callstack 0
   665   0004D6                     _lcd_init:
   666                           	callstack 24
   667                           
   668                           ;main.c: 148:     lcd_command(0x02, 1, 0, 0);
   669                           
   670                           ;incstack = 0
   671   0004D6  0E01               	movlw	1
   672   0004D8  6E2A               	movwf	lcd_command@lt^0,c
   673   0004DA  0E00               	movlw	0
   674   0004DC  6E2B               	movwf	lcd_command@rw^0,c
   675   0004DE  0E00               	movlw	0
   676   0004E0  6E2C               	movwf	lcd_command@rs^0,c
   677   0004E2  0E02               	movlw	2
   678   0004E4  ECD0  F002         	call	_lcd_command
   679                           
   680                           ;main.c: 149:     lcd_command(0x28, 1, 0, 0);
   681   0004E8  0E01               	movlw	1
   682   0004EA  6E2A               	movwf	lcd_command@lt^0,c
   683   0004EC  0E00               	movlw	0
   684   0004EE  6E2B               	movwf	lcd_command@rw^0,c
   685   0004F0  0E00               	movlw	0
   686   0004F2  6E2C               	movwf	lcd_command@rs^0,c
   687   0004F4  0E28               	movlw	40
   688   0004F6  ECD0  F002         	call	_lcd_command
   689                           
   690                           ;main.c: 151:     lcd_clear();
   691   0004FA  EC1F  F003         	call	_lcd_clear	;wreg free
   692                           
   693                           ;main.c: 154:     lcd_command(0x0F, 1, 0, 0);
   694   0004FE  0E01               	movlw	1
   695   000500  6E2A               	movwf	lcd_command@lt^0,c
   696   000502  0E00               	movlw	0
   697   000504  6E2B               	movwf	lcd_command@rw^0,c
   698   000506  0E00               	movlw	0
   699   000508  6E2C               	movwf	lcd_command@rs^0,c
   700   00050A  0E0F               	movlw	15
   701   00050C  ECD0  F002         	call	_lcd_command
   702                           
   703                           ;main.c: 159:     lcd_move_cursor(0, 5);
   704   000510  0E05               	movlw	5
   705   000512  6E31               	movwf	lcd_move_cursor@position^0,c
   706   000514  0E00               	movlw	0
   707   000516  ECEB  F003         	call	_lcd_move_cursor
   708                           
   709                           ;main.c: 160:     lcd_message("Senior");
   710   00051A  0E43               	movlw	low STR_2
   711   00051C  6E2C               	movwf	lcd_message@message^0,c
   712   00051E  502C               	movf	lcd_message@message^0,w,c
   713   000520  A4D8               	btfss	status,2,c
   714   000522  0E02               	movlw	high __smallconst
   715   000524  6E2D               	movwf	(lcd_message@message+1)^0,c
   716   000526  EC4F  F003         	call	_lcd_message	;wreg free
   717                           
   718                           ;main.c: 161:     lcd_move_cursor(1, 4);
   719   00052A  0E04               	movlw	4
   720   00052C  6E31               	movwf	lcd_move_cursor@position^0,c
   721   00052E  0E01               	movlw	1
   722   000530  ECEB  F003         	call	_lcd_move_cursor
   723                           
   724                           ;main.c: 162:     lcd_message("Capstone");
   725   000534  0E32               	movlw	low STR_3
   726   000536  6E2C               	movwf	lcd_message@message^0,c
   727   000538  502C               	movf	lcd_message@message^0,w,c
   728   00053A  A4D8               	btfss	status,2,c
   729   00053C  0E02               	movlw	high __smallconst
   730   00053E  6E2D               	movwf	(lcd_message@message+1)^0,c
   731   000540  EC4F  F003         	call	_lcd_message	;wreg free
   732                           
   733                           ;main.c: 163:     delay(500);
   734   000544  0EF4               	movlw	244
   735   000546  6E1E               	movwf	delay@milliseconds^0,c
   736   000548  0E01               	movlw	1
   737   00054A  6E1F               	movwf	(delay@milliseconds+1)^0,c
   738   00054C  0E00               	movlw	0
   739   00054E  6E20               	movwf	(delay@milliseconds+2)^0,c
   740   000550  0E00               	movlw	0
   741   000552  6E21               	movwf	(delay@milliseconds+3)^0,c
   742   000554  EC05  F002         	call	_delay	;wreg free
   743                           
   744                           ;main.c: 164:     lcd_clear();
   745   000558  EC1F  F003         	call	_lcd_clear	;wreg free
   746                           
   747                           ;main.c: 165:     lcd_message("By Aidan, Brett,");
   748   00055C  0E11               	movlw	low STR_4
   749   00055E  6E2C               	movwf	lcd_message@message^0,c
   750   000560  502C               	movf	lcd_message@message^0,w,c
   751   000562  A4D8               	btfss	status,2,c
   752   000564  0E02               	movlw	high __smallconst
   753   000566  6E2D               	movwf	(lcd_message@message+1)^0,c
   754   000568  EC4F  F003         	call	_lcd_message	;wreg free
   755                           
   756                           ;main.c: 166:     lcd_move_cursor(1, 0);
   757   00056C  0E00               	movlw	0
   758   00056E  6E31               	movwf	lcd_move_cursor@position^0,c
   759   000570  0E01               	movlw	1
   760   000572  ECEB  F003         	call	_lcd_move_cursor
   761                           
   762                           ;main.c: 167:     lcd_message("Chris, and Gabe");
   763   000576  0E22               	movlw	low STR_5
   764   000578  6E2C               	movwf	lcd_message@message^0,c
   765   00057A  502C               	movf	lcd_message@message^0,w,c
   766   00057C  A4D8               	btfss	status,2,c
   767   00057E  0E02               	movlw	high __smallconst
   768   000580  6E2D               	movwf	(lcd_message@message+1)^0,c
   769   000582  EC4F  F003         	call	_lcd_message	;wreg free
   770                           
   771                           ;main.c: 168:     delay(500);
   772   000586  0EF4               	movlw	244
   773   000588  6E1E               	movwf	delay@milliseconds^0,c
   774   00058A  0E01               	movlw	1
   775   00058C  6E1F               	movwf	(delay@milliseconds+1)^0,c
   776   00058E  0E00               	movlw	0
   777   000590  6E20               	movwf	(delay@milliseconds+2)^0,c
   778   000592  0E00               	movlw	0
   779   000594  6E21               	movwf	(delay@milliseconds+3)^0,c
   780   000596  EC05  F002         	call	_delay	;wreg free
   781                           
   782                           ;main.c: 169:     lcd_clear();
   783   00059A  EC1F  F003         	call	_lcd_clear	;wreg free
   784   00059E  0012               	return		;funcret
   785   0005A0                     __end_of_lcd_init:
   786                           	callstack 0
   787                           
   788 ;; *************** function _lcd_move_cursor *****************
   789 ;; Defined at:
   790 ;;		line 182 in file "main.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  line            1    wreg     unsigned char 
   793 ;;  position        1   48[COMRAM] unsigned char 
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  line            1   49[COMRAM] unsigned char 
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, status,2, status,0, cstack
   800 ;; Tracked objects:
   801 ;;		On entry : 0/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMRAM   BANK0   BANK1
   805 ;;      Params:         1       0       0
   806 ;;      Locals:         1       0       0
   807 ;;      Temps:          0       0       0
   808 ;;      Totals:         2       0       0
   809 ;;Total ram usage:        2 bytes
   810 ;; Hardware stack levels used: 1
   811 ;; Hardware stack levels required when called: 5
   812 ;; This function calls:
   813 ;;		_lcd_command
   814 ;; This function is called by:
   815 ;;		_lcd_init
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text3
   820   0007D6                     __ptext3:
   821                           	callstack 0
   822   0007D6                     _lcd_move_cursor:
   823                           	callstack 24
   824                           
   825                           ;incstack = 0
   826                           ;lcd_move_cursor@line stored from wreg
   827   0007D6  6E32               	movwf	lcd_move_cursor@line^0,c
   828                           
   829                           ;main.c: 182: void lcd_move_cursor(char line, char position);main.c: 183: {;main.c: 184:
      +                               if(!line)
   830   0007D8  5032               	movf	lcd_move_cursor@line^0,w,c
   831   0007DA  A4D8               	btfss	status,2,c
   832   0007DC  D00B               	goto	l1235
   833                           
   834                           ;main.c: 185:     {;main.c: 186:         lcd_command(0x80 | position, 1, 0, 0);
   835   0007DE  0E01               	movlw	1
   836   0007E0  6E2A               	movwf	lcd_command@lt^0,c
   837   0007E2  0E00               	movlw	0
   838   0007E4  6E2B               	movwf	lcd_command@rw^0,c
   839   0007E6  0E00               	movlw	0
   840   0007E8  6E2C               	movwf	lcd_command@rs^0,c
   841   0007EA  5031               	movf	lcd_move_cursor@position^0,w,c
   842   0007EC  0980               	iorlw	128
   843   0007EE  ECD0  F002         	call	_lcd_command
   844                           
   845                           ;main.c: 187:     }
   846   0007F2  0012               	return	
   847   0007F4                     l1235:
   848                           
   849                           ;main.c: 189:     {;main.c: 190:         lcd_command(0xC0 | position, 1, 0, 0);
   850   0007F4  0E01               	movlw	1
   851   0007F6  6E2A               	movwf	lcd_command@lt^0,c
   852   0007F8  0E00               	movlw	0
   853   0007FA  6E2B               	movwf	lcd_command@rw^0,c
   854   0007FC  0E00               	movlw	0
   855   0007FE  6E2C               	movwf	lcd_command@rs^0,c
   856   000800  5031               	movf	lcd_move_cursor@position^0,w,c
   857   000802  09C0               	iorlw	192
   858   000804  ECD0  F002         	call	_lcd_command
   859   000808  0012               	return		;funcret
   860   00080A                     __end_of_lcd_move_cursor:
   861                           	callstack 0
   862                           
   863 ;; *************** function _lcd_clear *****************
   864 ;; Defined at:
   865 ;;		line 235 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;		None
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, status,2, status,0, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1
   879 ;;      Params:         0       0       0
   880 ;;      Locals:         0       0       0
   881 ;;      Temps:          0       0       0
   882 ;;      Totals:         0       0       0
   883 ;;Total ram usage:        0 bytes
   884 ;; Hardware stack levels used: 1
   885 ;; Hardware stack levels required when called: 4
   886 ;; This function calls:
   887 ;;		_delay
   888 ;;		_i2c_data_tx
   889 ;;		_i2c_start_and_addr
   890 ;;		_i2c_stop
   891 ;; This function is called by:
   892 ;;		_main
   893 ;;		_lcd_init
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text4
   898   00063E                     __ptext4:
   899                           	callstack 0
   900   00063E                     _lcd_clear:
   901                           	callstack 25
   902                           
   903                           ;main.c: 237:     i2c_start_and_addr(0x4E);
   904                           
   905                           ;incstack = 0
   906   00063E  0E4E               	movlw	78
   907   000640  EC42  F004         	call	_i2c_start_and_addr
   908                           
   909                           ;main.c: 240:     i2c_data_tx(0b00001100);
   910   000644  0E0C               	movlw	12
   911   000646  EC4F  F004         	call	_i2c_data_tx
   912                           
   913                           ;main.c: 241:     delay(1);
   914   00064A  0E01               	movlw	1
   915   00064C  6E1E               	movwf	delay@milliseconds^0,c
   916   00064E  0E00               	movlw	0
   917   000650  6E1F               	movwf	(delay@milliseconds+1)^0,c
   918   000652  0E00               	movlw	0
   919   000654  6E20               	movwf	(delay@milliseconds+2)^0,c
   920   000656  0E00               	movlw	0
   921   000658  6E21               	movwf	(delay@milliseconds+3)^0,c
   922   00065A  EC05  F002         	call	_delay	;wreg free
   923                           
   924                           ;main.c: 242:     i2c_data_tx(0b00001000);
   925   00065E  0E08               	movlw	8
   926   000660  EC4F  F004         	call	_i2c_data_tx
   927                           
   928                           ;main.c: 245:     i2c_data_tx(0b00011100);
   929   000664  0E1C               	movlw	28
   930   000666  EC4F  F004         	call	_i2c_data_tx
   931                           
   932                           ;main.c: 246:     delay(1);
   933   00066A  0E01               	movlw	1
   934   00066C  6E1E               	movwf	delay@milliseconds^0,c
   935   00066E  0E00               	movlw	0
   936   000670  6E1F               	movwf	(delay@milliseconds+1)^0,c
   937   000672  0E00               	movlw	0
   938   000674  6E20               	movwf	(delay@milliseconds+2)^0,c
   939   000676  0E00               	movlw	0
   940   000678  6E21               	movwf	(delay@milliseconds+3)^0,c
   941   00067A  EC05  F002         	call	_delay	;wreg free
   942                           
   943                           ;main.c: 247:     i2c_data_tx(0b00011000);
   944   00067E  0E18               	movlw	24
   945   000680  EC4F  F004         	call	_i2c_data_tx
   946                           
   947                           ;main.c: 248:     delay(1);
   948   000684  0E01               	movlw	1
   949   000686  6E1E               	movwf	delay@milliseconds^0,c
   950   000688  0E00               	movlw	0
   951   00068A  6E1F               	movwf	(delay@milliseconds+1)^0,c
   952   00068C  0E00               	movlw	0
   953   00068E  6E20               	movwf	(delay@milliseconds+2)^0,c
   954   000690  0E00               	movlw	0
   955   000692  6E21               	movwf	(delay@milliseconds+3)^0,c
   956   000694  EC05  F002         	call	_delay	;wreg free
   957                           
   958                           ;main.c: 250:     i2c_stop();
   959   000698  EC58  F004         	call	_i2c_stop	;wreg free
   960   00069C  0012               	return		;funcret
   961   00069E                     __end_of_lcd_clear:
   962                           	callstack 0
   963                           
   964 ;; *************** function _lcd_backspace *****************
   965 ;; Defined at:
   966 ;;		line 175 in file "main.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1
   980 ;;      Params:         0       0       0
   981 ;;      Locals:         0       0       0
   982 ;;      Temps:          0       0       0
   983 ;;      Totals:         0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels used: 1
   986 ;; Hardware stack levels required when called: 6
   987 ;; This function calls:
   988 ;;		_lcd_command
   989 ;;		_lcd_message
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           	psect	text5
   996   0007A0                     __ptext5:
   997                           	callstack 0
   998   0007A0                     _lcd_backspace:
   999                           	callstack 24
  1000                           
  1001                           ;main.c: 177:     lcd_command(0x10, 1, 0, 0);
  1002                           
  1003                           ;incstack = 0
  1004   0007A0  0E01               	movlw	1
  1005   0007A2  6E2A               	movwf	lcd_command@lt^0,c
  1006   0007A4  0E00               	movlw	0
  1007   0007A6  6E2B               	movwf	lcd_command@rw^0,c
  1008   0007A8  0E00               	movlw	0
  1009   0007AA  6E2C               	movwf	lcd_command@rs^0,c
  1010   0007AC  0E10               	movlw	16
  1011   0007AE  ECD0  F002         	call	_lcd_command
  1012                           
  1013                           ;main.c: 178:     lcd_message(" ");
  1014   0007B2  0E4A               	movlw	low STR_6
  1015   0007B4  6E2C               	movwf	lcd_message@message^0,c
  1016   0007B6  502C               	movf	lcd_message@message^0,w,c
  1017   0007B8  A4D8               	btfss	status,2,c
  1018   0007BA  0E02               	movlw	high __smallconst
  1019   0007BC  6E2D               	movwf	(lcd_message@message+1)^0,c
  1020   0007BE  EC4F  F003         	call	_lcd_message	;wreg free
  1021                           
  1022                           ;main.c: 179:     lcd_command(0x10, 1, 0, 0);
  1023   0007C2  0E01               	movlw	1
  1024   0007C4  6E2A               	movwf	lcd_command@lt^0,c
  1025   0007C6  0E00               	movlw	0
  1026   0007C8  6E2B               	movwf	lcd_command@rw^0,c
  1027   0007CA  0E00               	movlw	0
  1028   0007CC  6E2C               	movwf	lcd_command@rs^0,c
  1029   0007CE  0E10               	movlw	16
  1030   0007D0  ECD0  F002         	call	_lcd_command
  1031   0007D4  0012               	return		;funcret
  1032   0007D6                     __end_of_lcd_backspace:
  1033                           	callstack 0
  1034                           
  1035 ;; *************** function _lcd_message *****************
  1036 ;; Defined at:
  1037 ;;		line 212 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  message         2   43[COMRAM] PTR unsigned char 
  1040 ;;		 -> STR_6(2), STR_5(16), STR_4(17), STR_3(9), 
  1041 ;;		 -> STR_2(7), STR_1(8), keys(10), 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;		None
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1
  1053 ;;      Params:         2       0       0
  1054 ;;      Locals:         0       0       0
  1055 ;;      Temps:          0       0       0
  1056 ;;      Totals:         2       0       0
  1057 ;;Total ram usage:        2 bytes
  1058 ;; Hardware stack levels used: 1
  1059 ;; Hardware stack levels required when called: 5
  1060 ;; This function calls:
  1061 ;;		_i2c_start_and_addr
  1062 ;;		_i2c_stop
  1063 ;;		_lcd_char
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;;		_lcd_init
  1067 ;;		_lcd_backspace
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text6
  1072   00069E                     __ptext6:
  1073                           	callstack 0
  1074   00069E                     _lcd_message:
  1075                           	callstack 25
  1076                           
  1077                           ;main.c: 212: void lcd_message(char* message);main.c: 213: {;main.c: 214:     i2c_start_
      +                          and_addr(0x4E);
  1078                           
  1079                           ;incstack = 0
  1080   00069E  0E4E               	movlw	78
  1081   0006A0  EC42  F004         	call	_i2c_start_and_addr
  1082                           
  1083                           ;main.c: 215:     while(*message != 0)
  1084   0006A4  D014               	goto	l1213
  1085   0006A6                     l1209:
  1086                           
  1087                           ;main.c: 216:     {;main.c: 217:         lcd_char(*message);
  1088   0006A6  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1089   0006AA  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1090   0006AE  6AF8               	clrf	tblptru,c
  1091   0006B0  0E01               	movlw	(high __ramtop+-1)
  1092   0006B2  64F7               	cpfsgt	tblptrh,c
  1093   0006B4  D003               	bra	u477
  1094   0006B6  0008               	tblrd		*
  1095   0006B8  50F5               	movf	tablat,w,c
  1096   0006BA  D005               	bra	u470
  1097   0006BC                     u477:
  1098   0006BC  CFF6 FFE9          	movff	tblptrl,fsr0l
  1099   0006C0  CFF7 FFEA          	movff	tblptrh,fsr0h
  1100   0006C4  50EF               	movf	indf0,w,c
  1101   0006C6                     u470:
  1102   0006C6  ECA8  F003         	call	_lcd_char
  1103                           
  1104                           ;main.c: 218:         message++;
  1105   0006CA  4A2C               	infsnz	lcd_message@message^0,f,c
  1106   0006CC  2A2D               	incf	(lcd_message@message+1)^0,f,c
  1107   0006CE                     l1213:
  1108                           
  1109                           ;main.c: 215:     while(*message != 0)
  1110   0006CE  C02C  FFF6         	movff	lcd_message@message,tblptrl
  1111   0006D2  C02D  FFF7         	movff	lcd_message@message+1,tblptrh
  1112   0006D6  6AF8               	clrf	tblptru,c
  1113   0006D8  0E01               	movlw	(high __ramtop+-1)
  1114   0006DA  64F7               	cpfsgt	tblptrh,c
  1115   0006DC  D003               	bra	u487
  1116   0006DE  0008               	tblrd		*
  1117   0006E0  50F5               	movf	tablat,w,c
  1118   0006E2  D005               	bra	u480
  1119   0006E4                     u487:
  1120   0006E4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1121   0006E8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1122   0006EC  50EF               	movf	indf0,w,c
  1123   0006EE                     u480:
  1124   0006EE  0900               	iorlw	0
  1125   0006F0  A4D8               	btfss	status,2,c
  1126   0006F2  D7D9               	goto	l1209
  1127                           
  1128                           ;main.c: 220:     i2c_stop();
  1129   0006F4  EC58  F004         	call	_i2c_stop	;wreg free
  1130   0006F8  0012               	return		;funcret
  1131   0006FA                     __end_of_lcd_message:
  1132                           	callstack 0
  1133                           
  1134 ;; *************** function _lcd_char *****************
  1135 ;; Defined at:
  1136 ;;		line 223 in file "main.c"
  1137 ;; Parameters:    Size  Location     Type
  1138 ;;  letter          1    wreg     unsigned char 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  letter          1   42[COMRAM] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  1    wreg      void 
  1143 ;; Registers used:
  1144 ;;		wreg, status,2, status,0, cstack
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMRAM   BANK0   BANK1
  1150 ;;      Params:         0       0       0
  1151 ;;      Locals:         1       0       0
  1152 ;;      Temps:          1       0       0
  1153 ;;      Totals:         2       0       0
  1154 ;;Total ram usage:        2 bytes
  1155 ;; Hardware stack levels used: 1
  1156 ;; Hardware stack levels required when called: 4
  1157 ;; This function calls:
  1158 ;;		_delay
  1159 ;;		_i2c_data_tx
  1160 ;; This function is called by:
  1161 ;;		_lcd_message
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           	psect	text7
  1166   000750                     __ptext7:
  1167                           	callstack 0
  1168   000750                     _lcd_char:
  1169                           	callstack 25
  1170                           
  1171                           ;incstack = 0
  1172                           ;lcd_char@letter stored from wreg
  1173   000750  6E2B               	movwf	lcd_char@letter^0,c
  1174                           
  1175                           ;main.c: 223: void lcd_char(char letter);main.c: 224: {;main.c: 225:     i2c_data_tx((le
      +                          tter & 0xF0) | 0b1101);
  1176   000752  502B               	movf	lcd_char@letter^0,w,c
  1177   000754  0BF0               	andlw	240
  1178   000756  090D               	iorlw	13
  1179   000758  EC4F  F004         	call	_i2c_data_tx
  1180                           
  1181                           ;main.c: 226:     i2c_data_tx((letter & 0xF0) | 8);
  1182   00075C  502B               	movf	lcd_char@letter^0,w,c
  1183   00075E  0BF0               	andlw	240
  1184   000760  0908               	iorlw	8
  1185   000762  EC4F  F004         	call	_i2c_data_tx
  1186                           
  1187                           ;main.c: 230:     i2c_data_tx(((letter & 0x0F) << 4) | 0b1101);
  1188   000766  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1189   00076A  0E0F               	movlw	15
  1190   00076C  162A               	andwf	??_lcd_char^0,f,c
  1191   00076E  382A               	swapf	??_lcd_char^0,w,c
  1192   000770  0BF0               	andlw	240
  1193   000772  090D               	iorlw	13
  1194   000774  EC4F  F004         	call	_i2c_data_tx
  1195                           
  1196                           ;main.c: 231:     i2c_data_tx(((letter & 0x0F) << 4) | 8);
  1197   000778  C02B  F02A         	movff	lcd_char@letter,??_lcd_char
  1198   00077C  0E0F               	movlw	15
  1199   00077E  162A               	andwf	??_lcd_char^0,f,c
  1200   000780  382A               	swapf	??_lcd_char^0,w,c
  1201   000782  0BF0               	andlw	240
  1202   000784  0908               	iorlw	8
  1203   000786  EC4F  F004         	call	_i2c_data_tx
  1204                           
  1205                           ;main.c: 232:     delay(1);
  1206   00078A  0E01               	movlw	1
  1207   00078C  6E1E               	movwf	delay@milliseconds^0,c
  1208   00078E  0E00               	movlw	0
  1209   000790  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1210   000792  0E00               	movlw	0
  1211   000794  6E20               	movwf	(delay@milliseconds+2)^0,c
  1212   000796  0E00               	movlw	0
  1213   000798  6E21               	movwf	(delay@milliseconds+3)^0,c
  1214   00079A  EC05  F002         	call	_delay	;wreg free
  1215   00079E  0012               	return		;funcret
  1216   0007A0                     __end_of_lcd_char:
  1217                           	callstack 0
  1218                           
  1219 ;; *************** function _lcd_command *****************
  1220 ;; Defined at:
  1221 ;;		line 196 in file "main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  data            1    wreg     unsigned char 
  1224 ;;  lt              1   41[COMRAM] unsigned char 
  1225 ;;  rw              1   42[COMRAM] unsigned char 
  1226 ;;  rs              1   43[COMRAM] unsigned char 
  1227 ;; Auto vars:     Size  Location     Type
  1228 ;;  data            1   47[COMRAM] unsigned char 
  1229 ;; Return value:  Size  Location     Type
  1230 ;;                  1    wreg      void 
  1231 ;; Registers used:
  1232 ;;		wreg, status,2, status,0, cstack
  1233 ;; Tracked objects:
  1234 ;;		On entry : 0/0
  1235 ;;		On exit  : 0/0
  1236 ;;		Unchanged: 0/0
  1237 ;; Data sizes:     COMRAM   BANK0   BANK1
  1238 ;;      Params:         3       0       0
  1239 ;;      Locals:         1       0       0
  1240 ;;      Temps:          3       0       0
  1241 ;;      Totals:         7       0       0
  1242 ;;Total ram usage:        7 bytes
  1243 ;; Hardware stack levels used: 1
  1244 ;; Hardware stack levels required when called: 4
  1245 ;; This function calls:
  1246 ;;		_delay
  1247 ;;		_i2c_data_tx
  1248 ;;		_i2c_start_and_addr
  1249 ;;		_i2c_stop
  1250 ;; This function is called by:
  1251 ;;		_lcd_init
  1252 ;;		_lcd_backspace
  1253 ;;		_lcd_move_cursor
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text8
  1258   0005A0                     __ptext8:
  1259                           	callstack 0
  1260   0005A0                     _lcd_command:
  1261                           	callstack 24
  1262                           
  1263                           ;incstack = 0
  1264                           ;lcd_command@data stored from wreg
  1265   0005A0  6E30               	movwf	lcd_command@data^0,c
  1266                           
  1267                           ;main.c: 196: void lcd_command(char data, char lt, char rw, char rs);main.c: 197: {;main
      +                          .c: 198:     i2c_start_and_addr(0x4E);
  1268   0005A2  0E4E               	movlw	78
  1269   0005A4  EC42  F004         	call	_i2c_start_and_addr
  1270                           
  1271                           ;main.c: 200:     i2c_data_tx((data & 0xF0) | (lt << 3) | 4 | (rw <<1) | rs);
  1272   0005A8  90D8               	bcf	status,0,c
  1273   0005AA  342B               	rlcf	lcd_command@rw^0,w,c
  1274   0005AC  6E2D               	movwf	??_lcd_command^0,c
  1275   0005AE  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1276   0005B2  90D8               	bcf	status,0,c
  1277   0005B4  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1278   0005B6  90D8               	bcf	status,0,c
  1279   0005B8  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1280   0005BA  90D8               	bcf	status,0,c
  1281   0005BC  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1282   0005BE  5030               	movf	lcd_command@data^0,w,c
  1283   0005C0  0BF0               	andlw	240
  1284   0005C2  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1285   0005C4  102D               	iorwf	??_lcd_command^0,w,c
  1286   0005C6  102C               	iorwf	lcd_command@rs^0,w,c
  1287   0005C8  0904               	iorlw	4
  1288   0005CA  EC4F  F004         	call	_i2c_data_tx
  1289                           
  1290                           ;main.c: 201:     delay(1);
  1291   0005CE  0E01               	movlw	1
  1292   0005D0  6E1E               	movwf	delay@milliseconds^0,c
  1293   0005D2  0E00               	movlw	0
  1294   0005D4  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1295   0005D6  0E00               	movlw	0
  1296   0005D8  6E20               	movwf	(delay@milliseconds+2)^0,c
  1297   0005DA  0E00               	movlw	0
  1298   0005DC  6E21               	movwf	(delay@milliseconds+3)^0,c
  1299   0005DE  EC05  F002         	call	_delay	;wreg free
  1300                           
  1301                           ;main.c: 202:     i2c_data_tx(lt<<3);
  1302   0005E2  382A               	swapf	lcd_command@lt^0,w,c
  1303   0005E4  42E8               	rrncf	wreg,f,c
  1304   0005E6  0BF8               	andlw	248
  1305   0005E8  EC4F  F004         	call	_i2c_data_tx
  1306                           
  1307                           ;main.c: 205:     i2c_data_tx(((data & 0x0F) <<4) | (lt << 3) | 4 | (rw <<1) | rs);
  1308   0005EC  90D8               	bcf	status,0,c
  1309   0005EE  342B               	rlcf	lcd_command@rw^0,w,c
  1310   0005F0  6E2D               	movwf	??_lcd_command^0,c
  1311   0005F2  C02A  F02E         	movff	lcd_command@lt,??_lcd_command+1
  1312   0005F6  90D8               	bcf	status,0,c
  1313   0005F8  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1314   0005FA  90D8               	bcf	status,0,c
  1315   0005FC  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1316   0005FE  90D8               	bcf	status,0,c
  1317   000600  362E               	rlcf	(??_lcd_command+1)^0,f,c
  1318   000602  C030  F02F         	movff	lcd_command@data,??_lcd_command+2
  1319   000606  0E0F               	movlw	15
  1320   000608  162F               	andwf	(??_lcd_command+2)^0,f,c
  1321   00060A  382F               	swapf	(??_lcd_command+2)^0,w,c
  1322   00060C  0BF0               	andlw	240
  1323   00060E  102E               	iorwf	(??_lcd_command+1)^0,w,c
  1324   000610  102D               	iorwf	??_lcd_command^0,w,c
  1325   000612  102C               	iorwf	lcd_command@rs^0,w,c
  1326   000614  0904               	iorlw	4
  1327   000616  EC4F  F004         	call	_i2c_data_tx
  1328                           
  1329                           ;main.c: 206:     delay(1);
  1330   00061A  0E01               	movlw	1
  1331   00061C  6E1E               	movwf	delay@milliseconds^0,c
  1332   00061E  0E00               	movlw	0
  1333   000620  6E1F               	movwf	(delay@milliseconds+1)^0,c
  1334   000622  0E00               	movlw	0
  1335   000624  6E20               	movwf	(delay@milliseconds+2)^0,c
  1336   000626  0E00               	movlw	0
  1337   000628  6E21               	movwf	(delay@milliseconds+3)^0,c
  1338   00062A  EC05  F002         	call	_delay	;wreg free
  1339                           
  1340                           ;main.c: 207:     i2c_data_tx(lt<<3);
  1341   00062E  382A               	swapf	lcd_command@lt^0,w,c
  1342   000630  42E8               	rrncf	wreg,f,c
  1343   000632  0BF8               	andlw	248
  1344   000634  EC4F  F004         	call	_i2c_data_tx
  1345                           
  1346                           ;main.c: 209:     i2c_stop();
  1347   000638  EC58  F004         	call	_i2c_stop	;wreg free
  1348   00063C  0012               	return		;funcret
  1349   00063E                     __end_of_lcd_command:
  1350                           	callstack 0
  1351                           
  1352 ;; *************** function _i2c_stop *****************
  1353 ;; Defined at:
  1354 ;;		line 264 in file "main.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;		None
  1359 ;; Return value:  Size  Location     Type
  1360 ;;                  1    wreg      void 
  1361 ;; Registers used:
  1362 ;;		None
  1363 ;; Tracked objects:
  1364 ;;		On entry : 0/0
  1365 ;;		On exit  : 0/0
  1366 ;;		Unchanged: 0/0
  1367 ;; Data sizes:     COMRAM   BANK0   BANK1
  1368 ;;      Params:         0       0       0
  1369 ;;      Locals:         0       0       0
  1370 ;;      Temps:          0       0       0
  1371 ;;      Totals:         0       0       0
  1372 ;;Total ram usage:        0 bytes
  1373 ;; Hardware stack levels used: 1
  1374 ;; Hardware stack levels required when called: 2
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_lcd_command
  1379 ;;		_lcd_message
  1380 ;;		_lcd_clear
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text9
  1385   0008B0                     __ptext9:
  1386                           	callstack 0
  1387   0008B0                     _i2c_stop:
  1388                           	callstack 27
  1389                           
  1390                           ;main.c: 267:     SSPCON2bits.PEN = 1;
  1391                           
  1392                           ;incstack = 0
  1393   0008B0  84C5               	bsf	197,2,c	;volatile
  1394   0008B2                     l171:
  1395   0008B2  A69E               	btfss	158,3,c	;volatile
  1396   0008B4  D7FE               	goto	l171
  1397                           
  1398                           ;main.c: 269:     PIR1bits.SSPIF = 0;
  1399   0008B6  969E               	bcf	158,3,c	;volatile
  1400   0008B8  0012               	return		;funcret
  1401   0008BA                     __end_of_i2c_stop:
  1402                           	callstack 0
  1403                           
  1404 ;; *************** function _i2c_start_and_addr *****************
  1405 ;; Defined at:
  1406 ;;		line 272 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  address         1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  address         1   17[COMRAM] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1
  1420 ;;      Params:         0       0       0
  1421 ;;      Locals:         1       0       0
  1422 ;;      Temps:          0       0       0
  1423 ;;      Totals:         1       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used: 1
  1426 ;; Hardware stack levels required when called: 2
  1427 ;; This function calls:
  1428 ;;		Nothing
  1429 ;; This function is called by:
  1430 ;;		_lcd_command
  1431 ;;		_lcd_message
  1432 ;;		_lcd_clear
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text10
  1437   000884                     __ptext10:
  1438                           	callstack 0
  1439   000884                     _i2c_start_and_addr:
  1440                           	callstack 27
  1441                           
  1442                           ;incstack = 0
  1443                           ;i2c_start_and_addr@address stored from wreg
  1444   000884  6E12               	movwf	i2c_start_and_addr@address^0,c
  1445                           
  1446                           ;main.c: 272: void i2c_start_and_addr(unsigned char address);main.c: 273: {;main.c: 275:
      +                               SSPCON2bits.SEN = 1;
  1447   000886  80C5               	bsf	197,0,c	;volatile
  1448   000888                     l177:
  1449   000888  A69E               	btfss	158,3,c	;volatile
  1450   00088A  D7FE               	goto	l177
  1451                           
  1452                           ;main.c: 277:     PIR1bits.SSPIF = 0;
  1453   00088C  969E               	bcf	158,3,c	;volatile
  1454   00088E                     l919:
  1455                           
  1456                           ;main.c: 279:     {;main.c: 280:         SSPBUF = address;
  1457   00088E  C012  FFC9         	movff	i2c_start_and_addr@address,4041	;volatile
  1458   000892                     l181:
  1459   000892  A69E               	btfss	158,3,c	;volatile
  1460   000894  D7FE               	goto	l181
  1461                           
  1462                           ;main.c: 282:         PIR1bits.SSPIF = 0;
  1463   000896  969E               	bcf	158,3,c	;volatile
  1464                           
  1465                           ;main.c: 283:     }while(SSPCON2bits.ACKSTAT);
  1466   000898  ACC5               	btfss	197,6,c	;volatile
  1467   00089A  0012               	return	
  1468   00089C  D7F8               	goto	l919
  1469   00089E                     __end_of_i2c_start_and_addr:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _i2c_data_tx *****************
  1473 ;; Defined at:
  1474 ;;		line 253 in file "main.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  data            1    wreg     unsigned char 
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  data            1   17[COMRAM] unsigned char 
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1
  1488 ;;      Params:         0       0       0
  1489 ;;      Locals:         1       0       0
  1490 ;;      Temps:          0       0       0
  1491 ;;      Totals:         1       0       0
  1492 ;;Total ram usage:        1 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 2
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_lcd_command
  1499 ;;		_lcd_char
  1500 ;;		_lcd_clear
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text11
  1505   00089E                     __ptext11:
  1506                           	callstack 0
  1507   00089E                     _i2c_data_tx:
  1508                           	callstack 26
  1509                           
  1510                           ;incstack = 0
  1511                           ;i2c_data_tx@data stored from wreg
  1512   00089E  6E12               	movwf	i2c_data_tx@data^0,c
  1513   0008A0                     l163:
  1514                           
  1515                           ;main.c: 256:     {;main.c: 257:         SSPBUF = data;
  1516   0008A0  C012  FFC9         	movff	i2c_data_tx@data,4041	;volatile
  1517   0008A4                     l164:
  1518   0008A4  A69E               	btfss	158,3,c	;volatile
  1519   0008A6  D7FE               	goto	l164
  1520                           
  1521                           ;main.c: 259:         PIR1bits.SSPIF = 0;
  1522   0008A8  969E               	bcf	158,3,c	;volatile
  1523                           
  1524                           ;main.c: 261:     }while(SSPCON2bits.ACKSTAT);
  1525   0008AA  ACC5               	btfss	197,6,c	;volatile
  1526   0008AC  0012               	return	
  1527   0008AE  D7F8               	goto	l163
  1528   0008B0                     __end_of_i2c_data_tx:
  1529                           	callstack 0
  1530                           
  1531 ;; *************** function _delay *****************
  1532 ;; Defined at:
  1533 ;;		line 117 in file "main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  milliseconds    4   29[COMRAM] unsigned long 
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;  timer_value     8   33[COMRAM] unsigned long long 
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1
  1547 ;;      Params:         4       0       0
  1548 ;;      Locals:         8       0       0
  1549 ;;      Temps:          0       0       0
  1550 ;;      Totals:        12       0       0
  1551 ;;Total ram usage:       12 bytes
  1552 ;; Hardware stack levels used: 1
  1553 ;; Hardware stack levels required when called: 3
  1554 ;; This function calls:
  1555 ;;		___lmul
  1556 ;; This function is called by:
  1557 ;;		_lcd_init
  1558 ;;		_lcd_command
  1559 ;;		_lcd_char
  1560 ;;		_lcd_clear
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text12
  1565   00040A                     __ptext12:
  1566                           	callstack 0
  1567   00040A                     _delay:
  1568                           	callstack 25
  1569                           
  1570                           ;main.c: 117: void delay(unsigned long milliseconds);main.c: 118: {;main.c: 119:     T1C
      +                          ON = 0b10110000;
  1571                           
  1572                           ;incstack = 0
  1573   00040A  0EB0               	movlw	176
  1574   00040C  6ECD               	movwf	205,c	;volatile
  1575                           
  1576                           ;main.c: 120:     PIE1bits.TMR1IE = 0;
  1577   00040E  909D               	bcf	157,0,c	;volatile
  1578                           
  1579                           ;main.c: 121:     unsigned long long timer_value = (milliseconds) * 1000 ;
  1580   000410  C01E  F012         	movff	delay@milliseconds,___lmul@multiplier
  1581   000414  C01F  F013         	movff	delay@milliseconds+1,___lmul@multiplier+1
  1582   000418  C020  F014         	movff	delay@milliseconds+2,___lmul@multiplier+2
  1583   00041C  C021  F015         	movff	delay@milliseconds+3,___lmul@multiplier+3
  1584   000420  0EE8               	movlw	232
  1585   000422  6E16               	movwf	___lmul@multiplicand^0,c
  1586   000424  0E03               	movlw	3
  1587   000426  6E17               	movwf	(___lmul@multiplicand+1)^0,c
  1588   000428  0E00               	movlw	0
  1589   00042A  6E18               	movwf	(___lmul@multiplicand+2)^0,c
  1590   00042C  0E00               	movlw	0
  1591   00042E  6E19               	movwf	(___lmul@multiplicand+3)^0,c
  1592   000430  EC7D  F003         	call	___lmul	;wreg free
  1593   000434  5012               	movf	?___lmul^0,w,c
  1594   000436  6E22               	movwf	delay@timer_value^0,c
  1595   000438  5013               	movf	(?___lmul+1)^0,w,c
  1596   00043A  6E23               	movwf	(delay@timer_value+1)^0,c
  1597   00043C  5014               	movf	(?___lmul+2)^0,w,c
  1598   00043E  6E24               	movwf	(delay@timer_value+2)^0,c
  1599   000440  5015               	movf	(?___lmul+3)^0,w,c
  1600   000442  6E25               	movwf	(delay@timer_value+3)^0,c
  1601   000444  6A26               	clrf	(delay@timer_value+4)^0,c
  1602   000446  6A27               	clrf	(delay@timer_value+5)^0,c
  1603   000448  6A28               	clrf	(delay@timer_value+6)^0,c
  1604   00044A  6A29               	clrf	(delay@timer_value+7)^0,c
  1605                           
  1606                           ;main.c: 122:     while(timer_value > 65535)
  1607   00044C  D019               	goto	l1179
  1608   00044E                     l1171:
  1609                           
  1610                           ;main.c: 123:     {;main.c: 124:         timer_value -= 65535;
  1611   00044E  0EFF               	movlw	255
  1612   000450  5E22               	subwf	delay@timer_value^0,f,c
  1613   000452  0EFF               	movlw	255
  1614   000454  5A23               	subwfb	(delay@timer_value+1)^0,f,c
  1615   000456  0E00               	movlw	0
  1616   000458  5A24               	subwfb	(delay@timer_value+2)^0,f,c
  1617   00045A  0E00               	movlw	0
  1618   00045C  5A25               	subwfb	(delay@timer_value+3)^0,f,c
  1619   00045E  0E00               	movlw	0
  1620   000460  5A26               	subwfb	(delay@timer_value+4)^0,f,c
  1621   000462  0E00               	movlw	0
  1622   000464  5A27               	subwfb	(delay@timer_value+5)^0,f,c
  1623   000466  0E00               	movlw	0
  1624   000468  5A28               	subwfb	(delay@timer_value+6)^0,f,c
  1625   00046A  0E00               	movlw	0
  1626   00046C  5A29               	subwfb	(delay@timer_value+7)^0,f,c
  1627                           
  1628                           ;main.c: 125:         TMR1H = 0;
  1629   00046E  0E00               	movlw	0
  1630   000470  6ECF               	movwf	207,c	;volatile
  1631                           
  1632                           ;main.c: 126:         TMR1L = 0;
  1633   000472  0E00               	movlw	0
  1634   000474  6ECE               	movwf	206,c	;volatile
  1635                           
  1636                           ;main.c: 127:         T1CONbits.TMR1ON = 1;
  1637   000476  80CD               	bsf	205,0,c	;volatile
  1638   000478                     l127:
  1639   000478  A09E               	btfss	158,0,c	;volatile
  1640   00047A  D7FE               	goto	l127
  1641                           
  1642                           ;main.c: 129:         T1CONbits.TMR1ON = 0;
  1643   00047C  90CD               	bcf	205,0,c	;volatile
  1644                           
  1645                           ;main.c: 130:         PIR1bits.TMR1IF = 0;
  1646   00047E  909E               	bcf	158,0,c	;volatile
  1647   000480                     l1179:
  1648                           
  1649                           ;main.c: 122:     while(timer_value > 65535)
  1650   000480  5029               	movf	(delay@timer_value+7)^0,w,c
  1651   000482  1028               	iorwf	(delay@timer_value+6)^0,w,c
  1652   000484  1027               	iorwf	(delay@timer_value+5)^0,w,c
  1653   000486  1026               	iorwf	(delay@timer_value+4)^0,w,c
  1654   000488  1025               	iorwf	(delay@timer_value+3)^0,w,c
  1655   00048A  E1E1               	bnz	l1171
  1656   00048C  0424               	decf	(delay@timer_value+2)^0,w,c
  1657   00048E  B0D8               	btfsc	status,0,c
  1658   000490  D7DE               	goto	l1171
  1659                           
  1660                           ;main.c: 132:     timer_value = 65535 - timer_value + 1;
  1661   000492  5022               	movf	delay@timer_value^0,w,c
  1662   000494  0800               	sublw	0
  1663   000496  6E22               	movwf	delay@timer_value^0,c
  1664   000498  0E00               	movlw	0
  1665   00049A  5423               	subfwb	(delay@timer_value+1)^0,w,c
  1666   00049C  6E23               	movwf	(delay@timer_value+1)^0,c
  1667   00049E  0E01               	movlw	1
  1668   0004A0  5424               	subfwb	(delay@timer_value+2)^0,w,c
  1669   0004A2  6E24               	movwf	(delay@timer_value+2)^0,c
  1670   0004A4  0E00               	movlw	0
  1671   0004A6  5425               	subfwb	(delay@timer_value+3)^0,w,c
  1672   0004A8  6E25               	movwf	(delay@timer_value+3)^0,c
  1673   0004AA  0E00               	movlw	0
  1674   0004AC  5426               	subfwb	(delay@timer_value+4)^0,w,c
  1675   0004AE  6E26               	movwf	(delay@timer_value+4)^0,c
  1676   0004B0  0E00               	movlw	0
  1677   0004B2  5427               	subfwb	(delay@timer_value+5)^0,w,c
  1678   0004B4  6E27               	movwf	(delay@timer_value+5)^0,c
  1679   0004B6  0E00               	movlw	0
  1680   0004B8  5428               	subfwb	(delay@timer_value+6)^0,w,c
  1681   0004BA  6E28               	movwf	(delay@timer_value+6)^0,c
  1682   0004BC  0E00               	movlw	0
  1683   0004BE  5429               	subfwb	(delay@timer_value+7)^0,w,c
  1684   0004C0  6E29               	movwf	(delay@timer_value+7)^0,c
  1685                           
  1686                           ;main.c: 133:     TMR1H = (unsigned char)(0xFF00 & timer_value);
  1687   0004C2  0E00               	movlw	0
  1688   0004C4  6ECF               	movwf	207,c	;volatile
  1689                           
  1690                           ;main.c: 134:     TMR1L = (unsigned char)(0xFF & timer_value);
  1691   0004C6  C022  FFCE         	movff	delay@timer_value,4046	;volatile
  1692                           
  1693                           ;main.c: 135:     T1CONbits.TMR1ON = 1;
  1694   0004CA  80CD               	bsf	205,0,c	;volatile
  1695   0004CC                     l131:
  1696   0004CC  A09E               	btfss	158,0,c	;volatile
  1697   0004CE  D7FE               	goto	l131
  1698                           
  1699                           ;main.c: 137:     T1CONbits.TMR1ON = 0;
  1700   0004D0  90CD               	bcf	205,0,c	;volatile
  1701                           
  1702                           ;main.c: 138:     PIR1bits.TMR1IF = 0;
  1703   0004D2  909E               	bcf	158,0,c	;volatile
  1704   0004D4  0012               	return		;funcret
  1705   0004D6                     __end_of_delay:
  1706                           	callstack 0
  1707                           
  1708 ;; *************** function ___lmul *****************
  1709 ;; Defined at:
  1710 ;;		line 15 in file "F:\Program Files\MicroChip\XC8\v2.45\pic\sources\c99\common\Umul32.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  multiplier      4   17[COMRAM] unsigned long 
  1713 ;;  multiplicand    4   21[COMRAM] unsigned long 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  product         4   25[COMRAM] unsigned long 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  4   17[COMRAM] unsigned long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1
  1725 ;;      Params:         8       0       0
  1726 ;;      Locals:         4       0       0
  1727 ;;      Temps:          0       0       0
  1728 ;;      Totals:        12       0       0
  1729 ;;Total ram usage:       12 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 2
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_delay
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text13
  1740   0006FA                     __ptext13:
  1741                           	callstack 0
  1742   0006FA                     ___lmul:
  1743                           	callstack 25
  1744                           
  1745                           ;incstack = 0
  1746   0006FA  0E00               	movlw	0
  1747   0006FC  6E1A               	movwf	___lmul@product^0,c
  1748   0006FE  0E00               	movlw	0
  1749   000700  6E1B               	movwf	(___lmul@product+1)^0,c
  1750   000702  0E00               	movlw	0
  1751   000704  6E1C               	movwf	(___lmul@product+2)^0,c
  1752   000706  0E00               	movlw	0
  1753   000708  6E1D               	movwf	(___lmul@product+3)^0,c
  1754   00070A                     l1157:
  1755   00070A  A012               	btfss	___lmul@multiplier^0,0,c
  1756   00070C  D008               	goto	l1161
  1757   00070E  5016               	movf	___lmul@multiplicand^0,w,c
  1758   000710  261A               	addwf	___lmul@product^0,f,c
  1759   000712  5017               	movf	(___lmul@multiplicand+1)^0,w,c
  1760   000714  221B               	addwfc	(___lmul@product+1)^0,f,c
  1761   000716  5018               	movf	(___lmul@multiplicand+2)^0,w,c
  1762   000718  221C               	addwfc	(___lmul@product+2)^0,f,c
  1763   00071A  5019               	movf	(___lmul@multiplicand+3)^0,w,c
  1764   00071C  221D               	addwfc	(___lmul@product+3)^0,f,c
  1765   00071E                     l1161:
  1766   00071E  90D8               	bcf	status,0,c
  1767   000720  3616               	rlcf	___lmul@multiplicand^0,f,c
  1768   000722  3617               	rlcf	(___lmul@multiplicand+1)^0,f,c
  1769   000724  3618               	rlcf	(___lmul@multiplicand+2)^0,f,c
  1770   000726  3619               	rlcf	(___lmul@multiplicand+3)^0,f,c
  1771   000728  90D8               	bcf	status,0,c
  1772   00072A  3215               	rrcf	(___lmul@multiplier+3)^0,f,c
  1773   00072C  3214               	rrcf	(___lmul@multiplier+2)^0,f,c
  1774   00072E  3213               	rrcf	(___lmul@multiplier+1)^0,f,c
  1775   000730  3212               	rrcf	___lmul@multiplier^0,f,c
  1776   000732  5012               	movf	___lmul@multiplier^0,w,c
  1777   000734  1013               	iorwf	(___lmul@multiplier+1)^0,w,c
  1778   000736  1014               	iorwf	(___lmul@multiplier+2)^0,w,c
  1779   000738  1015               	iorwf	(___lmul@multiplier+3)^0,w,c
  1780   00073A  A4D8               	btfss	status,2,c
  1781   00073C  D7E6               	goto	l1157
  1782   00073E  C01A  F012         	movff	___lmul@product,?___lmul
  1783   000742  C01B  F013         	movff	___lmul@product+1,?___lmul+1
  1784   000746  C01C  F014         	movff	___lmul@product+2,?___lmul+2
  1785   00074A  C01D  F015         	movff	___lmul@product+3,?___lmul+3
  1786   00074E  0012               	return		;funcret
  1787   000750                     __end_of___lmul:
  1788                           	callstack 0
  1789                           
  1790 ;; *************** function _keypad_init *****************
  1791 ;; Defined at:
  1792 ;;		line 354 in file "main.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, status,2, status,0
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMRAM   BANK0   BANK1
  1806 ;;      Params:         0       0       0
  1807 ;;      Locals:         0       0       0
  1808 ;;      Temps:          0       0       0
  1809 ;;      Totals:         0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used: 1
  1812 ;; Hardware stack levels required when called: 2
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text14
  1821   00080A                     __ptext14:
  1822                           	callstack 0
  1823   00080A                     _keypad_init:
  1824                           	callstack 28
  1825                           
  1826                           ;main.c: 356:     ADCON1bits.PCFG = 15;
  1827                           
  1828                           ;incstack = 0
  1829   00080A  0E0F               	movlw	15
  1830   00080C  12C1               	iorwf	193,f,c	;volatile
  1831                           
  1832                           ;main.c: 357:     TRISAbits.RA0 = 0;
  1833   00080E  9092               	bcf	146,0,c	;volatile
  1834                           
  1835                           ;main.c: 358:     TRISAbits.RA1 = 0;
  1836   000810  9292               	bcf	146,1,c	;volatile
  1837                           
  1838                           ;main.c: 359:     TRISAbits.RA2 = 0;
  1839   000812  9492               	bcf	146,2,c	;volatile
  1840                           
  1841                           ;main.c: 360:     TRISAbits.RA3 = 0;
  1842   000814  9692               	bcf	146,3,c	;volatile
  1843                           
  1844                           ;main.c: 361:     TRISBbits.RB7 = 1;
  1845   000816  8E93               	bsf	147,7,c	;volatile
  1846                           
  1847                           ;main.c: 362:     TRISBbits.RB6 = 1;
  1848   000818  8C93               	bsf	147,6,c	;volatile
  1849                           
  1850                           ;main.c: 363:     TRISBbits.RB5 = 1;
  1851   00081A  8A93               	bsf	147,5,c	;volatile
  1852                           
  1853                           ;main.c: 364:     TRISBbits.RB4 = 1;
  1854   00081C  8893               	bsf	147,4,c	;volatile
  1855                           
  1856                           ;main.c: 366:     LATA = LATA & 0b11110000;
  1857   00081E  5089               	movf	137,w,c	;volatile
  1858   000820  0BF0               	andlw	240
  1859   000822  6E89               	movwf	137,c	;volatile
  1860                           
  1861                           ;main.c: 367:     PORTB = PORTB & 0b00001111;
  1862   000824  5081               	movf	129,w,c	;volatile
  1863   000826  0B0F               	andlw	15
  1864   000828  6E81               	movwf	129,c	;volatile
  1865                           
  1866                           ;main.c: 370:     T0CON = 0b00000100;
  1867   00082A  0E04               	movlw	4
  1868   00082C  6ED5               	movwf	213,c	;volatile
  1869                           
  1870                           ;main.c: 371:     INTCONbits.TMR0IF = 0;
  1871   00082E  94F2               	bcf	242,2,c	;volatile
  1872                           
  1873                           ;main.c: 372:     TMR0H = 0x0B;
  1874   000830  0E0B               	movlw	11
  1875   000832  6ED7               	movwf	215,c	;volatile
  1876                           
  1877                           ;main.c: 373:     TMR0L = 0xDD;
  1878   000834  0EDD               	movlw	221
  1879   000836  6ED6               	movwf	214,c	;volatile
  1880                           
  1881                           ;main.c: 374:     INTCONbits.TMR0IE = 1;
  1882   000838  8AF2               	bsf	242,5,c	;volatile
  1883                           
  1884                           ;main.c: 375:     T0CONbits.TMR0ON = 1;
  1885   00083A  8ED5               	bsf	213,7,c	;volatile
  1886   00083C  0012               	return		;funcret
  1887   00083E                     __end_of_keypad_init:
  1888                           	callstack 0
  1889                           
  1890 ;; *************** function _ISR *****************
  1891 ;; Defined at:
  1892 ;;		line 89 in file "main.c"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;		None
  1895 ;; Auto vars:     Size  Location     Type
  1896 ;;  current_row     1   16[COMRAM] unsigned char 
  1897 ;;  is_key_press    1   15[COMRAM] unsigned char 
  1898 ;; Return value:  Size  Location     Type
  1899 ;;                  1    wreg      void 
  1900 ;; Registers used:
  1901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1902 ;; Tracked objects:
  1903 ;;		On entry : 0/0
  1904 ;;		On exit  : 0/0
  1905 ;;		Unchanged: 0/0
  1906 ;; Data sizes:     COMRAM   BANK0   BANK1
  1907 ;;      Params:         0       0       0
  1908 ;;      Locals:         2       0       0
  1909 ;;      Temps:          9       0       0
  1910 ;;      Totals:        11       0       0
  1911 ;;Total ram usage:       11 bytes
  1912 ;; Hardware stack levels used: 1
  1913 ;; Hardware stack levels required when called: 1
  1914 ;; This function calls:
  1915 ;;		_keypress
  1916 ;; This function is called by:
  1917 ;;		Interrupt level 2
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	intcode
  1922   000008                     __pintcode:
  1923                           	callstack 0
  1924   000008                     _ISR:
  1925                           	callstack 24
  1926                           
  1927                           ;incstack = 0
  1928   000008  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1929   00000A  CFD9 F008          	movff	fsr2l,??_ISR+1
  1930   00000E  CFDA F009          	movff	fsr2h,??_ISR+2
  1931   000012  CFF3 F00A          	movff	prodl,??_ISR+3
  1932   000016  CFF4 F00B          	movff	prodh,??_ISR+4
  1933   00001A  CFF6 F00C          	movff	tblptrl,??_ISR+5
  1934   00001E  CFF7 F00D          	movff	tblptrh,??_ISR+6
  1935   000022  CFF8 F00E          	movff	tblptru,??_ISR+7
  1936   000026  CFF5 F00F          	movff	tablat,??_ISR+8
  1937                           
  1938                           ;main.c: 91:     if(INTCONbits.TMR0IF == 1)
  1939   00002A  A4F2               	btfss	242,2,c	;volatile
  1940   00002C  D02F               	goto	i2l122
  1941                           
  1942                           ;main.c: 92:     {;main.c: 94:         INTCONbits.TMR0IF = 0;
  1943   00002E  94F2               	bcf	242,2,c	;volatile
  1944                           
  1945                           ;main.c: 95:         TMR0H = 0x0B;
  1946   000030  0E0B               	movlw	11
  1947   000032  6ED7               	movwf	215,c	;volatile
  1948                           
  1949                           ;main.c: 96:         TMR0L = 0xDD;
  1950   000034  0EDD               	movlw	221
  1951   000036  6ED6               	movwf	214,c	;volatile
  1952                           
  1953                           ;main.c: 97:         char is_key_pressed = 0;
  1954   000038  0E00               	movlw	0
  1955   00003A  6E10               	movwf	ISR@is_key_pressed^0,c
  1956                           
  1957                           ;main.c: 98:         char current_row = 0;
  1958   00003C  0E00               	movlw	0
  1959   00003E  6E11               	movwf	ISR@current_row^0,c
  1960                           
  1961                           ;main.c: 101:         while(!is_key_pressed && current_row < 4)
  1962   000040  D005               	goto	i2l1141
  1963   000042                     i2l1137:
  1964                           
  1965                           ;main.c: 102:         {;main.c: 103:             is_key_pressed = keypress(current_row);
  1966   000042  5011               	movf	ISR@current_row^0,w,c
  1967   000044  EC97  F001         	call	_keypress
  1968   000048  6E10               	movwf	ISR@is_key_pressed^0,c
  1969                           
  1970                           ;main.c: 104:             current_row++;
  1971   00004A  2A11               	incf	ISR@current_row^0,f,c
  1972   00004C                     i2l1141:
  1973                           
  1974                           ;main.c: 101:         while(!is_key_pressed && current_row < 4)
  1975   00004C  5010               	movf	ISR@is_key_pressed^0,w,c
  1976   00004E  A4D8               	btfss	status,2,c
  1977   000050  D003               	goto	i2u39_40
  1978   000052  0E03               	movlw	3
  1979   000054  6411               	cpfsgt	ISR@current_row^0,c
  1980   000056  D7F5               	goto	i2l1137
  1981   000058                     i2u39_40:
  1982                           
  1983                           ;main.c: 106:         if(is_key_pressed && key_value < 10)
  1984   000058  5010               	movf	ISR@is_key_pressed^0,w,c
  1985   00005A  B4D8               	btfsc	status,2,c
  1986   00005C  D017               	goto	i2l122
  1987   00005E  0E0A               	movlw	10
  1988   000060  603E               	cpfslt	_key_value^0,c
  1989   000062  D014               	goto	i2l122
  1990                           
  1991                           ;main.c: 107:         {;main.c: 108:             keys[key_value] = keypad_array[--curren
      +                          t_row][--is_key_pressed];
  1992   000064  0610               	decf	ISR@is_key_pressed^0,f,c
  1993   000066  0611               	decf	ISR@current_row^0,f,c
  1994   000068  5011               	movf	ISR@current_row^0,w,c
  1995   00006A  0D04               	mullw	4
  1996   00006C  50F3               	movf	243,w,c
  1997   00006E  0F01               	addlw	low _keypad_array
  1998   000070  2410               	addwf	ISR@is_key_pressed^0,w,c
  1999   000072  6E07               	movwf	??_ISR^0,c
  2000   000074  C007  FFF6         	movff	??_ISR,tblptrl
  2001   000078                     	if	1	;There is more than 1 active tblptr byte
  2002   000078  0E02               	movlw	high __smallconst
  2003   00007A  6EF7               	movwf	tblptrh,c
  2004   00007C                     	endif
  2005   00007C                     	if	0	;tblptru may be non-zero
  2006   00007C                     	endif
  2007   00007C                     	if	0	;tblptru may be non-zero
  2008   00007C                     	endif
  2009   00007C  503E               	movf	_key_value^0,w,c
  2010   00007E  0F3F               	addlw	low _keys
  2011   000080  6ED9               	movwf	fsr2l,c
  2012   000082  6ADA               	clrf	fsr2h,c
  2013   000084  0008               	tblrd		*
  2014   000086  CFF5 FFDF          	movff	tablat,indf2
  2015                           
  2016                           ;main.c: 109:             key_value++;
  2017   00008A  2A3E               	incf	_key_value^0,f,c
  2018   00008C                     i2l122:
  2019   00008C  C00F  FFF5         	movff	??_ISR+8,tablat
  2020   000090  C00E  FFF8         	movff	??_ISR+7,tblptru
  2021   000094  C00D  FFF7         	movff	??_ISR+6,tblptrh
  2022   000098  C00C  FFF6         	movff	??_ISR+5,tblptrl
  2023   00009C  C00B  FFF4         	movff	??_ISR+4,prodh
  2024   0000A0  C00A  FFF3         	movff	??_ISR+3,prodl
  2025   0000A4  C009  FFDA         	movff	??_ISR+2,fsr2h
  2026   0000A8  C008  FFD9         	movff	??_ISR+1,fsr2l
  2027   0000AC  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2028   0000AE  0011               	retfie		f
  2029   0000B0                     __end_of_ISR:
  2030                           	callstack 0
  2031                           
  2032 ;; *************** function _keypress *****************
  2033 ;; Defined at:
  2034 ;;		line 287 in file "main.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;  current_row     1    wreg     unsigned char 
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  current_row     1    3[COMRAM] unsigned char 
  2039 ;;  col_num         1    5[COMRAM] unsigned char 
  2040 ;;  col_key_pres    1    4[COMRAM] unsigned char 
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  1    wreg      unsigned char 
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1
  2050 ;;      Params:         0       0       0
  2051 ;;      Locals:         3       0       0
  2052 ;;      Temps:          3       0       0
  2053 ;;      Totals:         6       0       0
  2054 ;;Total ram usage:        6 bytes
  2055 ;; Hardware stack levels used: 1
  2056 ;; This function calls:
  2057 ;;		Nothing
  2058 ;; This function is called by:
  2059 ;;		_ISR
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text16
  2064   00032E                     __ptext16:
  2065                           	callstack 0
  2066   00032E                     _keypress:
  2067                           	callstack 24
  2068                           
  2069                           ;incstack = 0
  2070                           ;keypress@current_row stored from wreg
  2071   00032E  6E04               	movwf	keypress@current_row^0,c
  2072                           
  2073                           ;main.c: 287: char keypress(char current_row);main.c: 288: {;main.c: 290:     LATA = (un
      +                          signed char)(1 << current_row) | LATA;
  2074   000330  C004  F001         	movff	keypress@current_row,??_keypress
  2075   000334  0E01               	movlw	1
  2076   000336  6E02               	movwf	(??_keypress+1)^0,c
  2077   000338  2A01               	incf	??_keypress^0,f,c
  2078   00033A  D002               	goto	i2u16_44
  2079   00033C                     i2u16_45:
  2080   00033C  90D8               	bcf	status,0,c
  2081   00033E  3602               	rlcf	(??_keypress+1)^0,f,c
  2082   000340                     i2u16_44:
  2083   000340  2E01               	decfsz	??_keypress^0,f,c
  2084   000342  D7FC               	goto	i2u16_45
  2085   000344  5002               	movf	(??_keypress+1)^0,w,c
  2086   000346  1089               	iorwf	137,w,c	;volatile
  2087   000348  6E89               	movwf	137,c	;volatile
  2088                           
  2089                           ;main.c: 291:     char col_key_press = 0;
  2090   00034A  0E00               	movlw	0
  2091   00034C  6E05               	movwf	keypress@col_key_press^0,c
  2092                           
  2093                           ;main.c: 292:     char col_num = 0;
  2094   00034E  0E00               	movlw	0
  2095   000350  6E06               	movwf	keypress@col_num^0,c
  2096                           
  2097                           ;main.c: 294:     while(col_num < 4 && !col_key_press)
  2098   000352  D046               	goto	i2l1071
  2099   000354                     i2l1051:
  2100                           
  2101                           ;main.c: 295:     {;main.c: 296:         if((128 >> col_num) & PORTB)
  2102   000354  C006  F001         	movff	keypress@col_num,??_keypress
  2103   000358  0E80               	movlw	128
  2104   00035A  6E02               	movwf	(??_keypress+1)^0,c
  2105   00035C  0E00               	movlw	0
  2106   00035E  6E03               	movwf	(??_keypress+2)^0,c
  2107   000360  2A01               	incf	??_keypress^0,f,c
  2108   000362  D003               	goto	i2u17_44
  2109   000364                     i2u17_45:
  2110   000364  3403               	rlcf	(??_keypress+2)^0,w,c
  2111   000366  3203               	rrcf	(??_keypress+2)^0,f,c
  2112   000368  3202               	rrcf	(??_keypress+1)^0,f,c
  2113   00036A                     i2u17_44:
  2114   00036A  2E01               	decfsz	??_keypress^0,f,c
  2115   00036C  D7FB               	goto	i2u17_45
  2116   00036E  5002               	movf	(??_keypress+1)^0,w,c
  2117   000370  1481               	andwf	129,w,c	;volatile
  2118   000372  0900               	iorlw	0
  2119   000374  B4D8               	btfsc	status,2,c
  2120   000376  D033               	goto	i2l1069
  2121                           
  2122                           ;main.c: 297:         {;main.c: 298:             T3CON = 0b10010000;
  2123   000378  0E90               	movlw	144
  2124   00037A  6EB1               	movwf	177,c	;volatile
  2125                           
  2126                           ;main.c: 299:             PIE2bits.TMR3IE = 0;
  2127   00037C  92A0               	bcf	160,1,c	;volatile
  2128                           
  2129                           ;main.c: 300:             TMR3H = 0x63;
  2130   00037E  0E63               	movlw	99
  2131   000380  6EB3               	movwf	179,c	;volatile
  2132                           
  2133                           ;main.c: 301:             TMR3L = 0xC1;
  2134   000382  0EC1               	movlw	193
  2135   000384  6EB2               	movwf	178,c	;volatile
  2136                           
  2137                           ;main.c: 302:             PIR2bits.TMR3IF = 0;
  2138   000386  92A1               	bcf	161,1,c	;volatile
  2139                           
  2140                           ;main.c: 304:             T3CONbits.TMR3ON = 1;
  2141   000388  80B1               	bsf	177,0,c	;volatile
  2142   00038A                     i2l191:
  2143   00038A  A2A1               	btfss	161,1,c	;volatile
  2144   00038C  D7FE               	goto	i2l191
  2145                           
  2146                           ;main.c: 307:             T3CONbits.TMR3ON = 0;
  2147   00038E  90B1               	bcf	177,0,c	;volatile
  2148                           
  2149                           ;main.c: 308:             PIR2bits.TMR3IF = 0;
  2150   000390  92A1               	bcf	161,1,c	;volatile
  2151                           
  2152                           ;main.c: 310:             if((128 >> col_num) & PORTB)
  2153   000392  C006  F001         	movff	keypress@col_num,??_keypress
  2154   000396  0E80               	movlw	128
  2155   000398  6E02               	movwf	(??_keypress+1)^0,c
  2156   00039A  0E00               	movlw	0
  2157   00039C  6E03               	movwf	(??_keypress+2)^0,c
  2158   00039E  2A01               	incf	??_keypress^0,f,c
  2159   0003A0  D003               	goto	i2u20_44
  2160   0003A2                     i2u20_45:
  2161   0003A2  3403               	rlcf	(??_keypress+2)^0,w,c
  2162   0003A4  3203               	rrcf	(??_keypress+2)^0,f,c
  2163   0003A6  3202               	rrcf	(??_keypress+1)^0,f,c
  2164   0003A8                     i2u20_44:
  2165   0003A8  2E01               	decfsz	??_keypress^0,f,c
  2166   0003AA  D7FB               	goto	i2u20_45
  2167   0003AC  5002               	movf	(??_keypress+1)^0,w,c
  2168   0003AE  1481               	andwf	129,w,c	;volatile
  2169   0003B0  0900               	iorlw	0
  2170   0003B2  B4D8               	btfsc	status,2,c
  2171   0003B4  D014               	goto	i2l1069
  2172   0003B6                     i2u21_40:
  2173   0003B6  C006  F001         	movff	keypress@col_num,??_keypress
  2174   0003BA  0E80               	movlw	128
  2175   0003BC  6E02               	movwf	(??_keypress+1)^0,c
  2176   0003BE  0E00               	movlw	0
  2177   0003C0  6E03               	movwf	(??_keypress+2)^0,c
  2178   0003C2  2A01               	incf	??_keypress^0,f,c
  2179   0003C4  D003               	goto	i2u22_44
  2180   0003C6                     i2u22_45:
  2181   0003C6  3403               	rlcf	(??_keypress+2)^0,w,c
  2182   0003C8  3203               	rrcf	(??_keypress+2)^0,f,c
  2183   0003CA  3202               	rrcf	(??_keypress+1)^0,f,c
  2184   0003CC                     i2u22_44:
  2185   0003CC  2E01               	decfsz	??_keypress^0,f,c
  2186   0003CE  D7FB               	goto	i2u22_45
  2187   0003D0  5002               	movf	(??_keypress+1)^0,w,c
  2188   0003D2  1481               	andwf	129,w,c	;volatile
  2189   0003D4  0900               	iorlw	0
  2190   0003D6  A4D8               	btfss	status,2,c
  2191   0003D8  D7EE               	goto	i2u21_40
  2192                           
  2193                           ;main.c: 313:                 col_key_press = col_num + 1;
  2194   0003DA  2806               	incf	keypress@col_num^0,w,c
  2195   0003DC  6E05               	movwf	keypress@col_key_press^0,c
  2196   0003DE                     i2l1069:
  2197                           
  2198                           ;main.c: 316:         col_num++;
  2199   0003DE  2A06               	incf	keypress@col_num^0,f,c
  2200   0003E0                     i2l1071:
  2201                           
  2202                           ;main.c: 294:     while(col_num < 4 && !col_key_press)
  2203   0003E0  0E04               	movlw	4
  2204   0003E2  6006               	cpfslt	keypress@col_num^0,c
  2205   0003E4  D003               	goto	i2u25_40
  2206   0003E6  5005               	movf	keypress@col_key_press^0,w,c
  2207   0003E8  B4D8               	btfsc	status,2,c
  2208   0003EA  D7B4               	goto	i2l1051
  2209   0003EC                     i2u25_40:
  2210                           
  2211                           ;main.c: 320:     LATA = (unsigned char)(1 << current_row) ^ LATA;
  2212   0003EC  C004  F001         	movff	keypress@current_row,??_keypress
  2213   0003F0  0E01               	movlw	1
  2214   0003F2  6E02               	movwf	(??_keypress+1)^0,c
  2215   0003F4  2A01               	incf	??_keypress^0,f,c
  2216   0003F6  D002               	goto	i2u26_44
  2217   0003F8                     i2u26_45:
  2218   0003F8  90D8               	bcf	status,0,c
  2219   0003FA  3602               	rlcf	(??_keypress+1)^0,f,c
  2220   0003FC                     i2u26_44:
  2221   0003FC  2E01               	decfsz	??_keypress^0,f,c
  2222   0003FE  D7FC               	goto	i2u26_45
  2223   000400  5002               	movf	(??_keypress+1)^0,w,c
  2224   000402  1889               	xorwf	137,w,c	;volatile
  2225   000404  6E89               	movwf	137,c	;volatile
  2226                           
  2227                           ;main.c: 321:     return col_key_press;
  2228   000406  5005               	movf	keypress@col_key_press^0,w,c
  2229   000408  0012               	return		;funcret
  2230   00040A                     __end_of_keypress:
  2231                           	callstack 0
  2232                           
  2233                           	psect	rparam
  2234   000000                     
  2235                           	psect	temp
  2236   000049                     btemp:
  2237                           	callstack 0
  2238   000049                     	ds	1
  2239   000000                     int$flags	set	btemp
  2240   000000                     wtemp8	set	btemp+1
  2241   000000                     ttemp5	set	btemp+1
  2242   000000                     ttemp6	set	btemp+4
  2243   000000                     ttemp7	set	btemp+8
  2244                           
  2245                           	psect	config
  2246                           
  2247                           ; Padding undefined space
  2248   300000                     	org	3145728
  2249   300000  FF                 	db	255
  2250                           
  2251                           ;Config register CONFIG1H @ 0x300001
  2252                           ;	Oscillator
  2253                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  2254                           ;	Fail-Safe Clock Monitor Enable bit
  2255                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2256                           ;	Internal/External Oscillator Switchover bit
  2257                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2258   300001                     	org	3145729
  2259   300001  08                 	db	8
  2260                           
  2261                           ;Config register CONFIG2L @ 0x300002
  2262                           ;	Power-up Timer Enable bit
  2263                           ;	PWRT = OFF, PWRT disabled
  2264                           ;	Brown-out Reset Enable bits
  2265                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2266                           ;	Brown-out Reset Voltage bits
  2267                           ;	BORV = 3, Minimum Setting
  2268   300002                     	org	3145730
  2269   300002  1F                 	db	31
  2270                           
  2271                           ;Config register CONFIG2H @ 0x300003
  2272                           ;	Watchdog Timer Enable bit
  2273                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2274                           ;	Watchdog Timer Postscale Select bits
  2275                           ;	WDTPS = 32768, 1:32768
  2276   300003                     	org	3145731
  2277   300003  1E                 	db	30
  2278                           
  2279                           ; Padding undefined space
  2280   300004                     	org	3145732
  2281   300004  FF                 	db	255
  2282                           
  2283                           ;Config register CONFIG3H @ 0x300005
  2284                           ;	CCP2 MUX bit
  2285                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2286                           ;	PORTB A/D Enable bit
  2287                           ;	PBADEN = ANA, PORTB<4:0> pins are configured as analog input channels on Reset
  2288                           ;	Low-Power Timer1 Oscillator Enable bit
  2289                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2290                           ;	MCLR Pin Enable bit
  2291                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2292   300005                     	org	3145733
  2293   300005  83                 	db	131
  2294                           
  2295                           ;Config register CONFIG4L @ 0x300006
  2296                           ;	Stack Full/Underflow Reset Enable bit
  2297                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2298                           ;	Single-Supply ICSP Enable bit
  2299                           ;	LVP = OFF, Single-Supply ICSP disabled
  2300                           ;	Boot Block Size Select bits
  2301                           ;	BBSIZ = BB256, 256 Word
  2302                           ;	Extended Instruction Set Enable bit
  2303                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2304                           ;	Background Debugger Enable bit
  2305                           ;	DEBUG = 0x1, unprogrammed default
  2306   300006                     	org	3145734
  2307   300006  81                 	db	129
  2308                           
  2309                           ; Padding undefined space
  2310   300007                     	org	3145735
  2311   300007  FF                 	db	255
  2312                           
  2313                           ;Config register CONFIG5L @ 0x300008
  2314                           ;	Code Protection bit
  2315                           ;	CP0 = OFF, Block 0 not code-protected
  2316                           ;	Code Protection bit
  2317                           ;	CP1 = OFF, Block 1 not code-protected
  2318   300008                     	org	3145736
  2319   300008  03                 	db	3
  2320                           
  2321                           ;Config register CONFIG5H @ 0x300009
  2322                           ;	Boot Block Code Protection bitProtect Boot
  2323                           ;	CPB = OFF, Boot block not code-protected
  2324                           ;	Data EEPROM Code Protection bit
  2325                           ;	CPD = OFF, Data EEPROM not code-protected
  2326   300009                     	org	3145737
  2327   300009  C0                 	db	192
  2328                           
  2329                           ;Config register CONFIG6L @ 0x30000A
  2330                           ;	Write Protection bit
  2331                           ;	WRT0 = OFF, Block 0 not write-protected
  2332                           ;	Write Protection bit
  2333                           ;	WRT1 = OFF, Block 1 not write-protected
  2334   30000A                     	org	3145738
  2335   30000A  03                 	db	3
  2336                           
  2337                           ;Config register CONFIG6H @ 0x30000B
  2338                           ;	Configuration Register Write Protection bit
  2339                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2340                           ;	Boot Block Write Protection bit
  2341                           ;	WRTB = OFF, Boot block not write-protected
  2342                           ;	Data EEPROM Write Protection bit
  2343                           ;	WRTD = OFF, Data EEPROM not write-protected
  2344   30000B                     	org	3145739
  2345   30000B  E0                 	db	224
  2346                           
  2347                           ;Config register CONFIG7L @ 0x30000C
  2348                           ;	Table Read Protection bit
  2349                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  2350                           ;	Table Read Protection bit
  2351                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  2352   30000C                     	org	3145740
  2353   30000C  03                 	db	3
  2354                           
  2355                           ;Config register CONFIG7H @ 0x30000D
  2356                           ;	Boot Block Table Read Protection bit
  2357                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  2358   30000D                     	org	3145741
  2359   30000D  40                 	db	64
  2360                           tosu	equ	0xFFF
  2361                           tosh	equ	0xFFE
  2362                           tosl	equ	0xFFD
  2363                           stkptr	equ	0xFFC
  2364                           pclatu	equ	0xFFB
  2365                           pclath	equ	0xFFA
  2366                           pcl	equ	0xFF9
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           indf0	equ	0xFEF
  2374                           postinc0	equ	0xFEE
  2375                           postdec0	equ	0xFED
  2376                           preinc0	equ	0xFEC
  2377                           plusw0	equ	0xFEB
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           indf1	equ	0xFE7
  2382                           postinc1	equ	0xFE6
  2383                           postdec1	equ	0xFE5
  2384                           preinc1	equ	0xFE4
  2385                           plusw1	equ	0xFE3
  2386                           fsr1h	equ	0xFE2
  2387                           fsr1l	equ	0xFE1
  2388                           bsr	equ	0xFE0
  2389                           indf2	equ	0xFDF
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           preinc2	equ	0xFDC
  2393                           plusw2	equ	0xFDB
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           status	equ	0xFD8

Data Sizes:
    Strings     59
    Constant    16
    Data        0
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      72
    BANK0           128      0       0
    BANK1           244      0       0

Pointer List with Targets:

    lcd_message@message	PTR unsigned char  size(2) Largest target is 17
		 -> keys(COMRAM[10]), STR_1(CODE[8]), STR_2(CODE[7]), STR_3(CODE[9]), 
		 -> STR_4(CODE[17]), STR_5(CODE[16]), STR_6(CODE[2]), 


Critical Paths under _main in COMRAM

    _lcd_init->_lcd_move_cursor
    _lcd_move_cursor->_lcd_command
    _lcd_clear->_delay
    _lcd_backspace->_lcd_command
    _lcd_message->_lcd_char
    _lcd_char->_delay
    _lcd_command->_delay
    _delay->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_keypress

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   17598
                                             50 COMRAM     1     1      0
                        _keypad_init
                      _lcd_backspace
                          _lcd_clear
                           _lcd_init
                        _lcd_message
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0   10056
                              _delay
                          _lcd_clear
                        _lcd_command
                        _lcd_message
                    _lcd_move_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_move_cursor                                      2     1      1    3209
                                             48 COMRAM     2     1      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0    1099
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (1) _lcd_backspace                                        0     0      0    4679
                        _lcd_command
                        _lcd_message
 ---------------------------------------------------------------------------------
 (1) _lcd_message                                          2     0      2    1764
                                             43 COMRAM     2     0      2
                 _i2c_start_and_addr
                           _i2c_stop
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0    1172
                                             41 COMRAM     2     2      0
                              _delay
                        _i2c_data_tx
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          7     4      3    2915
                                             41 COMRAM     7     4      3
                              _delay
                        _i2c_data_tx
                 _i2c_start_and_addr
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (2) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_start_and_addr                                   1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c_data_tx                                          1     1      0      15
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _delay                                               12     8      4    1069
                                             29 COMRAM    12     8      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     370
                                             17 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _keypad_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 11    11      0     225
                                              6 COMRAM    11    11      0
                           _keypress
 ---------------------------------------------------------------------------------
 (7) _keypress                                             6     6      0     135
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad_init
   _lcd_backspace
     _lcd_command
       _delay
         ___lmul
       _i2c_data_tx
       _i2c_start_and_addr
       _i2c_stop
     _lcd_message
       _i2c_start_and_addr
       _i2c_stop
       _lcd_char
         _delay
         _i2c_data_tx
   _lcd_clear
     _delay
     _i2c_data_tx
     _i2c_start_and_addr
     _i2c_stop
   _lcd_init
     _delay
     _lcd_clear
     _lcd_command
     _lcd_message
     _lcd_move_cursor
       _lcd_command
   _lcd_message
   _system_init

 _ISR (ROOT)
   _keypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F3      0       0      23        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1            F4      0       0       8        0.0%
BANK1               F4      0       0       4        0.0%
BITBANK0            80      0       0       7        0.0%
BANK0               80      0       0       3        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      48       1       57.1%
BITBIGSFR_1llll      F      0       0      16        0.0%
BITBIGSFR_1lllh      D      0       0      15        0.0%
BITBIGSFR_5h         A      0       0       5        0.0%
BITBIGSFRlhl         8      0       0      19        0.0%
BITBIGSFRllh         7      0       0      20        0.0%
BITBIGSFRh           6      0       0      18        0.0%
BITBIGSFR_1lllh      3      0       0      14        0.0%
BITBIGSFR_1lh        3      0       0      13        0.0%
BITBIGSFR_2h         3      0       0      11        0.0%
BITBIGSFR_4          3      0       0       9        0.0%
BITBIGSFR_3          3      0       0      10        0.0%
BITBIGSFR_1hh        2      0       0      12        0.0%
BITBIGSFR_5l         1      0       0       6        0.0%
BITBIGSFR_1llll      1      0       0      17        0.0%
BITBIGSFRlll         1      0       0      21        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      48      22        0.0%
DATA                 0      0      48      24        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 12 22:02:30 2024

               _SSPSTATbits 0FC7         __end_of_system_init 086A                         l131 04CC  
                       l107 032A                         l127 0478                         l163 08A0  
                       l171 08B2                         l164 08A4                         l181 0892  
                       l177 0888                         l919 088E                         _ISR 0008  
                       u470 06C6                         u480 06EE                         u477 06BC  
                       u487 06E4                         wreg 0FE8              lcd_char@letter 002B  
                      ?_ISR 0001                        l1213 06CE                        l1161 071E  
                      l1209 06A6                        l1171 044E                        l1235 07F4  
                      l1157 070A                        l1265 025C                        l1179 0480  
                      l1279 02B8                        l1297 02FC                        l1289 02DE  
                      STR_1 023B                        STR_2 0243                        STR_3 0232  
                      STR_4 0211                        STR_5 0222                        STR_6 024A  
                      _LATA 0F89               ??_i2c_data_tx 0012                        _main 024E  
                      _keys 003F                        fsr0h 0FEA             ??_lcd_backspace 0031  
                      fsr1h 0FE2                        indf0 0FEF                        fsr2h 0FDA  
                      fsr0l 0FE9                        indf1 0FE7                        indf2 0FDF  
                      fsr1l 0FE1                        fsr2l 0FD9                        btemp 0049  
                      prodh 0FF4                        prodl 0FF3                        start 00B0  
 i2c_start_and_addr@address 0012            ?_lcd_move_cursor 0031                ___param_bank 0000  
                     ??_ISR 0007               lcd_command@lt 002A               lcd_command@rs 002C  
             lcd_command@rw 002B                       ?_main 0001                       _T0CON 0FD5  
                     _T1CON 0FCD                       _T3CON 0FB1                       i2l122 008C  
                     i2l191 038A                       _TMR0H 0FD7                       _TMR1H 0FCF  
                     _TMR0L 0FD6                       _TMR1L 0FCE                       _TMR3H 0FB3  
                     _TMR3L 0FB2                       _PORTB 0F81         ___lmul@multiplicand 0016  
                     _delay 040A                ?_keypad_init 0001             i2c_data_tx@data 0012  
                     tablat 0FF5                       ttemp5 004A                       ttemp6 004D  
                     ttemp7 0051                       status 0FD8                       wtemp8 004A  
       __end_of_i2c_data_tx 08B0             __initialization 086A                 _system_init 083E  
              __end_of_main 032E            __end_of_i2c_stop 08BA                      ??_main 0033  
             __activetblptr 0002          _i2c_start_and_addr 0884                      ?_delay 001E  
       ?_i2c_start_and_addr 0001                      i2l1051 0354                      i2l1141 004C  
                    i2l1071 03E0                      i2l1137 0042                      i2l1069 03DE  
                    _SSPADD 0FC8                      _SSPBUF 0FC9            __end_of_lcd_char 07A0  
          __end_of_lcd_init 05A0                      ___lmul 06FA        ??_i2c_start_and_addr 0012  
                    clear_0 0870                      isa$std 0001            __end_of_keypress 040A  
              __mediumconst 0000                      tblptrh 0FF7                      tblptrl 0FF6  
                    tblptru 0FF8     lcd_move_cursor@position 0031                  __accesstop 0080  
   __end_of__initialization 0876                 _i2c_data_tx 089E               ___rparam_used 0001  
            __pcstackCOMRAM 0001               __end_of_delay 04D6                     ??_delay 0022  
                 ?_i2c_stop 0001             lcd_command@data 0030                     ?___lmul 0012  
            ISR@current_row 0011              ___lmul@product 001A                     i2u20_44 03A8  
                   i2u20_45 03A2                     i2u21_40 03B6                     i2u22_44 03CC  
                   i2u22_45 03C6                     i2u16_44 0340                     i2u16_45 033C  
                   i2u25_40 03EC                     i2u17_44 036A                     i2u17_45 0364  
                   i2u26_44 03FC                     i2u26_45 03F8                     i2u39_40 0058  
                 ?_lcd_char 0001                   ?_lcd_init 0001                  ??_i2c_stop 0012  
       lcd_move_cursor@line 0032                   ?_keypress 0001       __end_of_lcd_backspace 07D6  
                   __Hparam 0000                     __Lparam 0000           __end_of_lcd_clear 069E  
              ?_system_init 0001                __psmallconst 0200                     __pcinit 086A  
                   __ramtop 0200                     __ptext0 024E                     __ptext1 083E  
                   __ptext2 04D6                     __ptext3 07D6                     __ptext4 063E  
                   __ptext5 07A0                     __ptext6 069E                     __ptext7 0750  
                   __ptext8 05A0                     __ptext9 08B0                   _T0CONbits 0FD5  
                 _T1CONbits 0FCD                   _T3CONbits 0FB1                  ??_lcd_char 002A  
                ??_lcd_init 0033        end_of_initialization 0876        __end_of_keypad_array 0211  
             __Lmediumconst 0000                  ??_keypress 0001                     postinc0 0FEE  
                   postinc2 0FDE                   _TRISAbits 0F92                   _TRISBbits 0F93  
                 _TRISCbits 0F94          lcd_message@message 002C                ?_i2c_data_tx 0001  
             ??_lcd_command 002D               ??_lcd_message 002E              __end_of___lmul 0750  
          delay@timer_value 0022         start_initialization 086A                 __end_of_ISR 00B0  
         ??_lcd_move_cursor 0032                    ??___lmul 001A         __end_of_lcd_command 063E  
       __end_of_lcd_message 06FA                 __pbssCOMRAM 0034               ??_keypad_init 0012  
           keypress@col_num 0006                   __pintcode 0008           ISR@is_key_pressed 0010  
              _keypad_array 0201                   _lcd_clear 063E                 __smallconst 0200  
                 _key_value 003E         __end_of_keypad_init 083E                    _PIE1bits 0F9D  
                  _PIE2bits 0FA0                 _lcd_command 05A0                    _PIR1bits 0F9E  
                  _PIR2bits 0FA1                 _lcd_message 069E       keypress@col_key_press 0005  
                  _RCONbits 0FD0                  ?_lcd_clear 0001                  _ADCON1bits 0FC1  
         ___lmul@multiplier 0012                 _INTCON2bits 0FF1                    _i2c_stop 08B0  
                  __Hrparam 0000         keypress@current_row 0004                    __Lrparam 0000  
           _lcd_move_cursor 07D6                    __ptext10 0884                    __ptext11 089E  
                  __ptext12 040A                    __ptext13 06FA                    __ptext14 080A  
                  __ptext16 032E                    _lcd_char 0750                 _keypad_init 080A  
                  _lcd_init 04D6                    _keypress 032E               _lcd_backspace 07A0  
__end_of_i2c_start_and_addr 089E                    isa$xinst 0000                    int$flags 0049  
         delay@milliseconds 001E                 ??_lcd_clear 002A                _sent_message 0034  
               _OSCTUNEbits 0F9B                  _INTCONbits 0FF2                    intlevel2 0000  
            ?_lcd_backspace 0001                  _OSCCONbits 0FD3     __end_of_lcd_move_cursor 080A  
             ??_system_init 0012                 _SSPCON1bits 0FC6                 _SSPCON2bits 0FC5  
              ?_lcd_command 002A                ?_lcd_message 002C  
